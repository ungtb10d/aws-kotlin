// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.polly.transform

import aws.sdk.kotlin.runtime.http.setAseErrorMetadata
import aws.sdk.kotlin.runtime.http.withPayload
import aws.sdk.kotlin.runtime.protocol.json.RestJsonErrorDeserializer
import aws.sdk.kotlin.services.polly.model.PollyException
import aws.sdk.kotlin.services.polly.model.SynthesizeSpeechResponse
import aws.smithy.kotlin.runtime.client.ExecutionContext
import aws.smithy.kotlin.runtime.content.ByteStream
import aws.smithy.kotlin.runtime.http.isSuccess
import aws.smithy.kotlin.runtime.http.operation.HttpDeserialize
import aws.smithy.kotlin.runtime.http.readAll
import aws.smithy.kotlin.runtime.http.response.HttpResponse
import aws.smithy.kotlin.runtime.http.toByteStream


internal class SynthesizeSpeechOperationDeserializer: HttpDeserialize<SynthesizeSpeechResponse> {

    override suspend fun deserialize(context: ExecutionContext, response: HttpResponse): SynthesizeSpeechResponse {
        if (!response.status.isSuccess()) {
            throwSynthesizeSpeechError(context, response)
        }
        val builder = SynthesizeSpeechResponse.Builder()

        builder.contentType = response.headers["Content-Type"]
        builder.requestCharacters = response.headers["x-amzn-RequestCharacters"]?.toInt() ?: 0

        builder.audioStream = response.body.toByteStream()

        return builder.build()
    }
}

private suspend fun throwSynthesizeSpeechError(context: ExecutionContext, response: HttpResponse): kotlin.Nothing {
    val payload = response.body.readAll()
    val wrappedResponse = response.withPayload(payload)

    val errorDetails = try {
        RestJsonErrorDeserializer.deserialize(response.headers, payload)
    } catch (ex: Exception) {
        throw PollyException("Failed to parse response as 'restJson1' error", ex).also {
            setAseErrorMetadata(it, wrappedResponse, null)
        }
    }

    val ex = when(errorDetails.code) {
        "EngineNotSupportedException" -> EngineNotSupportedExceptionDeserializer().deserialize(context, wrappedResponse)
        "InvalidSampleRateException" -> InvalidSampleRateExceptionDeserializer().deserialize(context, wrappedResponse)
        "InvalidSsmlException" -> InvalidSsmlExceptionDeserializer().deserialize(context, wrappedResponse)
        "LanguageNotSupportedException" -> LanguageNotSupportedExceptionDeserializer().deserialize(context, wrappedResponse)
        "LexiconNotFoundException" -> LexiconNotFoundExceptionDeserializer().deserialize(context, wrappedResponse)
        "MarksNotSupportedForFormatException" -> MarksNotSupportedForFormatExceptionDeserializer().deserialize(context, wrappedResponse)
        "ServiceFailureException" -> ServiceFailureExceptionDeserializer().deserialize(context, wrappedResponse)
        "SsmlMarksNotSupportedForTextTypeException" -> SsmlMarksNotSupportedForTextTypeExceptionDeserializer().deserialize(context, wrappedResponse)
        "TextLengthExceededException" -> TextLengthExceededExceptionDeserializer().deserialize(context, wrappedResponse)
        else -> PollyException(errorDetails.message)
    }

    setAseErrorMetadata(ex, wrappedResponse, errorDetails)
    throw ex
}
