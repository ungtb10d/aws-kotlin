// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.transform

import aws.sdk.kotlin.services.ec2.model.Route
import aws.sdk.kotlin.services.ec2.model.RouteOrigin
import aws.sdk.kotlin.services.ec2.model.RouteState
import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.serde.xml.XmlDeserializer
import aws.smithy.kotlin.runtime.serde.xml.XmlNamespace
import aws.smithy.kotlin.runtime.serde.xml.XmlSerialName

internal fun deserializeRouteDocument(deserializer: Deserializer): Route {
    val builder = Route.Builder()
    val CARRIERGATEWAYID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("carrierGatewayId"))
    val CORENETWORKARN_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("coreNetworkArn"))
    val DESTINATIONCIDRBLOCK_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("destinationCidrBlock"))
    val DESTINATIONIPV6CIDRBLOCK_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("destinationIpv6CidrBlock"))
    val DESTINATIONPREFIXLISTID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("destinationPrefixListId"))
    val EGRESSONLYINTERNETGATEWAYID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("egressOnlyInternetGatewayId"))
    val GATEWAYID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("gatewayId"))
    val INSTANCEID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("instanceId"))
    val INSTANCEOWNERID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("instanceOwnerId"))
    val LOCALGATEWAYID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("localGatewayId"))
    val NATGATEWAYID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("natGatewayId"))
    val NETWORKINTERFACEID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("networkInterfaceId"))
    val ORIGIN_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("origin"))
    val STATE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("state"))
    val TRANSITGATEWAYID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("transitGatewayId"))
    val VPCPEERINGCONNECTIONID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("vpcPeeringConnectionId"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(XmlSerialName("Route"))
        trait(XmlNamespace("http://ec2.amazonaws.com/doc/2016-11-15"))
        field(CARRIERGATEWAYID_DESCRIPTOR)
        field(CORENETWORKARN_DESCRIPTOR)
        field(DESTINATIONCIDRBLOCK_DESCRIPTOR)
        field(DESTINATIONIPV6CIDRBLOCK_DESCRIPTOR)
        field(DESTINATIONPREFIXLISTID_DESCRIPTOR)
        field(EGRESSONLYINTERNETGATEWAYID_DESCRIPTOR)
        field(GATEWAYID_DESCRIPTOR)
        field(INSTANCEID_DESCRIPTOR)
        field(INSTANCEOWNERID_DESCRIPTOR)
        field(LOCALGATEWAYID_DESCRIPTOR)
        field(NATGATEWAYID_DESCRIPTOR)
        field(NETWORKINTERFACEID_DESCRIPTOR)
        field(ORIGIN_DESCRIPTOR)
        field(STATE_DESCRIPTOR)
        field(TRANSITGATEWAYID_DESCRIPTOR)
        field(VPCPEERINGCONNECTIONID_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                CARRIERGATEWAYID_DESCRIPTOR.index -> builder.carrierGatewayId = deserializeString()
                CORENETWORKARN_DESCRIPTOR.index -> builder.coreNetworkArn = deserializeString()
                DESTINATIONCIDRBLOCK_DESCRIPTOR.index -> builder.destinationCidrBlock = deserializeString()
                DESTINATIONIPV6CIDRBLOCK_DESCRIPTOR.index -> builder.destinationIpv6CidrBlock = deserializeString()
                DESTINATIONPREFIXLISTID_DESCRIPTOR.index -> builder.destinationPrefixListId = deserializeString()
                EGRESSONLYINTERNETGATEWAYID_DESCRIPTOR.index -> builder.egressOnlyInternetGatewayId = deserializeString()
                GATEWAYID_DESCRIPTOR.index -> builder.gatewayId = deserializeString()
                INSTANCEID_DESCRIPTOR.index -> builder.instanceId = deserializeString()
                INSTANCEOWNERID_DESCRIPTOR.index -> builder.instanceOwnerId = deserializeString()
                LOCALGATEWAYID_DESCRIPTOR.index -> builder.localGatewayId = deserializeString()
                NATGATEWAYID_DESCRIPTOR.index -> builder.natGatewayId = deserializeString()
                NETWORKINTERFACEID_DESCRIPTOR.index -> builder.networkInterfaceId = deserializeString()
                ORIGIN_DESCRIPTOR.index -> builder.origin = deserializeString().let { RouteOrigin.fromValue(it) }
                STATE_DESCRIPTOR.index -> builder.state = deserializeString().let { RouteState.fromValue(it) }
                TRANSITGATEWAYID_DESCRIPTOR.index -> builder.transitGatewayId = deserializeString()
                VPCPEERINGCONNECTIONID_DESCRIPTOR.index -> builder.vpcPeeringConnectionId = deserializeString()
                null -> break@loop
                else -> skipValue()
            }
        }
    }
    return builder.build()
}
