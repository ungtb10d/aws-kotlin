// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



public class ImportVolumeRequest private constructor(builder: Builder) {
    /**
     * The Availability Zone for the resulting EBS volume.
     */
    public val availabilityZone: kotlin.String? = builder.availabilityZone
    /**
     * A description of the volume.
     */
    public val description: kotlin.String? = builder.description
    /**
     * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is `DryRunOperation`. Otherwise, it is `UnauthorizedOperation`.
     */
    public val dryRun: kotlin.Boolean? = builder.dryRun
    /**
     * The disk image.
     */
    public val image: aws.sdk.kotlin.services.ec2.model.DiskImageDetail? = builder.image
    /**
     * The volume size.
     */
    public val volume: aws.sdk.kotlin.services.ec2.model.VolumeDetail? = builder.volume

    public companion object {
        public operator fun invoke(block: Builder.() -> kotlin.Unit): aws.sdk.kotlin.services.ec2.model.ImportVolumeRequest = Builder().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("ImportVolumeRequest(")
        append("availabilityZone=$availabilityZone,")
        append("description=$description,")
        append("dryRun=$dryRun,")
        append("image=$image,")
        append("volume=$volume)")
    }

    override fun hashCode(): kotlin.Int {
        var result = availabilityZone?.hashCode() ?: 0
        result = 31 * result + (description?.hashCode() ?: 0)
        result = 31 * result + (dryRun?.hashCode() ?: 0)
        result = 31 * result + (image?.hashCode() ?: 0)
        result = 31 * result + (volume?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as ImportVolumeRequest

        if (availabilityZone != other.availabilityZone) return false
        if (description != other.description) return false
        if (dryRun != other.dryRun) return false
        if (image != other.image) return false
        if (volume != other.volume) return false

        return true
    }

    public inline fun copy(block: Builder.() -> kotlin.Unit = {}): aws.sdk.kotlin.services.ec2.model.ImportVolumeRequest = Builder(this).apply(block).build()

    public class Builder {
        /**
         * The Availability Zone for the resulting EBS volume.
         */
        public var availabilityZone: kotlin.String? = null
        /**
         * A description of the volume.
         */
        public var description: kotlin.String? = null
        /**
         * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is `DryRunOperation`. Otherwise, it is `UnauthorizedOperation`.
         */
        public var dryRun: kotlin.Boolean? = null
        /**
         * The disk image.
         */
        public var image: aws.sdk.kotlin.services.ec2.model.DiskImageDetail? = null
        /**
         * The volume size.
         */
        public var volume: aws.sdk.kotlin.services.ec2.model.VolumeDetail? = null

        @PublishedApi
        internal constructor()
        @PublishedApi
        internal constructor(x: aws.sdk.kotlin.services.ec2.model.ImportVolumeRequest) : this() {
            this.availabilityZone = x.availabilityZone
            this.description = x.description
            this.dryRun = x.dryRun
            this.image = x.image
            this.volume = x.volume
        }

        @PublishedApi
        internal fun build(): aws.sdk.kotlin.services.ec2.model.ImportVolumeRequest = ImportVolumeRequest(this)

        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.DiskImageDetail] inside the given [block]
         */
        public fun image(block: aws.sdk.kotlin.services.ec2.model.DiskImageDetail.Builder.() -> kotlin.Unit) {
            this.image = aws.sdk.kotlin.services.ec2.model.DiskImageDetail.invoke(block)
        }

        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.VolumeDetail] inside the given [block]
         */
        public fun volume(block: aws.sdk.kotlin.services.ec2.model.VolumeDetail.Builder.() -> kotlin.Unit) {
            this.volume = aws.sdk.kotlin.services.ec2.model.VolumeDetail.invoke(block)
        }
    }
}
