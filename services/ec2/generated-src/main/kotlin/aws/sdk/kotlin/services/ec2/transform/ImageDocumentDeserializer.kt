// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.transform

import aws.sdk.kotlin.services.ec2.model.ArchitectureValues
import aws.sdk.kotlin.services.ec2.model.BlockDeviceMapping
import aws.sdk.kotlin.services.ec2.model.BootModeValues
import aws.sdk.kotlin.services.ec2.model.DeviceType
import aws.sdk.kotlin.services.ec2.model.HypervisorType
import aws.sdk.kotlin.services.ec2.model.Image
import aws.sdk.kotlin.services.ec2.model.ImageState
import aws.sdk.kotlin.services.ec2.model.ImageTypeValues
import aws.sdk.kotlin.services.ec2.model.PlatformValues
import aws.sdk.kotlin.services.ec2.model.ProductCode
import aws.sdk.kotlin.services.ec2.model.Tag
import aws.sdk.kotlin.services.ec2.model.TpmSupportValues
import aws.sdk.kotlin.services.ec2.model.VirtualizationType
import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.serde.xml.XmlCollectionName
import aws.smithy.kotlin.runtime.serde.xml.XmlDeserializer
import aws.smithy.kotlin.runtime.serde.xml.XmlNamespace
import aws.smithy.kotlin.runtime.serde.xml.XmlSerialName

internal fun deserializeImageDocument(deserializer: Deserializer): Image {
    val builder = Image.Builder()
    val ARCHITECTURE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("architecture"))
    val BLOCKDEVICEMAPPINGS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("blockDeviceMapping"), XmlCollectionName("item"))
    val BOOTMODE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("bootMode"))
    val CREATIONDATE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("creationDate"))
    val DEPRECATIONTIME_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("deprecationTime"))
    val DESCRIPTION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("description"))
    val ENASUPPORT_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Boolean, XmlSerialName("enaSupport"))
    val HYPERVISOR_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("hypervisor"))
    val IMAGEID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("imageId"))
    val IMAGELOCATION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("imageLocation"))
    val IMAGEOWNERALIAS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("imageOwnerAlias"))
    val IMAGETYPE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("imageType"))
    val KERNELID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("kernelId"))
    val NAME_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("name"))
    val OWNERID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("imageOwnerId"))
    val PLATFORM_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("platform"))
    val PLATFORMDETAILS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("platformDetails"))
    val PRODUCTCODES_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("productCodes"), XmlCollectionName("item"))
    val PUBLIC_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Boolean, XmlSerialName("isPublic"))
    val RAMDISKID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("ramdiskId"))
    val ROOTDEVICENAME_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("rootDeviceName"))
    val ROOTDEVICETYPE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("rootDeviceType"))
    val SRIOVNETSUPPORT_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("sriovNetSupport"))
    val STATE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("imageState"))
    val STATEREASON_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("stateReason"))
    val TAGS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("tagSet"), XmlCollectionName("item"))
    val TPMSUPPORT_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("tpmSupport"))
    val USAGEOPERATION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("usageOperation"))
    val VIRTUALIZATIONTYPE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("virtualizationType"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(XmlSerialName("Image"))
        trait(XmlNamespace("http://ec2.amazonaws.com/doc/2016-11-15"))
        field(ARCHITECTURE_DESCRIPTOR)
        field(BLOCKDEVICEMAPPINGS_DESCRIPTOR)
        field(BOOTMODE_DESCRIPTOR)
        field(CREATIONDATE_DESCRIPTOR)
        field(DEPRECATIONTIME_DESCRIPTOR)
        field(DESCRIPTION_DESCRIPTOR)
        field(ENASUPPORT_DESCRIPTOR)
        field(HYPERVISOR_DESCRIPTOR)
        field(IMAGEID_DESCRIPTOR)
        field(IMAGELOCATION_DESCRIPTOR)
        field(IMAGEOWNERALIAS_DESCRIPTOR)
        field(IMAGETYPE_DESCRIPTOR)
        field(KERNELID_DESCRIPTOR)
        field(NAME_DESCRIPTOR)
        field(OWNERID_DESCRIPTOR)
        field(PLATFORM_DESCRIPTOR)
        field(PLATFORMDETAILS_DESCRIPTOR)
        field(PRODUCTCODES_DESCRIPTOR)
        field(PUBLIC_DESCRIPTOR)
        field(RAMDISKID_DESCRIPTOR)
        field(ROOTDEVICENAME_DESCRIPTOR)
        field(ROOTDEVICETYPE_DESCRIPTOR)
        field(SRIOVNETSUPPORT_DESCRIPTOR)
        field(STATE_DESCRIPTOR)
        field(STATEREASON_DESCRIPTOR)
        field(TAGS_DESCRIPTOR)
        field(TPMSUPPORT_DESCRIPTOR)
        field(USAGEOPERATION_DESCRIPTOR)
        field(VIRTUALIZATIONTYPE_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                ARCHITECTURE_DESCRIPTOR.index -> builder.architecture = deserializeString().let { ArchitectureValues.fromValue(it) }
                BLOCKDEVICEMAPPINGS_DESCRIPTOR.index -> builder.blockDeviceMappings =
                    deserializer.deserializeList(BLOCKDEVICEMAPPINGS_DESCRIPTOR) {
                        val col0 = mutableListOf<BlockDeviceMapping>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeBlockDeviceMappingDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                BOOTMODE_DESCRIPTOR.index -> builder.bootMode = deserializeString().let { BootModeValues.fromValue(it) }
                CREATIONDATE_DESCRIPTOR.index -> builder.creationDate = deserializeString()
                DEPRECATIONTIME_DESCRIPTOR.index -> builder.deprecationTime = deserializeString()
                DESCRIPTION_DESCRIPTOR.index -> builder.description = deserializeString()
                ENASUPPORT_DESCRIPTOR.index -> builder.enaSupport = deserializeBoolean()
                HYPERVISOR_DESCRIPTOR.index -> builder.hypervisor = deserializeString().let { HypervisorType.fromValue(it) }
                IMAGEID_DESCRIPTOR.index -> builder.imageId = deserializeString()
                IMAGELOCATION_DESCRIPTOR.index -> builder.imageLocation = deserializeString()
                IMAGEOWNERALIAS_DESCRIPTOR.index -> builder.imageOwnerAlias = deserializeString()
                IMAGETYPE_DESCRIPTOR.index -> builder.imageType = deserializeString().let { ImageTypeValues.fromValue(it) }
                KERNELID_DESCRIPTOR.index -> builder.kernelId = deserializeString()
                NAME_DESCRIPTOR.index -> builder.name = deserializeString()
                OWNERID_DESCRIPTOR.index -> builder.ownerId = deserializeString()
                PLATFORM_DESCRIPTOR.index -> builder.platform = deserializeString().let { PlatformValues.fromValue(it) }
                PLATFORMDETAILS_DESCRIPTOR.index -> builder.platformDetails = deserializeString()
                PRODUCTCODES_DESCRIPTOR.index -> builder.productCodes =
                    deserializer.deserializeList(PRODUCTCODES_DESCRIPTOR) {
                        val col0 = mutableListOf<ProductCode>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeProductCodeDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                PUBLIC_DESCRIPTOR.index -> builder.public = deserializeBoolean()
                RAMDISKID_DESCRIPTOR.index -> builder.ramdiskId = deserializeString()
                ROOTDEVICENAME_DESCRIPTOR.index -> builder.rootDeviceName = deserializeString()
                ROOTDEVICETYPE_DESCRIPTOR.index -> builder.rootDeviceType = deserializeString().let { DeviceType.fromValue(it) }
                SRIOVNETSUPPORT_DESCRIPTOR.index -> builder.sriovNetSupport = deserializeString()
                STATE_DESCRIPTOR.index -> builder.state = deserializeString().let { ImageState.fromValue(it) }
                STATEREASON_DESCRIPTOR.index -> builder.stateReason = deserializeStateReasonDocument(deserializer)
                TAGS_DESCRIPTOR.index -> builder.tags =
                    deserializer.deserializeList(TAGS_DESCRIPTOR) {
                        val col0 = mutableListOf<Tag>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeTagDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                TPMSUPPORT_DESCRIPTOR.index -> builder.tpmSupport = deserializeString().let { TpmSupportValues.fromValue(it) }
                USAGEOPERATION_DESCRIPTOR.index -> builder.usageOperation = deserializeString()
                VIRTUALIZATIONTYPE_DESCRIPTOR.index -> builder.virtualizationType = deserializeString().let { VirtualizationType.fromValue(it) }
                null -> break@loop
                else -> skipValue()
            }
        }
    }
    return builder.build()
}
