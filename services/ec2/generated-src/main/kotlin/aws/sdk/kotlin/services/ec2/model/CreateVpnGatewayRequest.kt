// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Contains the parameters for CreateVpnGateway.
 */
public class CreateVpnGatewayRequest private constructor(builder: Builder) {
    /**
     * A private Autonomous System Number (ASN) for the Amazon side of a BGP session. If you're using a 16-bit ASN, it must be in the 64512 to 65534 range. If you're using a 32-bit ASN, it must be in the 4200000000 to 4294967294 range.
     *
     * Default: 64512
     */
    public val amazonSideAsn: kotlin.Long? = builder.amazonSideAsn
    /**
     * The Availability Zone for the virtual private gateway.
     */
    public val availabilityZone: kotlin.String? = builder.availabilityZone
    /**
     * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is `DryRunOperation`. Otherwise, it is `UnauthorizedOperation`.
     */
    public val dryRun: kotlin.Boolean? = builder.dryRun
    /**
     * The tags to apply to the virtual private gateway.
     */
    public val tagSpecifications: List<TagSpecification>? = builder.tagSpecifications
    /**
     * The type of VPN connection this virtual private gateway supports.
     */
    public val type: aws.sdk.kotlin.services.ec2.model.GatewayType? = builder.type

    public companion object {
        public operator fun invoke(block: Builder.() -> kotlin.Unit): aws.sdk.kotlin.services.ec2.model.CreateVpnGatewayRequest = Builder().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("CreateVpnGatewayRequest(")
        append("amazonSideAsn=$amazonSideAsn,")
        append("availabilityZone=$availabilityZone,")
        append("dryRun=$dryRun,")
        append("tagSpecifications=$tagSpecifications,")
        append("type=$type)")
    }

    override fun hashCode(): kotlin.Int {
        var result = amazonSideAsn?.hashCode() ?: 0
        result = 31 * result + (availabilityZone?.hashCode() ?: 0)
        result = 31 * result + (dryRun?.hashCode() ?: 0)
        result = 31 * result + (tagSpecifications?.hashCode() ?: 0)
        result = 31 * result + (type?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as CreateVpnGatewayRequest

        if (amazonSideAsn != other.amazonSideAsn) return false
        if (availabilityZone != other.availabilityZone) return false
        if (dryRun != other.dryRun) return false
        if (tagSpecifications != other.tagSpecifications) return false
        if (type != other.type) return false

        return true
    }

    public inline fun copy(block: Builder.() -> kotlin.Unit = {}): aws.sdk.kotlin.services.ec2.model.CreateVpnGatewayRequest = Builder(this).apply(block).build()

    public class Builder {
        /**
         * A private Autonomous System Number (ASN) for the Amazon side of a BGP session. If you're using a 16-bit ASN, it must be in the 64512 to 65534 range. If you're using a 32-bit ASN, it must be in the 4200000000 to 4294967294 range.
         *
         * Default: 64512
         */
        public var amazonSideAsn: kotlin.Long? = null
        /**
         * The Availability Zone for the virtual private gateway.
         */
        public var availabilityZone: kotlin.String? = null
        /**
         * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is `DryRunOperation`. Otherwise, it is `UnauthorizedOperation`.
         */
        public var dryRun: kotlin.Boolean? = null
        /**
         * The tags to apply to the virtual private gateway.
         */
        public var tagSpecifications: List<TagSpecification>? = null
        /**
         * The type of VPN connection this virtual private gateway supports.
         */
        public var type: aws.sdk.kotlin.services.ec2.model.GatewayType? = null

        @PublishedApi
        internal constructor()
        @PublishedApi
        internal constructor(x: aws.sdk.kotlin.services.ec2.model.CreateVpnGatewayRequest) : this() {
            this.amazonSideAsn = x.amazonSideAsn
            this.availabilityZone = x.availabilityZone
            this.dryRun = x.dryRun
            this.tagSpecifications = x.tagSpecifications
            this.type = x.type
        }

        @PublishedApi
        internal fun build(): aws.sdk.kotlin.services.ec2.model.CreateVpnGatewayRequest = CreateVpnGatewayRequest(this)
    }
}
