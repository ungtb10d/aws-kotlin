// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.transform

import aws.sdk.kotlin.services.ec2.model.DnsEntry
import aws.sdk.kotlin.services.ec2.model.IpAddressType
import aws.sdk.kotlin.services.ec2.model.SecurityGroupIdentifier
import aws.sdk.kotlin.services.ec2.model.State
import aws.sdk.kotlin.services.ec2.model.Tag
import aws.sdk.kotlin.services.ec2.model.VpcEndpoint
import aws.sdk.kotlin.services.ec2.model.VpcEndpointType
import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.serde.xml.XmlCollectionName
import aws.smithy.kotlin.runtime.serde.xml.XmlDeserializer
import aws.smithy.kotlin.runtime.serde.xml.XmlNamespace
import aws.smithy.kotlin.runtime.serde.xml.XmlSerialName
import aws.smithy.kotlin.runtime.time.Instant

internal fun deserializeVpcEndpointDocument(deserializer: Deserializer): VpcEndpoint {
    val builder = VpcEndpoint.Builder()
    val CREATIONTIMESTAMP_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Timestamp, XmlSerialName("creationTimestamp"))
    val DNSENTRIES_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("dnsEntrySet"), XmlCollectionName("item"))
    val DNSOPTIONS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("dnsOptions"))
    val GROUPS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("groupSet"), XmlCollectionName("item"))
    val IPADDRESSTYPE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("ipAddressType"))
    val LASTERROR_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("lastError"))
    val NETWORKINTERFACEIDS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("networkInterfaceIdSet"), XmlCollectionName("item"))
    val OWNERID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("ownerId"))
    val POLICYDOCUMENT_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("policyDocument"))
    val PRIVATEDNSENABLED_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Boolean, XmlSerialName("privateDnsEnabled"))
    val REQUESTERMANAGED_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Boolean, XmlSerialName("requesterManaged"))
    val ROUTETABLEIDS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("routeTableIdSet"), XmlCollectionName("item"))
    val SERVICENAME_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("serviceName"))
    val STATE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("state"))
    val SUBNETIDS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("subnetIdSet"), XmlCollectionName("item"))
    val TAGS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("tagSet"), XmlCollectionName("item"))
    val VPCENDPOINTID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("vpcEndpointId"))
    val VPCENDPOINTTYPE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("vpcEndpointType"))
    val VPCID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("vpcId"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(XmlSerialName("VpcEndpoint"))
        trait(XmlNamespace("http://ec2.amazonaws.com/doc/2016-11-15"))
        field(CREATIONTIMESTAMP_DESCRIPTOR)
        field(DNSENTRIES_DESCRIPTOR)
        field(DNSOPTIONS_DESCRIPTOR)
        field(GROUPS_DESCRIPTOR)
        field(IPADDRESSTYPE_DESCRIPTOR)
        field(LASTERROR_DESCRIPTOR)
        field(NETWORKINTERFACEIDS_DESCRIPTOR)
        field(OWNERID_DESCRIPTOR)
        field(POLICYDOCUMENT_DESCRIPTOR)
        field(PRIVATEDNSENABLED_DESCRIPTOR)
        field(REQUESTERMANAGED_DESCRIPTOR)
        field(ROUTETABLEIDS_DESCRIPTOR)
        field(SERVICENAME_DESCRIPTOR)
        field(STATE_DESCRIPTOR)
        field(SUBNETIDS_DESCRIPTOR)
        field(TAGS_DESCRIPTOR)
        field(VPCENDPOINTID_DESCRIPTOR)
        field(VPCENDPOINTTYPE_DESCRIPTOR)
        field(VPCID_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                CREATIONTIMESTAMP_DESCRIPTOR.index -> builder.creationTimestamp = deserializeString().let { Instant.fromIso8601(it) }
                DNSENTRIES_DESCRIPTOR.index -> builder.dnsEntries =
                    deserializer.deserializeList(DNSENTRIES_DESCRIPTOR) {
                        val col0 = mutableListOf<DnsEntry>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeDnsEntryDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                DNSOPTIONS_DESCRIPTOR.index -> builder.dnsOptions = deserializeDnsOptionsDocument(deserializer)
                GROUPS_DESCRIPTOR.index -> builder.groups =
                    deserializer.deserializeList(GROUPS_DESCRIPTOR) {
                        val col0 = mutableListOf<SecurityGroupIdentifier>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeSecurityGroupIdentifierDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                IPADDRESSTYPE_DESCRIPTOR.index -> builder.ipAddressType = deserializeString().let { IpAddressType.fromValue(it) }
                LASTERROR_DESCRIPTOR.index -> builder.lastError = deserializeLastErrorDocument(deserializer)
                NETWORKINTERFACEIDS_DESCRIPTOR.index -> builder.networkInterfaceIds =
                    deserializer.deserializeList(NETWORKINTERFACEIDS_DESCRIPTOR) {
                        val col0 = mutableListOf<String>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeString() } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                OWNERID_DESCRIPTOR.index -> builder.ownerId = deserializeString()
                POLICYDOCUMENT_DESCRIPTOR.index -> builder.policyDocument = deserializeString()
                PRIVATEDNSENABLED_DESCRIPTOR.index -> builder.privateDnsEnabled = deserializeBoolean()
                REQUESTERMANAGED_DESCRIPTOR.index -> builder.requesterManaged = deserializeBoolean()
                ROUTETABLEIDS_DESCRIPTOR.index -> builder.routeTableIds =
                    deserializer.deserializeList(ROUTETABLEIDS_DESCRIPTOR) {
                        val col0 = mutableListOf<String>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeString() } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                SERVICENAME_DESCRIPTOR.index -> builder.serviceName = deserializeString()
                STATE_DESCRIPTOR.index -> builder.state = deserializeString().let { State.fromValue(it) }
                SUBNETIDS_DESCRIPTOR.index -> builder.subnetIds =
                    deserializer.deserializeList(SUBNETIDS_DESCRIPTOR) {
                        val col0 = mutableListOf<String>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeString() } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                TAGS_DESCRIPTOR.index -> builder.tags =
                    deserializer.deserializeList(TAGS_DESCRIPTOR) {
                        val col0 = mutableListOf<Tag>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeTagDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                VPCENDPOINTID_DESCRIPTOR.index -> builder.vpcEndpointId = deserializeString()
                VPCENDPOINTTYPE_DESCRIPTOR.index -> builder.vpcEndpointType = deserializeString().let { VpcEndpointType.fromValue(it) }
                VPCID_DESCRIPTOR.index -> builder.vpcId = deserializeString()
                null -> break@loop
                else -> skipValue()
            }
        }
    }
    return builder.build()
}
