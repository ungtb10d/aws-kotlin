// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.transform

import aws.sdk.kotlin.services.ec2.model.ConnectionNotification
import aws.sdk.kotlin.services.ec2.model.ConnectionNotificationState
import aws.sdk.kotlin.services.ec2.model.ConnectionNotificationType
import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.serde.xml.XmlCollectionName
import aws.smithy.kotlin.runtime.serde.xml.XmlDeserializer
import aws.smithy.kotlin.runtime.serde.xml.XmlNamespace
import aws.smithy.kotlin.runtime.serde.xml.XmlSerialName

internal fun deserializeConnectionNotificationDocument(deserializer: Deserializer): ConnectionNotification {
    val builder = ConnectionNotification.Builder()
    val CONNECTIONEVENTS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("connectionEvents"), XmlCollectionName("item"))
    val CONNECTIONNOTIFICATIONARN_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("connectionNotificationArn"))
    val CONNECTIONNOTIFICATIONID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("connectionNotificationId"))
    val CONNECTIONNOTIFICATIONSTATE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Enum, XmlSerialName("connectionNotificationState"))
    val CONNECTIONNOTIFICATIONTYPE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Enum, XmlSerialName("connectionNotificationType"))
    val SERVICEID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("serviceId"))
    val VPCENDPOINTID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("vpcEndpointId"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(XmlSerialName("ConnectionNotification"))
        trait(XmlNamespace("http://ec2.amazonaws.com/doc/2016-11-15"))
        field(CONNECTIONEVENTS_DESCRIPTOR)
        field(CONNECTIONNOTIFICATIONARN_DESCRIPTOR)
        field(CONNECTIONNOTIFICATIONID_DESCRIPTOR)
        field(CONNECTIONNOTIFICATIONSTATE_DESCRIPTOR)
        field(CONNECTIONNOTIFICATIONTYPE_DESCRIPTOR)
        field(SERVICEID_DESCRIPTOR)
        field(VPCENDPOINTID_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                CONNECTIONEVENTS_DESCRIPTOR.index -> builder.connectionEvents =
                    deserializer.deserializeList(CONNECTIONEVENTS_DESCRIPTOR) {
                        val col0 = mutableListOf<String>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeString() } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                CONNECTIONNOTIFICATIONARN_DESCRIPTOR.index -> builder.connectionNotificationArn = deserializeString()
                CONNECTIONNOTIFICATIONID_DESCRIPTOR.index -> builder.connectionNotificationId = deserializeString()
                CONNECTIONNOTIFICATIONSTATE_DESCRIPTOR.index -> builder.connectionNotificationState = deserializeString().let { ConnectionNotificationState.fromValue(it) }
                CONNECTIONNOTIFICATIONTYPE_DESCRIPTOR.index -> builder.connectionNotificationType = deserializeString().let { ConnectionNotificationType.fromValue(it) }
                SERVICEID_DESCRIPTOR.index -> builder.serviceId = deserializeString()
                VPCENDPOINTID_DESCRIPTOR.index -> builder.vpcEndpointId = deserializeString()
                null -> break@loop
                else -> skipValue()
            }
        }
    }
    return builder.build()
}
