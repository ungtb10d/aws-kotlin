// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



public class ExportTransitGatewayRoutesResponse private constructor(builder: Builder) {
    /**
     * The URL of the exported file in Amazon S3. For example, s3:/&#47;*bucket_name*&#47;VPCTransitGateway/TransitGatewayRouteTables&#47;*file_name*.
     */
    public val s3Location: kotlin.String? = builder.s3Location

    public companion object {
        public operator fun invoke(block: Builder.() -> kotlin.Unit): aws.sdk.kotlin.services.ec2.model.ExportTransitGatewayRoutesResponse = Builder().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("ExportTransitGatewayRoutesResponse(")
        append("s3Location=$s3Location)")
    }

    override fun hashCode(): kotlin.Int {
        var result = s3Location?.hashCode() ?: 0
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as ExportTransitGatewayRoutesResponse

        if (s3Location != other.s3Location) return false

        return true
    }

    public inline fun copy(block: Builder.() -> kotlin.Unit = {}): aws.sdk.kotlin.services.ec2.model.ExportTransitGatewayRoutesResponse = Builder(this).apply(block).build()

    public class Builder {
        /**
         * The URL of the exported file in Amazon S3. For example, s3:/&#47;*bucket_name*&#47;VPCTransitGateway/TransitGatewayRouteTables&#47;*file_name*.
         */
        public var s3Location: kotlin.String? = null

        @PublishedApi
        internal constructor()
        @PublishedApi
        internal constructor(x: aws.sdk.kotlin.services.ec2.model.ExportTransitGatewayRoutesResponse) : this() {
            this.s3Location = x.s3Location
        }

        @PublishedApi
        internal fun build(): aws.sdk.kotlin.services.ec2.model.ExportTransitGatewayRoutesResponse = ExportTransitGatewayRoutesResponse(this)
    }
}
