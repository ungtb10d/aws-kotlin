// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes a launch template and overrides.
 */
public class LaunchTemplateConfig private constructor(builder: Builder) {
    /**
     * The launch template.
     */
    public val launchTemplateSpecification: aws.sdk.kotlin.services.ec2.model.FleetLaunchTemplateSpecification? = builder.launchTemplateSpecification
    /**
     * Any parameters that you specify override the same parameters in the launch template.
     */
    public val overrides: List<LaunchTemplateOverrides>? = builder.overrides

    public companion object {
        public operator fun invoke(block: Builder.() -> kotlin.Unit): aws.sdk.kotlin.services.ec2.model.LaunchTemplateConfig = Builder().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("LaunchTemplateConfig(")
        append("launchTemplateSpecification=$launchTemplateSpecification,")
        append("overrides=$overrides)")
    }

    override fun hashCode(): kotlin.Int {
        var result = launchTemplateSpecification?.hashCode() ?: 0
        result = 31 * result + (overrides?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as LaunchTemplateConfig

        if (launchTemplateSpecification != other.launchTemplateSpecification) return false
        if (overrides != other.overrides) return false

        return true
    }

    public inline fun copy(block: Builder.() -> kotlin.Unit = {}): aws.sdk.kotlin.services.ec2.model.LaunchTemplateConfig = Builder(this).apply(block).build()

    public class Builder {
        /**
         * The launch template.
         */
        public var launchTemplateSpecification: aws.sdk.kotlin.services.ec2.model.FleetLaunchTemplateSpecification? = null
        /**
         * Any parameters that you specify override the same parameters in the launch template.
         */
        public var overrides: List<LaunchTemplateOverrides>? = null

        @PublishedApi
        internal constructor()
        @PublishedApi
        internal constructor(x: aws.sdk.kotlin.services.ec2.model.LaunchTemplateConfig) : this() {
            this.launchTemplateSpecification = x.launchTemplateSpecification
            this.overrides = x.overrides
        }

        @PublishedApi
        internal fun build(): aws.sdk.kotlin.services.ec2.model.LaunchTemplateConfig = LaunchTemplateConfig(this)

        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.FleetLaunchTemplateSpecification] inside the given [block]
         */
        public fun launchTemplateSpecification(block: aws.sdk.kotlin.services.ec2.model.FleetLaunchTemplateSpecification.Builder.() -> kotlin.Unit) {
            this.launchTemplateSpecification = aws.sdk.kotlin.services.ec2.model.FleetLaunchTemplateSpecification.invoke(block)
        }
    }
}
