// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



public class ProvisionIpamPoolCidrRequest private constructor(builder: Builder) {
    /**
     * The CIDR you want to assign to the IPAM pool.
     */
    public val cidr: kotlin.String? = builder.cidr
    /**
     * A signed document that proves that you are authorized to bring a specified IP address range to Amazon using BYOIP. This option applies to public pools only.
     */
    public val cidrAuthorizationContext: aws.sdk.kotlin.services.ec2.model.IpamCidrAuthorizationContext? = builder.cidrAuthorizationContext
    /**
     * A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is `DryRunOperation`. Otherwise, it is `UnauthorizedOperation`.
     */
    public val dryRun: kotlin.Boolean? = builder.dryRun
    /**
     * The ID of the IPAM pool to which you want to assign a CIDR.
     */
    public val ipamPoolId: kotlin.String? = builder.ipamPoolId

    public companion object {
        public operator fun invoke(block: Builder.() -> kotlin.Unit): aws.sdk.kotlin.services.ec2.model.ProvisionIpamPoolCidrRequest = Builder().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("ProvisionIpamPoolCidrRequest(")
        append("cidr=$cidr,")
        append("cidrAuthorizationContext=$cidrAuthorizationContext,")
        append("dryRun=$dryRun,")
        append("ipamPoolId=$ipamPoolId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = cidr?.hashCode() ?: 0
        result = 31 * result + (cidrAuthorizationContext?.hashCode() ?: 0)
        result = 31 * result + (dryRun?.hashCode() ?: 0)
        result = 31 * result + (ipamPoolId?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as ProvisionIpamPoolCidrRequest

        if (cidr != other.cidr) return false
        if (cidrAuthorizationContext != other.cidrAuthorizationContext) return false
        if (dryRun != other.dryRun) return false
        if (ipamPoolId != other.ipamPoolId) return false

        return true
    }

    public inline fun copy(block: Builder.() -> kotlin.Unit = {}): aws.sdk.kotlin.services.ec2.model.ProvisionIpamPoolCidrRequest = Builder(this).apply(block).build()

    public class Builder {
        /**
         * The CIDR you want to assign to the IPAM pool.
         */
        public var cidr: kotlin.String? = null
        /**
         * A signed document that proves that you are authorized to bring a specified IP address range to Amazon using BYOIP. This option applies to public pools only.
         */
        public var cidrAuthorizationContext: aws.sdk.kotlin.services.ec2.model.IpamCidrAuthorizationContext? = null
        /**
         * A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is `DryRunOperation`. Otherwise, it is `UnauthorizedOperation`.
         */
        public var dryRun: kotlin.Boolean? = null
        /**
         * The ID of the IPAM pool to which you want to assign a CIDR.
         */
        public var ipamPoolId: kotlin.String? = null

        @PublishedApi
        internal constructor()
        @PublishedApi
        internal constructor(x: aws.sdk.kotlin.services.ec2.model.ProvisionIpamPoolCidrRequest) : this() {
            this.cidr = x.cidr
            this.cidrAuthorizationContext = x.cidrAuthorizationContext
            this.dryRun = x.dryRun
            this.ipamPoolId = x.ipamPoolId
        }

        @PublishedApi
        internal fun build(): aws.sdk.kotlin.services.ec2.model.ProvisionIpamPoolCidrRequest = ProvisionIpamPoolCidrRequest(this)

        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.IpamCidrAuthorizationContext] inside the given [block]
         */
        public fun cidrAuthorizationContext(block: aws.sdk.kotlin.services.ec2.model.IpamCidrAuthorizationContext.Builder.() -> kotlin.Unit) {
            this.cidrAuthorizationContext = aws.sdk.kotlin.services.ec2.model.IpamCidrAuthorizationContext.invoke(block)
        }
    }
}
