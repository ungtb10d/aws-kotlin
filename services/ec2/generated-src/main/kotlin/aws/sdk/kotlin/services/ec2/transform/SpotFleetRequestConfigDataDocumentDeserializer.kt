// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.transform

import aws.sdk.kotlin.services.ec2.model.AllocationStrategy
import aws.sdk.kotlin.services.ec2.model.ExcessCapacityTerminationPolicy
import aws.sdk.kotlin.services.ec2.model.FleetType
import aws.sdk.kotlin.services.ec2.model.InstanceInterruptionBehavior
import aws.sdk.kotlin.services.ec2.model.LaunchTemplateConfig
import aws.sdk.kotlin.services.ec2.model.OnDemandAllocationStrategy
import aws.sdk.kotlin.services.ec2.model.SpotFleetLaunchSpecification
import aws.sdk.kotlin.services.ec2.model.SpotFleetRequestConfigData
import aws.sdk.kotlin.services.ec2.model.TagSpecification
import aws.sdk.kotlin.services.ec2.model.TargetCapacityUnitType
import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.serde.xml.XmlCollectionName
import aws.smithy.kotlin.runtime.serde.xml.XmlDeserializer
import aws.smithy.kotlin.runtime.serde.xml.XmlNamespace
import aws.smithy.kotlin.runtime.serde.xml.XmlSerialName
import aws.smithy.kotlin.runtime.time.Instant

internal fun deserializeSpotFleetRequestConfigDataDocument(deserializer: Deserializer): SpotFleetRequestConfigData {
    val builder = SpotFleetRequestConfigData.Builder()
    val ALLOCATIONSTRATEGY_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Enum, XmlSerialName("allocationStrategy"))
    val CLIENTTOKEN_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("clientToken"))
    val CONTEXT_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("context"))
    val EXCESSCAPACITYTERMINATIONPOLICY_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Enum, XmlSerialName("excessCapacityTerminationPolicy"))
    val FULFILLEDCAPACITY_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Double, XmlSerialName("fulfilledCapacity"))
    val IAMFLEETROLE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("iamFleetRole"))
    val INSTANCEINTERRUPTIONBEHAVIOR_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Enum, XmlSerialName("instanceInterruptionBehavior"))
    val INSTANCEPOOLSTOUSECOUNT_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, XmlSerialName("instancePoolsToUseCount"))
    val LAUNCHSPECIFICATIONS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("launchSpecifications"), XmlCollectionName("item"))
    val LAUNCHTEMPLATECONFIGS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("launchTemplateConfigs"), XmlCollectionName("item"))
    val LOADBALANCERSCONFIG_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("loadBalancersConfig"))
    val ONDEMANDALLOCATIONSTRATEGY_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Enum, XmlSerialName("onDemandAllocationStrategy"))
    val ONDEMANDFULFILLEDCAPACITY_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Double, XmlSerialName("onDemandFulfilledCapacity"))
    val ONDEMANDMAXTOTALPRICE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("onDemandMaxTotalPrice"))
    val ONDEMANDTARGETCAPACITY_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, XmlSerialName("onDemandTargetCapacity"))
    val REPLACEUNHEALTHYINSTANCES_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Boolean, XmlSerialName("replaceUnhealthyInstances"))
    val SPOTMAINTENANCESTRATEGIES_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("spotMaintenanceStrategies"))
    val SPOTMAXTOTALPRICE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("spotMaxTotalPrice"))
    val SPOTPRICE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("spotPrice"))
    val TAGSPECIFICATIONS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("TagSpecification"), XmlCollectionName("item"))
    val TARGETCAPACITY_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, XmlSerialName("targetCapacity"))
    val TARGETCAPACITYUNITTYPE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Enum, XmlSerialName("targetCapacityUnitType"))
    val TERMINATEINSTANCESWITHEXPIRATION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Boolean, XmlSerialName("terminateInstancesWithExpiration"))
    val TYPE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Enum, XmlSerialName("type"))
    val VALIDFROM_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Timestamp, XmlSerialName("validFrom"))
    val VALIDUNTIL_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Timestamp, XmlSerialName("validUntil"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(XmlSerialName("SpotFleetRequestConfigData"))
        trait(XmlNamespace("http://ec2.amazonaws.com/doc/2016-11-15"))
        field(ALLOCATIONSTRATEGY_DESCRIPTOR)
        field(CLIENTTOKEN_DESCRIPTOR)
        field(CONTEXT_DESCRIPTOR)
        field(EXCESSCAPACITYTERMINATIONPOLICY_DESCRIPTOR)
        field(FULFILLEDCAPACITY_DESCRIPTOR)
        field(IAMFLEETROLE_DESCRIPTOR)
        field(INSTANCEINTERRUPTIONBEHAVIOR_DESCRIPTOR)
        field(INSTANCEPOOLSTOUSECOUNT_DESCRIPTOR)
        field(LAUNCHSPECIFICATIONS_DESCRIPTOR)
        field(LAUNCHTEMPLATECONFIGS_DESCRIPTOR)
        field(LOADBALANCERSCONFIG_DESCRIPTOR)
        field(ONDEMANDALLOCATIONSTRATEGY_DESCRIPTOR)
        field(ONDEMANDFULFILLEDCAPACITY_DESCRIPTOR)
        field(ONDEMANDMAXTOTALPRICE_DESCRIPTOR)
        field(ONDEMANDTARGETCAPACITY_DESCRIPTOR)
        field(REPLACEUNHEALTHYINSTANCES_DESCRIPTOR)
        field(SPOTMAINTENANCESTRATEGIES_DESCRIPTOR)
        field(SPOTMAXTOTALPRICE_DESCRIPTOR)
        field(SPOTPRICE_DESCRIPTOR)
        field(TAGSPECIFICATIONS_DESCRIPTOR)
        field(TARGETCAPACITY_DESCRIPTOR)
        field(TARGETCAPACITYUNITTYPE_DESCRIPTOR)
        field(TERMINATEINSTANCESWITHEXPIRATION_DESCRIPTOR)
        field(TYPE_DESCRIPTOR)
        field(VALIDFROM_DESCRIPTOR)
        field(VALIDUNTIL_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                ALLOCATIONSTRATEGY_DESCRIPTOR.index -> builder.allocationStrategy = deserializeString().let { AllocationStrategy.fromValue(it) }
                CLIENTTOKEN_DESCRIPTOR.index -> builder.clientToken = deserializeString()
                CONTEXT_DESCRIPTOR.index -> builder.context = deserializeString()
                EXCESSCAPACITYTERMINATIONPOLICY_DESCRIPTOR.index -> builder.excessCapacityTerminationPolicy = deserializeString().let { ExcessCapacityTerminationPolicy.fromValue(it) }
                FULFILLEDCAPACITY_DESCRIPTOR.index -> builder.fulfilledCapacity = deserializeDouble()
                IAMFLEETROLE_DESCRIPTOR.index -> builder.iamFleetRole = deserializeString()
                INSTANCEINTERRUPTIONBEHAVIOR_DESCRIPTOR.index -> builder.instanceInterruptionBehavior = deserializeString().let { InstanceInterruptionBehavior.fromValue(it) }
                INSTANCEPOOLSTOUSECOUNT_DESCRIPTOR.index -> builder.instancePoolsToUseCount = deserializeInt()
                LAUNCHSPECIFICATIONS_DESCRIPTOR.index -> builder.launchSpecifications =
                    deserializer.deserializeList(LAUNCHSPECIFICATIONS_DESCRIPTOR) {
                        val col0 = mutableListOf<SpotFleetLaunchSpecification>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeSpotFleetLaunchSpecificationDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                LAUNCHTEMPLATECONFIGS_DESCRIPTOR.index -> builder.launchTemplateConfigs =
                    deserializer.deserializeList(LAUNCHTEMPLATECONFIGS_DESCRIPTOR) {
                        val col0 = mutableListOf<LaunchTemplateConfig>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeLaunchTemplateConfigDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                LOADBALANCERSCONFIG_DESCRIPTOR.index -> builder.loadBalancersConfig = deserializeLoadBalancersConfigDocument(deserializer)
                ONDEMANDALLOCATIONSTRATEGY_DESCRIPTOR.index -> builder.onDemandAllocationStrategy = deserializeString().let { OnDemandAllocationStrategy.fromValue(it) }
                ONDEMANDFULFILLEDCAPACITY_DESCRIPTOR.index -> builder.onDemandFulfilledCapacity = deserializeDouble()
                ONDEMANDMAXTOTALPRICE_DESCRIPTOR.index -> builder.onDemandMaxTotalPrice = deserializeString()
                ONDEMANDTARGETCAPACITY_DESCRIPTOR.index -> builder.onDemandTargetCapacity = deserializeInt()
                REPLACEUNHEALTHYINSTANCES_DESCRIPTOR.index -> builder.replaceUnhealthyInstances = deserializeBoolean()
                SPOTMAINTENANCESTRATEGIES_DESCRIPTOR.index -> builder.spotMaintenanceStrategies = deserializeSpotMaintenanceStrategiesDocument(deserializer)
                SPOTMAXTOTALPRICE_DESCRIPTOR.index -> builder.spotMaxTotalPrice = deserializeString()
                SPOTPRICE_DESCRIPTOR.index -> builder.spotPrice = deserializeString()
                TAGSPECIFICATIONS_DESCRIPTOR.index -> builder.tagSpecifications =
                    deserializer.deserializeList(TAGSPECIFICATIONS_DESCRIPTOR) {
                        val col0 = mutableListOf<TagSpecification>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeTagSpecificationDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                TARGETCAPACITY_DESCRIPTOR.index -> builder.targetCapacity = deserializeInt()
                TARGETCAPACITYUNITTYPE_DESCRIPTOR.index -> builder.targetCapacityUnitType = deserializeString().let { TargetCapacityUnitType.fromValue(it) }
                TERMINATEINSTANCESWITHEXPIRATION_DESCRIPTOR.index -> builder.terminateInstancesWithExpiration = deserializeBoolean()
                TYPE_DESCRIPTOR.index -> builder.type = deserializeString().let { FleetType.fromValue(it) }
                VALIDFROM_DESCRIPTOR.index -> builder.validFrom = deserializeString().let { Instant.fromIso8601(it) }
                VALIDUNTIL_DESCRIPTOR.index -> builder.validUntil = deserializeString().let { Instant.fromIso8601(it) }
                null -> break@loop
                else -> skipValue()
            }
        }
    }
    return builder.build()
}
