// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



public class CreateStoreImageTaskRequest private constructor(builder: Builder) {
    /**
     * The name of the Amazon S3 bucket in which the AMI object will be stored. The bucket must be in the Region in which the request is being made. The AMI object appears in the bucket only after the upload task has completed.
     */
    public val bucket: kotlin.String? = builder.bucket
    /**
     * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is `DryRunOperation`. Otherwise, it is `UnauthorizedOperation`.
     */
    public val dryRun: kotlin.Boolean? = builder.dryRun
    /**
     * The ID of the AMI.
     */
    public val imageId: kotlin.String? = builder.imageId
    /**
     * The tags to apply to the AMI object that will be stored in the Amazon S3 bucket.
     */
    public val s3ObjectTags: List<S3ObjectTag>? = builder.s3ObjectTags

    public companion object {
        public operator fun invoke(block: Builder.() -> kotlin.Unit): aws.sdk.kotlin.services.ec2.model.CreateStoreImageTaskRequest = Builder().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("CreateStoreImageTaskRequest(")
        append("bucket=$bucket,")
        append("dryRun=$dryRun,")
        append("imageId=$imageId,")
        append("s3ObjectTags=$s3ObjectTags)")
    }

    override fun hashCode(): kotlin.Int {
        var result = bucket?.hashCode() ?: 0
        result = 31 * result + (dryRun?.hashCode() ?: 0)
        result = 31 * result + (imageId?.hashCode() ?: 0)
        result = 31 * result + (s3ObjectTags?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as CreateStoreImageTaskRequest

        if (bucket != other.bucket) return false
        if (dryRun != other.dryRun) return false
        if (imageId != other.imageId) return false
        if (s3ObjectTags != other.s3ObjectTags) return false

        return true
    }

    public inline fun copy(block: Builder.() -> kotlin.Unit = {}): aws.sdk.kotlin.services.ec2.model.CreateStoreImageTaskRequest = Builder(this).apply(block).build()

    public class Builder {
        /**
         * The name of the Amazon S3 bucket in which the AMI object will be stored. The bucket must be in the Region in which the request is being made. The AMI object appears in the bucket only after the upload task has completed.
         */
        public var bucket: kotlin.String? = null
        /**
         * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is `DryRunOperation`. Otherwise, it is `UnauthorizedOperation`.
         */
        public var dryRun: kotlin.Boolean? = null
        /**
         * The ID of the AMI.
         */
        public var imageId: kotlin.String? = null
        /**
         * The tags to apply to the AMI object that will be stored in the Amazon S3 bucket.
         */
        public var s3ObjectTags: List<S3ObjectTag>? = null

        @PublishedApi
        internal constructor()
        @PublishedApi
        internal constructor(x: aws.sdk.kotlin.services.ec2.model.CreateStoreImageTaskRequest) : this() {
            this.bucket = x.bucket
            this.dryRun = x.dryRun
            this.imageId = x.imageId
            this.s3ObjectTags = x.s3ObjectTags
        }

        @PublishedApi
        internal fun build(): aws.sdk.kotlin.services.ec2.model.CreateStoreImageTaskRequest = CreateStoreImageTaskRequest(this)
    }
}
