// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.transform

import aws.sdk.kotlin.services.ec2.model.AvailabilityZone
import aws.sdk.kotlin.services.ec2.model.AvailabilityZoneMessage
import aws.sdk.kotlin.services.ec2.model.AvailabilityZoneOptInStatus
import aws.sdk.kotlin.services.ec2.model.AvailabilityZoneState
import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.serde.xml.XmlCollectionName
import aws.smithy.kotlin.runtime.serde.xml.XmlDeserializer
import aws.smithy.kotlin.runtime.serde.xml.XmlNamespace
import aws.smithy.kotlin.runtime.serde.xml.XmlSerialName

internal fun deserializeAvailabilityZoneDocument(deserializer: Deserializer): AvailabilityZone {
    val builder = AvailabilityZone.Builder()
    val GROUPNAME_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("groupName"))
    val MESSAGES_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("messageSet"), XmlCollectionName("item"))
    val NETWORKBORDERGROUP_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("networkBorderGroup"))
    val OPTINSTATUS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("optInStatus"))
    val PARENTZONEID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("parentZoneId"))
    val PARENTZONENAME_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("parentZoneName"))
    val REGIONNAME_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("regionName"))
    val STATE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("zoneState"))
    val ZONEID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("zoneId"))
    val ZONENAME_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("zoneName"))
    val ZONETYPE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("zoneType"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(XmlSerialName("AvailabilityZone"))
        trait(XmlNamespace("http://ec2.amazonaws.com/doc/2016-11-15"))
        field(GROUPNAME_DESCRIPTOR)
        field(MESSAGES_DESCRIPTOR)
        field(NETWORKBORDERGROUP_DESCRIPTOR)
        field(OPTINSTATUS_DESCRIPTOR)
        field(PARENTZONEID_DESCRIPTOR)
        field(PARENTZONENAME_DESCRIPTOR)
        field(REGIONNAME_DESCRIPTOR)
        field(STATE_DESCRIPTOR)
        field(ZONEID_DESCRIPTOR)
        field(ZONENAME_DESCRIPTOR)
        field(ZONETYPE_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                GROUPNAME_DESCRIPTOR.index -> builder.groupName = deserializeString()
                MESSAGES_DESCRIPTOR.index -> builder.messages =
                    deserializer.deserializeList(MESSAGES_DESCRIPTOR) {
                        val col0 = mutableListOf<AvailabilityZoneMessage>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeAvailabilityZoneMessageDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                NETWORKBORDERGROUP_DESCRIPTOR.index -> builder.networkBorderGroup = deserializeString()
                OPTINSTATUS_DESCRIPTOR.index -> builder.optInStatus = deserializeString().let { AvailabilityZoneOptInStatus.fromValue(it) }
                PARENTZONEID_DESCRIPTOR.index -> builder.parentZoneId = deserializeString()
                PARENTZONENAME_DESCRIPTOR.index -> builder.parentZoneName = deserializeString()
                REGIONNAME_DESCRIPTOR.index -> builder.regionName = deserializeString()
                STATE_DESCRIPTOR.index -> builder.state = deserializeString().let { AvailabilityZoneState.fromValue(it) }
                ZONEID_DESCRIPTOR.index -> builder.zoneId = deserializeString()
                ZONENAME_DESCRIPTOR.index -> builder.zoneName = deserializeString()
                ZONETYPE_DESCRIPTOR.index -> builder.zoneType = deserializeString()
                null -> break@loop
                else -> skipValue()
            }
        }
    }
    return builder.build()
}
