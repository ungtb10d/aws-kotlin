// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes a disk image.
 */
public class DiskImageDetail private constructor(builder: Builder) {
    /**
     * The size of the disk image, in GiB.
     */
    public val bytes: kotlin.Long? = builder.bytes
    /**
     * The disk image format.
     */
    public val format: aws.sdk.kotlin.services.ec2.model.DiskImageFormat? = builder.format
    /**
     * A presigned URL for the import manifest stored in Amazon S3 and presented here as an Amazon S3 presigned URL. For information about creating a presigned URL for an Amazon S3 object, read the "Query String Request Authentication Alternative" section of the [Authenticating REST Requests](https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html) topic in the *Amazon Simple Storage Service Developer Guide*.
     *
     * For information about the import manifest referenced by this API action, see [VM Import Manifest](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html).
     */
    public val importManifestUrl: kotlin.String? = builder.importManifestUrl

    public companion object {
        public operator fun invoke(block: Builder.() -> kotlin.Unit): aws.sdk.kotlin.services.ec2.model.DiskImageDetail = Builder().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("DiskImageDetail(")
        append("bytes=$bytes,")
        append("format=$format,")
        append("importManifestUrl=$importManifestUrl)")
    }

    override fun hashCode(): kotlin.Int {
        var result = bytes?.hashCode() ?: 0
        result = 31 * result + (format?.hashCode() ?: 0)
        result = 31 * result + (importManifestUrl?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as DiskImageDetail

        if (bytes != other.bytes) return false
        if (format != other.format) return false
        if (importManifestUrl != other.importManifestUrl) return false

        return true
    }

    public inline fun copy(block: Builder.() -> kotlin.Unit = {}): aws.sdk.kotlin.services.ec2.model.DiskImageDetail = Builder(this).apply(block).build()

    public class Builder {
        /**
         * The size of the disk image, in GiB.
         */
        public var bytes: kotlin.Long? = null
        /**
         * The disk image format.
         */
        public var format: aws.sdk.kotlin.services.ec2.model.DiskImageFormat? = null
        /**
         * A presigned URL for the import manifest stored in Amazon S3 and presented here as an Amazon S3 presigned URL. For information about creating a presigned URL for an Amazon S3 object, read the "Query String Request Authentication Alternative" section of the [Authenticating REST Requests](https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html) topic in the *Amazon Simple Storage Service Developer Guide*.
         *
         * For information about the import manifest referenced by this API action, see [VM Import Manifest](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html).
         */
        public var importManifestUrl: kotlin.String? = null

        @PublishedApi
        internal constructor()
        @PublishedApi
        internal constructor(x: aws.sdk.kotlin.services.ec2.model.DiskImageDetail) : this() {
            this.bytes = x.bytes
            this.format = x.format
            this.importManifestUrl = x.importManifestUrl
        }

        @PublishedApi
        internal fun build(): aws.sdk.kotlin.services.ec2.model.DiskImageDetail = DiskImageDetail(this)
    }
}
