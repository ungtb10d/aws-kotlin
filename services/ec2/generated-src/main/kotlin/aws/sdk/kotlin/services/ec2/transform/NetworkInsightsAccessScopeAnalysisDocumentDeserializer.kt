// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.transform

import aws.sdk.kotlin.services.ec2.model.AnalysisStatus
import aws.sdk.kotlin.services.ec2.model.FindingsFound
import aws.sdk.kotlin.services.ec2.model.NetworkInsightsAccessScopeAnalysis
import aws.sdk.kotlin.services.ec2.model.Tag
import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.serde.xml.XmlCollectionName
import aws.smithy.kotlin.runtime.serde.xml.XmlDeserializer
import aws.smithy.kotlin.runtime.serde.xml.XmlNamespace
import aws.smithy.kotlin.runtime.serde.xml.XmlSerialName
import aws.smithy.kotlin.runtime.time.Instant

internal fun deserializeNetworkInsightsAccessScopeAnalysisDocument(deserializer: Deserializer): NetworkInsightsAccessScopeAnalysis {
    val builder = NetworkInsightsAccessScopeAnalysis.Builder()
    val ANALYZEDENICOUNT_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, XmlSerialName("analyzedEniCount"))
    val ENDDATE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Timestamp, XmlSerialName("endDate"))
    val FINDINGSFOUND_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Enum, XmlSerialName("findingsFound"))
    val NETWORKINSIGHTSACCESSSCOPEANALYSISARN_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("networkInsightsAccessScopeAnalysisArn"))
    val NETWORKINSIGHTSACCESSSCOPEANALYSISID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("networkInsightsAccessScopeAnalysisId"))
    val NETWORKINSIGHTSACCESSSCOPEID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("networkInsightsAccessScopeId"))
    val STARTDATE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Timestamp, XmlSerialName("startDate"))
    val STATUS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Enum, XmlSerialName("status"))
    val STATUSMESSAGE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("statusMessage"))
    val TAGS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("tagSet"), XmlCollectionName("item"))
    val WARNINGMESSAGE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("warningMessage"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(XmlSerialName("NetworkInsightsAccessScopeAnalysis"))
        trait(XmlNamespace("http://ec2.amazonaws.com/doc/2016-11-15"))
        field(ANALYZEDENICOUNT_DESCRIPTOR)
        field(ENDDATE_DESCRIPTOR)
        field(FINDINGSFOUND_DESCRIPTOR)
        field(NETWORKINSIGHTSACCESSSCOPEANALYSISARN_DESCRIPTOR)
        field(NETWORKINSIGHTSACCESSSCOPEANALYSISID_DESCRIPTOR)
        field(NETWORKINSIGHTSACCESSSCOPEID_DESCRIPTOR)
        field(STARTDATE_DESCRIPTOR)
        field(STATUS_DESCRIPTOR)
        field(STATUSMESSAGE_DESCRIPTOR)
        field(TAGS_DESCRIPTOR)
        field(WARNINGMESSAGE_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                ANALYZEDENICOUNT_DESCRIPTOR.index -> builder.analyzedEniCount = deserializeInt()
                ENDDATE_DESCRIPTOR.index -> builder.endDate = deserializeString().let { Instant.fromIso8601(it) }
                FINDINGSFOUND_DESCRIPTOR.index -> builder.findingsFound = deserializeString().let { FindingsFound.fromValue(it) }
                NETWORKINSIGHTSACCESSSCOPEANALYSISARN_DESCRIPTOR.index -> builder.networkInsightsAccessScopeAnalysisArn = deserializeString()
                NETWORKINSIGHTSACCESSSCOPEANALYSISID_DESCRIPTOR.index -> builder.networkInsightsAccessScopeAnalysisId = deserializeString()
                NETWORKINSIGHTSACCESSSCOPEID_DESCRIPTOR.index -> builder.networkInsightsAccessScopeId = deserializeString()
                STARTDATE_DESCRIPTOR.index -> builder.startDate = deserializeString().let { Instant.fromIso8601(it) }
                STATUS_DESCRIPTOR.index -> builder.status = deserializeString().let { AnalysisStatus.fromValue(it) }
                STATUSMESSAGE_DESCRIPTOR.index -> builder.statusMessage = deserializeString()
                TAGS_DESCRIPTOR.index -> builder.tags =
                    deserializer.deserializeList(TAGS_DESCRIPTOR) {
                        val col0 = mutableListOf<Tag>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeTagDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                WARNINGMESSAGE_DESCRIPTOR.index -> builder.warningMessage = deserializeString()
                null -> break@loop
                else -> skipValue()
            }
        }
    }
    return builder.build()
}
