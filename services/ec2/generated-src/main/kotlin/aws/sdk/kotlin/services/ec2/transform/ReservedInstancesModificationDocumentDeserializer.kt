// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.transform

import aws.sdk.kotlin.services.ec2.model.ReservedInstancesId
import aws.sdk.kotlin.services.ec2.model.ReservedInstancesModification
import aws.sdk.kotlin.services.ec2.model.ReservedInstancesModificationResult
import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.serde.xml.XmlCollectionName
import aws.smithy.kotlin.runtime.serde.xml.XmlDeserializer
import aws.smithy.kotlin.runtime.serde.xml.XmlNamespace
import aws.smithy.kotlin.runtime.serde.xml.XmlSerialName
import aws.smithy.kotlin.runtime.time.Instant

internal fun deserializeReservedInstancesModificationDocument(deserializer: Deserializer): ReservedInstancesModification {
    val builder = ReservedInstancesModification.Builder()
    val CLIENTTOKEN_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("clientToken"))
    val CREATEDATE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Timestamp, XmlSerialName("createDate"))
    val EFFECTIVEDATE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Timestamp, XmlSerialName("effectiveDate"))
    val MODIFICATIONRESULTS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("modificationResultSet"), XmlCollectionName("item"))
    val RESERVEDINSTANCESIDS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("reservedInstancesSet"), XmlCollectionName("item"))
    val RESERVEDINSTANCESMODIFICATIONID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("reservedInstancesModificationId"))
    val STATUS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("status"))
    val STATUSMESSAGE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("statusMessage"))
    val UPDATEDATE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Timestamp, XmlSerialName("updateDate"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(XmlSerialName("ReservedInstancesModification"))
        trait(XmlNamespace("http://ec2.amazonaws.com/doc/2016-11-15"))
        field(CLIENTTOKEN_DESCRIPTOR)
        field(CREATEDATE_DESCRIPTOR)
        field(EFFECTIVEDATE_DESCRIPTOR)
        field(MODIFICATIONRESULTS_DESCRIPTOR)
        field(RESERVEDINSTANCESIDS_DESCRIPTOR)
        field(RESERVEDINSTANCESMODIFICATIONID_DESCRIPTOR)
        field(STATUS_DESCRIPTOR)
        field(STATUSMESSAGE_DESCRIPTOR)
        field(UPDATEDATE_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                CLIENTTOKEN_DESCRIPTOR.index -> builder.clientToken = deserializeString()
                CREATEDATE_DESCRIPTOR.index -> builder.createDate = deserializeString().let { Instant.fromIso8601(it) }
                EFFECTIVEDATE_DESCRIPTOR.index -> builder.effectiveDate = deserializeString().let { Instant.fromIso8601(it) }
                MODIFICATIONRESULTS_DESCRIPTOR.index -> builder.modificationResults =
                    deserializer.deserializeList(MODIFICATIONRESULTS_DESCRIPTOR) {
                        val col0 = mutableListOf<ReservedInstancesModificationResult>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeReservedInstancesModificationResultDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                RESERVEDINSTANCESIDS_DESCRIPTOR.index -> builder.reservedInstancesIds =
                    deserializer.deserializeList(RESERVEDINSTANCESIDS_DESCRIPTOR) {
                        val col0 = mutableListOf<ReservedInstancesId>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeReservedInstancesIdDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                RESERVEDINSTANCESMODIFICATIONID_DESCRIPTOR.index -> builder.reservedInstancesModificationId = deserializeString()
                STATUS_DESCRIPTOR.index -> builder.status = deserializeString()
                STATUSMESSAGE_DESCRIPTOR.index -> builder.statusMessage = deserializeString()
                UPDATEDATE_DESCRIPTOR.index -> builder.updateDate = deserializeString().let { Instant.fromIso8601(it) }
                null -> break@loop
                else -> skipValue()
            }
        }
    }
    return builder.build()
}
