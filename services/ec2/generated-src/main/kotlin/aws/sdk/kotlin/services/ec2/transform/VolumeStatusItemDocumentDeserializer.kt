// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.transform

import aws.sdk.kotlin.services.ec2.model.VolumeStatusAction
import aws.sdk.kotlin.services.ec2.model.VolumeStatusAttachmentStatus
import aws.sdk.kotlin.services.ec2.model.VolumeStatusEvent
import aws.sdk.kotlin.services.ec2.model.VolumeStatusItem
import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.serde.xml.XmlCollectionName
import aws.smithy.kotlin.runtime.serde.xml.XmlDeserializer
import aws.smithy.kotlin.runtime.serde.xml.XmlNamespace
import aws.smithy.kotlin.runtime.serde.xml.XmlSerialName

internal fun deserializeVolumeStatusItemDocument(deserializer: Deserializer): VolumeStatusItem {
    val builder = VolumeStatusItem.Builder()
    val ACTIONS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("actionsSet"), XmlCollectionName("item"))
    val ATTACHMENTSTATUSES_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("attachmentStatuses"), XmlCollectionName("item"))
    val AVAILABILITYZONE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("availabilityZone"))
    val EVENTS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("eventsSet"), XmlCollectionName("item"))
    val OUTPOSTARN_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("outpostArn"))
    val VOLUMEID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("volumeId"))
    val VOLUMESTATUS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("volumeStatus"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(XmlSerialName("VolumeStatusItem"))
        trait(XmlNamespace("http://ec2.amazonaws.com/doc/2016-11-15"))
        field(ACTIONS_DESCRIPTOR)
        field(ATTACHMENTSTATUSES_DESCRIPTOR)
        field(AVAILABILITYZONE_DESCRIPTOR)
        field(EVENTS_DESCRIPTOR)
        field(OUTPOSTARN_DESCRIPTOR)
        field(VOLUMEID_DESCRIPTOR)
        field(VOLUMESTATUS_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                ACTIONS_DESCRIPTOR.index -> builder.actions =
                    deserializer.deserializeList(ACTIONS_DESCRIPTOR) {
                        val col0 = mutableListOf<VolumeStatusAction>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeVolumeStatusActionDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                ATTACHMENTSTATUSES_DESCRIPTOR.index -> builder.attachmentStatuses =
                    deserializer.deserializeList(ATTACHMENTSTATUSES_DESCRIPTOR) {
                        val col0 = mutableListOf<VolumeStatusAttachmentStatus>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeVolumeStatusAttachmentStatusDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                AVAILABILITYZONE_DESCRIPTOR.index -> builder.availabilityZone = deserializeString()
                EVENTS_DESCRIPTOR.index -> builder.events =
                    deserializer.deserializeList(EVENTS_DESCRIPTOR) {
                        val col0 = mutableListOf<VolumeStatusEvent>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeVolumeStatusEventDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                OUTPOSTARN_DESCRIPTOR.index -> builder.outpostArn = deserializeString()
                VOLUMEID_DESCRIPTOR.index -> builder.volumeId = deserializeString()
                VOLUMESTATUS_DESCRIPTOR.index -> builder.volumeStatus = deserializeVolumeStatusInfoDocument(deserializer)
                null -> break@loop
                else -> skipValue()
            }
        }
    }
    return builder.build()
}
