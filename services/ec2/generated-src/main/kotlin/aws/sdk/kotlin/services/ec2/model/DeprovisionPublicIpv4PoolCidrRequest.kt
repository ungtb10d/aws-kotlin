// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



public class DeprovisionPublicIpv4PoolCidrRequest private constructor(builder: Builder) {
    /**
     * The CIDR you want to deprovision from the pool.
     */
    public val cidr: kotlin.String? = builder.cidr
    /**
     * A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is `DryRunOperation`. Otherwise, it is `UnauthorizedOperation`.
     */
    public val dryRun: kotlin.Boolean? = builder.dryRun
    /**
     * The ID of the pool that you want to deprovision the CIDR from.
     */
    public val poolId: kotlin.String? = builder.poolId

    public companion object {
        public operator fun invoke(block: Builder.() -> kotlin.Unit): aws.sdk.kotlin.services.ec2.model.DeprovisionPublicIpv4PoolCidrRequest = Builder().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("DeprovisionPublicIpv4PoolCidrRequest(")
        append("cidr=$cidr,")
        append("dryRun=$dryRun,")
        append("poolId=$poolId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = cidr?.hashCode() ?: 0
        result = 31 * result + (dryRun?.hashCode() ?: 0)
        result = 31 * result + (poolId?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as DeprovisionPublicIpv4PoolCidrRequest

        if (cidr != other.cidr) return false
        if (dryRun != other.dryRun) return false
        if (poolId != other.poolId) return false

        return true
    }

    public inline fun copy(block: Builder.() -> kotlin.Unit = {}): aws.sdk.kotlin.services.ec2.model.DeprovisionPublicIpv4PoolCidrRequest = Builder(this).apply(block).build()

    public class Builder {
        /**
         * The CIDR you want to deprovision from the pool.
         */
        public var cidr: kotlin.String? = null
        /**
         * A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is `DryRunOperation`. Otherwise, it is `UnauthorizedOperation`.
         */
        public var dryRun: kotlin.Boolean? = null
        /**
         * The ID of the pool that you want to deprovision the CIDR from.
         */
        public var poolId: kotlin.String? = null

        @PublishedApi
        internal constructor()
        @PublishedApi
        internal constructor(x: aws.sdk.kotlin.services.ec2.model.DeprovisionPublicIpv4PoolCidrRequest) : this() {
            this.cidr = x.cidr
            this.dryRun = x.dryRun
            this.poolId = x.poolId
        }

        @PublishedApi
        internal fun build(): aws.sdk.kotlin.services.ec2.model.DeprovisionPublicIpv4PoolCidrRequest = DeprovisionPublicIpv4PoolCidrRequest(this)
    }
}
