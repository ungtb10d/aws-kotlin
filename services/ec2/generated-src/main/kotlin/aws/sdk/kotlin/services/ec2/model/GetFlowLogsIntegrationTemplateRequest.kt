// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



public class GetFlowLogsIntegrationTemplateRequest private constructor(builder: Builder) {
    /**
     * To store the CloudFormation template in Amazon S3, specify the location in Amazon S3.
     */
    public val configDeliveryS3DestinationArn: kotlin.String? = builder.configDeliveryS3DestinationArn
    /**
     * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is `DryRunOperation`. Otherwise, it is `UnauthorizedOperation`.
     */
    public val dryRun: kotlin.Boolean? = builder.dryRun
    /**
     * The ID of the flow log.
     */
    public val flowLogId: kotlin.String? = builder.flowLogId
    /**
     * Information about the service integration.
     */
    public val integrateServices: aws.sdk.kotlin.services.ec2.model.IntegrateServices? = builder.integrateServices

    public companion object {
        public operator fun invoke(block: Builder.() -> kotlin.Unit): aws.sdk.kotlin.services.ec2.model.GetFlowLogsIntegrationTemplateRequest = Builder().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("GetFlowLogsIntegrationTemplateRequest(")
        append("configDeliveryS3DestinationArn=$configDeliveryS3DestinationArn,")
        append("dryRun=$dryRun,")
        append("flowLogId=$flowLogId,")
        append("integrateServices=$integrateServices)")
    }

    override fun hashCode(): kotlin.Int {
        var result = configDeliveryS3DestinationArn?.hashCode() ?: 0
        result = 31 * result + (dryRun?.hashCode() ?: 0)
        result = 31 * result + (flowLogId?.hashCode() ?: 0)
        result = 31 * result + (integrateServices?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as GetFlowLogsIntegrationTemplateRequest

        if (configDeliveryS3DestinationArn != other.configDeliveryS3DestinationArn) return false
        if (dryRun != other.dryRun) return false
        if (flowLogId != other.flowLogId) return false
        if (integrateServices != other.integrateServices) return false

        return true
    }

    public inline fun copy(block: Builder.() -> kotlin.Unit = {}): aws.sdk.kotlin.services.ec2.model.GetFlowLogsIntegrationTemplateRequest = Builder(this).apply(block).build()

    public class Builder {
        /**
         * To store the CloudFormation template in Amazon S3, specify the location in Amazon S3.
         */
        public var configDeliveryS3DestinationArn: kotlin.String? = null
        /**
         * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is `DryRunOperation`. Otherwise, it is `UnauthorizedOperation`.
         */
        public var dryRun: kotlin.Boolean? = null
        /**
         * The ID of the flow log.
         */
        public var flowLogId: kotlin.String? = null
        /**
         * Information about the service integration.
         */
        public var integrateServices: aws.sdk.kotlin.services.ec2.model.IntegrateServices? = null

        @PublishedApi
        internal constructor()
        @PublishedApi
        internal constructor(x: aws.sdk.kotlin.services.ec2.model.GetFlowLogsIntegrationTemplateRequest) : this() {
            this.configDeliveryS3DestinationArn = x.configDeliveryS3DestinationArn
            this.dryRun = x.dryRun
            this.flowLogId = x.flowLogId
            this.integrateServices = x.integrateServices
        }

        @PublishedApi
        internal fun build(): aws.sdk.kotlin.services.ec2.model.GetFlowLogsIntegrationTemplateRequest = GetFlowLogsIntegrationTemplateRequest(this)

        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.IntegrateServices] inside the given [block]
         */
        public fun integrateServices(block: aws.sdk.kotlin.services.ec2.model.IntegrateServices.Builder.() -> kotlin.Unit) {
            this.integrateServices = aws.sdk.kotlin.services.ec2.model.IntegrateServices.invoke(block)
        }
    }
}
