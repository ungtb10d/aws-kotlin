// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.transform

import aws.sdk.kotlin.services.ec2.model.Ipam
import aws.sdk.kotlin.services.ec2.model.IpamOperatingRegion
import aws.sdk.kotlin.services.ec2.model.IpamState
import aws.sdk.kotlin.services.ec2.model.Tag
import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.serde.xml.XmlCollectionName
import aws.smithy.kotlin.runtime.serde.xml.XmlDeserializer
import aws.smithy.kotlin.runtime.serde.xml.XmlNamespace
import aws.smithy.kotlin.runtime.serde.xml.XmlSerialName

internal fun deserializeIpamDocument(deserializer: Deserializer): Ipam {
    val builder = Ipam.Builder()
    val DESCRIPTION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("description"))
    val IPAMARN_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("ipamArn"))
    val IPAMID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("ipamId"))
    val IPAMREGION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("ipamRegion"))
    val OPERATINGREGIONS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("operatingRegionSet"), XmlCollectionName("item"))
    val OWNERID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("ownerId"))
    val PRIVATEDEFAULTSCOPEID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("privateDefaultScopeId"))
    val PUBLICDEFAULTSCOPEID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("publicDefaultScopeId"))
    val SCOPECOUNT_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, XmlSerialName("scopeCount"))
    val STATE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Enum, XmlSerialName("state"))
    val TAGS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("tagSet"), XmlCollectionName("item"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(XmlSerialName("Ipam"))
        trait(XmlNamespace("http://ec2.amazonaws.com/doc/2016-11-15"))
        field(DESCRIPTION_DESCRIPTOR)
        field(IPAMARN_DESCRIPTOR)
        field(IPAMID_DESCRIPTOR)
        field(IPAMREGION_DESCRIPTOR)
        field(OPERATINGREGIONS_DESCRIPTOR)
        field(OWNERID_DESCRIPTOR)
        field(PRIVATEDEFAULTSCOPEID_DESCRIPTOR)
        field(PUBLICDEFAULTSCOPEID_DESCRIPTOR)
        field(SCOPECOUNT_DESCRIPTOR)
        field(STATE_DESCRIPTOR)
        field(TAGS_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                DESCRIPTION_DESCRIPTOR.index -> builder.description = deserializeString()
                IPAMARN_DESCRIPTOR.index -> builder.ipamArn = deserializeString()
                IPAMID_DESCRIPTOR.index -> builder.ipamId = deserializeString()
                IPAMREGION_DESCRIPTOR.index -> builder.ipamRegion = deserializeString()
                OPERATINGREGIONS_DESCRIPTOR.index -> builder.operatingRegions =
                    deserializer.deserializeList(OPERATINGREGIONS_DESCRIPTOR) {
                        val col0 = mutableListOf<IpamOperatingRegion>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeIpamOperatingRegionDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                OWNERID_DESCRIPTOR.index -> builder.ownerId = deserializeString()
                PRIVATEDEFAULTSCOPEID_DESCRIPTOR.index -> builder.privateDefaultScopeId = deserializeString()
                PUBLICDEFAULTSCOPEID_DESCRIPTOR.index -> builder.publicDefaultScopeId = deserializeString()
                SCOPECOUNT_DESCRIPTOR.index -> builder.scopeCount = deserializeInt()
                STATE_DESCRIPTOR.index -> builder.state = deserializeString().let { IpamState.fromValue(it) }
                TAGS_DESCRIPTOR.index -> builder.tags =
                    deserializer.deserializeList(TAGS_DESCRIPTOR) {
                        val col0 = mutableListOf<Tag>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeTagDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                null -> break@loop
                else -> skipValue()
            }
        }
    }
    return builder.build()
}
