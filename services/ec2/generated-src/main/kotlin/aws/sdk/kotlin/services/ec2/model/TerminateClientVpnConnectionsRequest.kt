// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



public class TerminateClientVpnConnectionsRequest private constructor(builder: Builder) {
    /**
     * The ID of the Client VPN endpoint to which the client is connected.
     */
    public val clientVpnEndpointId: kotlin.String? = builder.clientVpnEndpointId
    /**
     * The ID of the client connection to be terminated.
     */
    public val connectionId: kotlin.String? = builder.connectionId
    /**
     * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is `DryRunOperation`. Otherwise, it is `UnauthorizedOperation`.
     */
    public val dryRun: kotlin.Boolean? = builder.dryRun
    /**
     * The name of the user who initiated the connection. Use this option to terminate all active connections for the specified user. This option can only be used if the user has established up to five connections.
     */
    public val username: kotlin.String? = builder.username

    public companion object {
        public operator fun invoke(block: Builder.() -> kotlin.Unit): aws.sdk.kotlin.services.ec2.model.TerminateClientVpnConnectionsRequest = Builder().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("TerminateClientVpnConnectionsRequest(")
        append("clientVpnEndpointId=$clientVpnEndpointId,")
        append("connectionId=$connectionId,")
        append("dryRun=$dryRun,")
        append("username=$username)")
    }

    override fun hashCode(): kotlin.Int {
        var result = clientVpnEndpointId?.hashCode() ?: 0
        result = 31 * result + (connectionId?.hashCode() ?: 0)
        result = 31 * result + (dryRun?.hashCode() ?: 0)
        result = 31 * result + (username?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as TerminateClientVpnConnectionsRequest

        if (clientVpnEndpointId != other.clientVpnEndpointId) return false
        if (connectionId != other.connectionId) return false
        if (dryRun != other.dryRun) return false
        if (username != other.username) return false

        return true
    }

    public inline fun copy(block: Builder.() -> kotlin.Unit = {}): aws.sdk.kotlin.services.ec2.model.TerminateClientVpnConnectionsRequest = Builder(this).apply(block).build()

    public class Builder {
        /**
         * The ID of the Client VPN endpoint to which the client is connected.
         */
        public var clientVpnEndpointId: kotlin.String? = null
        /**
         * The ID of the client connection to be terminated.
         */
        public var connectionId: kotlin.String? = null
        /**
         * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is `DryRunOperation`. Otherwise, it is `UnauthorizedOperation`.
         */
        public var dryRun: kotlin.Boolean? = null
        /**
         * The name of the user who initiated the connection. Use this option to terminate all active connections for the specified user. This option can only be used if the user has established up to five connections.
         */
        public var username: kotlin.String? = null

        @PublishedApi
        internal constructor()
        @PublishedApi
        internal constructor(x: aws.sdk.kotlin.services.ec2.model.TerminateClientVpnConnectionsRequest) : this() {
            this.clientVpnEndpointId = x.clientVpnEndpointId
            this.connectionId = x.connectionId
            this.dryRun = x.dryRun
            this.username = x.username
        }

        @PublishedApi
        internal fun build(): aws.sdk.kotlin.services.ec2.model.TerminateClientVpnConnectionsRequest = TerminateClientVpnConnectionsRequest(this)
    }
}
