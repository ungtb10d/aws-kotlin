// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.transform

import aws.sdk.kotlin.services.ec2.model.MembershipType
import aws.sdk.kotlin.services.ec2.model.TransitGatewayAttachmentResourceType
import aws.sdk.kotlin.services.ec2.model.TransitGatewayMulticastGroup
import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.serde.xml.XmlDeserializer
import aws.smithy.kotlin.runtime.serde.xml.XmlNamespace
import aws.smithy.kotlin.runtime.serde.xml.XmlSerialName

internal fun deserializeTransitGatewayMulticastGroupDocument(deserializer: Deserializer): TransitGatewayMulticastGroup {
    val builder = TransitGatewayMulticastGroup.Builder()
    val GROUPIPADDRESS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("groupIpAddress"))
    val GROUPMEMBER_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Boolean, XmlSerialName("groupMember"))
    val GROUPSOURCE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Boolean, XmlSerialName("groupSource"))
    val MEMBERTYPE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Enum, XmlSerialName("memberType"))
    val NETWORKINTERFACEID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("networkInterfaceId"))
    val RESOURCEID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("resourceId"))
    val RESOURCEOWNERID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("resourceOwnerId"))
    val RESOURCETYPE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Enum, XmlSerialName("resourceType"))
    val SOURCETYPE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Enum, XmlSerialName("sourceType"))
    val SUBNETID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("subnetId"))
    val TRANSITGATEWAYATTACHMENTID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("transitGatewayAttachmentId"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(XmlSerialName("TransitGatewayMulticastGroup"))
        trait(XmlNamespace("http://ec2.amazonaws.com/doc/2016-11-15"))
        field(GROUPIPADDRESS_DESCRIPTOR)
        field(GROUPMEMBER_DESCRIPTOR)
        field(GROUPSOURCE_DESCRIPTOR)
        field(MEMBERTYPE_DESCRIPTOR)
        field(NETWORKINTERFACEID_DESCRIPTOR)
        field(RESOURCEID_DESCRIPTOR)
        field(RESOURCEOWNERID_DESCRIPTOR)
        field(RESOURCETYPE_DESCRIPTOR)
        field(SOURCETYPE_DESCRIPTOR)
        field(SUBNETID_DESCRIPTOR)
        field(TRANSITGATEWAYATTACHMENTID_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                GROUPIPADDRESS_DESCRIPTOR.index -> builder.groupIpAddress = deserializeString()
                GROUPMEMBER_DESCRIPTOR.index -> builder.groupMember = deserializeBoolean()
                GROUPSOURCE_DESCRIPTOR.index -> builder.groupSource = deserializeBoolean()
                MEMBERTYPE_DESCRIPTOR.index -> builder.memberType = deserializeString().let { MembershipType.fromValue(it) }
                NETWORKINTERFACEID_DESCRIPTOR.index -> builder.networkInterfaceId = deserializeString()
                RESOURCEID_DESCRIPTOR.index -> builder.resourceId = deserializeString()
                RESOURCEOWNERID_DESCRIPTOR.index -> builder.resourceOwnerId = deserializeString()
                RESOURCETYPE_DESCRIPTOR.index -> builder.resourceType = deserializeString().let { TransitGatewayAttachmentResourceType.fromValue(it) }
                SOURCETYPE_DESCRIPTOR.index -> builder.sourceType = deserializeString().let { MembershipType.fromValue(it) }
                SUBNETID_DESCRIPTOR.index -> builder.subnetId = deserializeString()
                TRANSITGATEWAYATTACHMENTID_DESCRIPTOR.index -> builder.transitGatewayAttachmentId = deserializeString()
                null -> break@loop
                else -> skipValue()
            }
        }
    }
    return builder.build()
}
