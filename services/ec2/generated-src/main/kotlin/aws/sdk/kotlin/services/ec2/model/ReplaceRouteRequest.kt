// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



public class ReplaceRouteRequest private constructor(builder: Builder) {
    /**
     * &#91;IPv4 traffic only&#93; The ID of a carrier gateway.
     */
    public val carrierGatewayId: kotlin.String? = builder.carrierGatewayId
    /**
     * The Amazon Resource Name (ARN) of the core network.
     */
    public val coreNetworkArn: kotlin.String? = builder.coreNetworkArn
    /**
     * The IPv4 CIDR address block used for the destination match. The value that you provide must match the CIDR of an existing route in the table.
     */
    public val destinationCidrBlock: kotlin.String? = builder.destinationCidrBlock
    /**
     * The IPv6 CIDR address block used for the destination match. The value that you provide must match the CIDR of an existing route in the table.
     */
    public val destinationIpv6CidrBlock: kotlin.String? = builder.destinationIpv6CidrBlock
    /**
     * The ID of the prefix list for the route.
     */
    public val destinationPrefixListId: kotlin.String? = builder.destinationPrefixListId
    /**
     * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is `DryRunOperation`. Otherwise, it is `UnauthorizedOperation`.
     */
    public val dryRun: kotlin.Boolean? = builder.dryRun
    /**
     * &#91;IPv6 traffic only&#93; The ID of an egress-only internet gateway.
     */
    public val egressOnlyInternetGatewayId: kotlin.String? = builder.egressOnlyInternetGatewayId
    /**
     * The ID of an internet gateway or virtual private gateway.
     */
    public val gatewayId: kotlin.String? = builder.gatewayId
    /**
     * The ID of a NAT instance in your VPC.
     */
    public val instanceId: kotlin.String? = builder.instanceId
    /**
     * The ID of the local gateway.
     */
    public val localGatewayId: kotlin.String? = builder.localGatewayId
    /**
     * Specifies whether to reset the local route to its default target (`local`).
     */
    public val localTarget: kotlin.Boolean? = builder.localTarget
    /**
     * &#91;IPv4 traffic only&#93; The ID of a NAT gateway.
     */
    public val natGatewayId: kotlin.String? = builder.natGatewayId
    /**
     * The ID of a network interface.
     */
    public val networkInterfaceId: kotlin.String? = builder.networkInterfaceId
    /**
     * The ID of the route table.
     */
    public val routeTableId: kotlin.String? = builder.routeTableId
    /**
     * The ID of a transit gateway.
     */
    public val transitGatewayId: kotlin.String? = builder.transitGatewayId
    /**
     * The ID of a VPC endpoint. Supported for Gateway Load Balancer endpoints only.
     */
    public val vpcEndpointId: kotlin.String? = builder.vpcEndpointId
    /**
     * The ID of a VPC peering connection.
     */
    public val vpcPeeringConnectionId: kotlin.String? = builder.vpcPeeringConnectionId

    public companion object {
        public operator fun invoke(block: Builder.() -> kotlin.Unit): aws.sdk.kotlin.services.ec2.model.ReplaceRouteRequest = Builder().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("ReplaceRouteRequest(")
        append("carrierGatewayId=$carrierGatewayId,")
        append("coreNetworkArn=$coreNetworkArn,")
        append("destinationCidrBlock=$destinationCidrBlock,")
        append("destinationIpv6CidrBlock=$destinationIpv6CidrBlock,")
        append("destinationPrefixListId=$destinationPrefixListId,")
        append("dryRun=$dryRun,")
        append("egressOnlyInternetGatewayId=$egressOnlyInternetGatewayId,")
        append("gatewayId=$gatewayId,")
        append("instanceId=$instanceId,")
        append("localGatewayId=$localGatewayId,")
        append("localTarget=$localTarget,")
        append("natGatewayId=$natGatewayId,")
        append("networkInterfaceId=$networkInterfaceId,")
        append("routeTableId=$routeTableId,")
        append("transitGatewayId=$transitGatewayId,")
        append("vpcEndpointId=$vpcEndpointId,")
        append("vpcPeeringConnectionId=$vpcPeeringConnectionId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = carrierGatewayId?.hashCode() ?: 0
        result = 31 * result + (coreNetworkArn?.hashCode() ?: 0)
        result = 31 * result + (destinationCidrBlock?.hashCode() ?: 0)
        result = 31 * result + (destinationIpv6CidrBlock?.hashCode() ?: 0)
        result = 31 * result + (destinationPrefixListId?.hashCode() ?: 0)
        result = 31 * result + (dryRun?.hashCode() ?: 0)
        result = 31 * result + (egressOnlyInternetGatewayId?.hashCode() ?: 0)
        result = 31 * result + (gatewayId?.hashCode() ?: 0)
        result = 31 * result + (instanceId?.hashCode() ?: 0)
        result = 31 * result + (localGatewayId?.hashCode() ?: 0)
        result = 31 * result + (localTarget?.hashCode() ?: 0)
        result = 31 * result + (natGatewayId?.hashCode() ?: 0)
        result = 31 * result + (networkInterfaceId?.hashCode() ?: 0)
        result = 31 * result + (routeTableId?.hashCode() ?: 0)
        result = 31 * result + (transitGatewayId?.hashCode() ?: 0)
        result = 31 * result + (vpcEndpointId?.hashCode() ?: 0)
        result = 31 * result + (vpcPeeringConnectionId?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as ReplaceRouteRequest

        if (carrierGatewayId != other.carrierGatewayId) return false
        if (coreNetworkArn != other.coreNetworkArn) return false
        if (destinationCidrBlock != other.destinationCidrBlock) return false
        if (destinationIpv6CidrBlock != other.destinationIpv6CidrBlock) return false
        if (destinationPrefixListId != other.destinationPrefixListId) return false
        if (dryRun != other.dryRun) return false
        if (egressOnlyInternetGatewayId != other.egressOnlyInternetGatewayId) return false
        if (gatewayId != other.gatewayId) return false
        if (instanceId != other.instanceId) return false
        if (localGatewayId != other.localGatewayId) return false
        if (localTarget != other.localTarget) return false
        if (natGatewayId != other.natGatewayId) return false
        if (networkInterfaceId != other.networkInterfaceId) return false
        if (routeTableId != other.routeTableId) return false
        if (transitGatewayId != other.transitGatewayId) return false
        if (vpcEndpointId != other.vpcEndpointId) return false
        if (vpcPeeringConnectionId != other.vpcPeeringConnectionId) return false

        return true
    }

    public inline fun copy(block: Builder.() -> kotlin.Unit = {}): aws.sdk.kotlin.services.ec2.model.ReplaceRouteRequest = Builder(this).apply(block).build()

    public class Builder {
        /**
         * &#91;IPv4 traffic only&#93; The ID of a carrier gateway.
         */
        public var carrierGatewayId: kotlin.String? = null
        /**
         * The Amazon Resource Name (ARN) of the core network.
         */
        public var coreNetworkArn: kotlin.String? = null
        /**
         * The IPv4 CIDR address block used for the destination match. The value that you provide must match the CIDR of an existing route in the table.
         */
        public var destinationCidrBlock: kotlin.String? = null
        /**
         * The IPv6 CIDR address block used for the destination match. The value that you provide must match the CIDR of an existing route in the table.
         */
        public var destinationIpv6CidrBlock: kotlin.String? = null
        /**
         * The ID of the prefix list for the route.
         */
        public var destinationPrefixListId: kotlin.String? = null
        /**
         * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is `DryRunOperation`. Otherwise, it is `UnauthorizedOperation`.
         */
        public var dryRun: kotlin.Boolean? = null
        /**
         * &#91;IPv6 traffic only&#93; The ID of an egress-only internet gateway.
         */
        public var egressOnlyInternetGatewayId: kotlin.String? = null
        /**
         * The ID of an internet gateway or virtual private gateway.
         */
        public var gatewayId: kotlin.String? = null
        /**
         * The ID of a NAT instance in your VPC.
         */
        public var instanceId: kotlin.String? = null
        /**
         * The ID of the local gateway.
         */
        public var localGatewayId: kotlin.String? = null
        /**
         * Specifies whether to reset the local route to its default target (`local`).
         */
        public var localTarget: kotlin.Boolean? = null
        /**
         * &#91;IPv4 traffic only&#93; The ID of a NAT gateway.
         */
        public var natGatewayId: kotlin.String? = null
        /**
         * The ID of a network interface.
         */
        public var networkInterfaceId: kotlin.String? = null
        /**
         * The ID of the route table.
         */
        public var routeTableId: kotlin.String? = null
        /**
         * The ID of a transit gateway.
         */
        public var transitGatewayId: kotlin.String? = null
        /**
         * The ID of a VPC endpoint. Supported for Gateway Load Balancer endpoints only.
         */
        public var vpcEndpointId: kotlin.String? = null
        /**
         * The ID of a VPC peering connection.
         */
        public var vpcPeeringConnectionId: kotlin.String? = null

        @PublishedApi
        internal constructor()
        @PublishedApi
        internal constructor(x: aws.sdk.kotlin.services.ec2.model.ReplaceRouteRequest) : this() {
            this.carrierGatewayId = x.carrierGatewayId
            this.coreNetworkArn = x.coreNetworkArn
            this.destinationCidrBlock = x.destinationCidrBlock
            this.destinationIpv6CidrBlock = x.destinationIpv6CidrBlock
            this.destinationPrefixListId = x.destinationPrefixListId
            this.dryRun = x.dryRun
            this.egressOnlyInternetGatewayId = x.egressOnlyInternetGatewayId
            this.gatewayId = x.gatewayId
            this.instanceId = x.instanceId
            this.localGatewayId = x.localGatewayId
            this.localTarget = x.localTarget
            this.natGatewayId = x.natGatewayId
            this.networkInterfaceId = x.networkInterfaceId
            this.routeTableId = x.routeTableId
            this.transitGatewayId = x.transitGatewayId
            this.vpcEndpointId = x.vpcEndpointId
            this.vpcPeeringConnectionId = x.vpcPeeringConnectionId
        }

        @PublishedApi
        internal fun build(): aws.sdk.kotlin.services.ec2.model.ReplaceRouteRequest = ReplaceRouteRequest(this)
    }
}
