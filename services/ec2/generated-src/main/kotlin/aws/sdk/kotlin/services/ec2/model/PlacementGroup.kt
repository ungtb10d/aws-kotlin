// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes a placement group.
 */
public class PlacementGroup private constructor(builder: Builder) {
    /**
     * The Amazon Resource Name (ARN) of the placement group.
     */
    public val groupArn: kotlin.String? = builder.groupArn
    /**
     * The ID of the placement group.
     */
    public val groupId: kotlin.String? = builder.groupId
    /**
     * The name of the placement group.
     */
    public val groupName: kotlin.String? = builder.groupName
    /**
     * The number of partitions. Valid only if **strategy** is set to `partition`.
     */
    public val partitionCount: kotlin.Int? = builder.partitionCount
    /**
     * The spread level for the placement group. *Only* Outpost placement groups can be spread across hosts.
     */
    public val spreadLevel: aws.sdk.kotlin.services.ec2.model.SpreadLevel? = builder.spreadLevel
    /**
     * The state of the placement group.
     */
    public val state: aws.sdk.kotlin.services.ec2.model.PlacementGroupState? = builder.state
    /**
     * The placement strategy.
     */
    public val strategy: aws.sdk.kotlin.services.ec2.model.PlacementStrategy? = builder.strategy
    /**
     * Any tags applied to the placement group.
     */
    public val tags: List<Tag>? = builder.tags

    public companion object {
        public operator fun invoke(block: Builder.() -> kotlin.Unit): aws.sdk.kotlin.services.ec2.model.PlacementGroup = Builder().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("PlacementGroup(")
        append("groupArn=$groupArn,")
        append("groupId=$groupId,")
        append("groupName=$groupName,")
        append("partitionCount=$partitionCount,")
        append("spreadLevel=$spreadLevel,")
        append("state=$state,")
        append("strategy=$strategy,")
        append("tags=$tags)")
    }

    override fun hashCode(): kotlin.Int {
        var result = groupArn?.hashCode() ?: 0
        result = 31 * result + (groupId?.hashCode() ?: 0)
        result = 31 * result + (groupName?.hashCode() ?: 0)
        result = 31 * result + (partitionCount ?: 0)
        result = 31 * result + (spreadLevel?.hashCode() ?: 0)
        result = 31 * result + (state?.hashCode() ?: 0)
        result = 31 * result + (strategy?.hashCode() ?: 0)
        result = 31 * result + (tags?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as PlacementGroup

        if (groupArn != other.groupArn) return false
        if (groupId != other.groupId) return false
        if (groupName != other.groupName) return false
        if (partitionCount != other.partitionCount) return false
        if (spreadLevel != other.spreadLevel) return false
        if (state != other.state) return false
        if (strategy != other.strategy) return false
        if (tags != other.tags) return false

        return true
    }

    public inline fun copy(block: Builder.() -> kotlin.Unit = {}): aws.sdk.kotlin.services.ec2.model.PlacementGroup = Builder(this).apply(block).build()

    public class Builder {
        /**
         * The Amazon Resource Name (ARN) of the placement group.
         */
        public var groupArn: kotlin.String? = null
        /**
         * The ID of the placement group.
         */
        public var groupId: kotlin.String? = null
        /**
         * The name of the placement group.
         */
        public var groupName: kotlin.String? = null
        /**
         * The number of partitions. Valid only if **strategy** is set to `partition`.
         */
        public var partitionCount: kotlin.Int? = null
        /**
         * The spread level for the placement group. *Only* Outpost placement groups can be spread across hosts.
         */
        public var spreadLevel: aws.sdk.kotlin.services.ec2.model.SpreadLevel? = null
        /**
         * The state of the placement group.
         */
        public var state: aws.sdk.kotlin.services.ec2.model.PlacementGroupState? = null
        /**
         * The placement strategy.
         */
        public var strategy: aws.sdk.kotlin.services.ec2.model.PlacementStrategy? = null
        /**
         * Any tags applied to the placement group.
         */
        public var tags: List<Tag>? = null

        @PublishedApi
        internal constructor()
        @PublishedApi
        internal constructor(x: aws.sdk.kotlin.services.ec2.model.PlacementGroup) : this() {
            this.groupArn = x.groupArn
            this.groupId = x.groupId
            this.groupName = x.groupName
            this.partitionCount = x.partitionCount
            this.spreadLevel = x.spreadLevel
            this.state = x.state
            this.strategy = x.strategy
            this.tags = x.tags
        }

        @PublishedApi
        internal fun build(): aws.sdk.kotlin.services.ec2.model.PlacementGroup = PlacementGroup(this)
    }
}
