// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.transform

import aws.sdk.kotlin.services.ec2.model.LocalGatewayRoute
import aws.sdk.kotlin.services.ec2.model.LocalGatewayRouteState
import aws.sdk.kotlin.services.ec2.model.LocalGatewayRouteType
import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.serde.xml.XmlDeserializer
import aws.smithy.kotlin.runtime.serde.xml.XmlNamespace
import aws.smithy.kotlin.runtime.serde.xml.XmlSerialName

internal fun deserializeLocalGatewayRouteDocument(deserializer: Deserializer): LocalGatewayRoute {
    val builder = LocalGatewayRoute.Builder()
    val COIPPOOLID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("coipPoolId"))
    val DESTINATIONCIDRBLOCK_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("destinationCidrBlock"))
    val LOCALGATEWAYROUTETABLEARN_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("localGatewayRouteTableArn"))
    val LOCALGATEWAYROUTETABLEID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("localGatewayRouteTableId"))
    val LOCALGATEWAYVIRTUALINTERFACEGROUPID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("localGatewayVirtualInterfaceGroupId"))
    val NETWORKINTERFACEID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("networkInterfaceId"))
    val OWNERID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("ownerId"))
    val STATE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Enum, XmlSerialName("state"))
    val SUBNETID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("subnetId"))
    val TYPE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Enum, XmlSerialName("type"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(XmlSerialName("LocalGatewayRoute"))
        trait(XmlNamespace("http://ec2.amazonaws.com/doc/2016-11-15"))
        field(COIPPOOLID_DESCRIPTOR)
        field(DESTINATIONCIDRBLOCK_DESCRIPTOR)
        field(LOCALGATEWAYROUTETABLEARN_DESCRIPTOR)
        field(LOCALGATEWAYROUTETABLEID_DESCRIPTOR)
        field(LOCALGATEWAYVIRTUALINTERFACEGROUPID_DESCRIPTOR)
        field(NETWORKINTERFACEID_DESCRIPTOR)
        field(OWNERID_DESCRIPTOR)
        field(STATE_DESCRIPTOR)
        field(SUBNETID_DESCRIPTOR)
        field(TYPE_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                COIPPOOLID_DESCRIPTOR.index -> builder.coipPoolId = deserializeString()
                DESTINATIONCIDRBLOCK_DESCRIPTOR.index -> builder.destinationCidrBlock = deserializeString()
                LOCALGATEWAYROUTETABLEARN_DESCRIPTOR.index -> builder.localGatewayRouteTableArn = deserializeString()
                LOCALGATEWAYROUTETABLEID_DESCRIPTOR.index -> builder.localGatewayRouteTableId = deserializeString()
                LOCALGATEWAYVIRTUALINTERFACEGROUPID_DESCRIPTOR.index -> builder.localGatewayVirtualInterfaceGroupId = deserializeString()
                NETWORKINTERFACEID_DESCRIPTOR.index -> builder.networkInterfaceId = deserializeString()
                OWNERID_DESCRIPTOR.index -> builder.ownerId = deserializeString()
                STATE_DESCRIPTOR.index -> builder.state = deserializeString().let { LocalGatewayRouteState.fromValue(it) }
                SUBNETID_DESCRIPTOR.index -> builder.subnetId = deserializeString()
                TYPE_DESCRIPTOR.index -> builder.type = deserializeString().let { LocalGatewayRouteType.fromValue(it) }
                null -> break@loop
                else -> skipValue()
            }
        }
    }
    return builder.build()
}
