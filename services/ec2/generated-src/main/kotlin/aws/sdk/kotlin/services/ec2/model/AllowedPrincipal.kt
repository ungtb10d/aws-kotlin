// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes a principal.
 */
public class AllowedPrincipal private constructor(builder: Builder) {
    /**
     * The Amazon Resource Name (ARN) of the principal.
     */
    public val principal: kotlin.String? = builder.principal
    /**
     * The type of principal.
     */
    public val principalType: aws.sdk.kotlin.services.ec2.model.PrincipalType? = builder.principalType
    /**
     * The ID of the service.
     */
    public val serviceId: kotlin.String? = builder.serviceId
    /**
     * The ID of the service permission.
     */
    public val servicePermissionId: kotlin.String? = builder.servicePermissionId
    /**
     * The tags.
     */
    public val tags: List<Tag>? = builder.tags

    public companion object {
        public operator fun invoke(block: Builder.() -> kotlin.Unit): aws.sdk.kotlin.services.ec2.model.AllowedPrincipal = Builder().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("AllowedPrincipal(")
        append("principal=$principal,")
        append("principalType=$principalType,")
        append("serviceId=$serviceId,")
        append("servicePermissionId=$servicePermissionId,")
        append("tags=$tags)")
    }

    override fun hashCode(): kotlin.Int {
        var result = principal?.hashCode() ?: 0
        result = 31 * result + (principalType?.hashCode() ?: 0)
        result = 31 * result + (serviceId?.hashCode() ?: 0)
        result = 31 * result + (servicePermissionId?.hashCode() ?: 0)
        result = 31 * result + (tags?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as AllowedPrincipal

        if (principal != other.principal) return false
        if (principalType != other.principalType) return false
        if (serviceId != other.serviceId) return false
        if (servicePermissionId != other.servicePermissionId) return false
        if (tags != other.tags) return false

        return true
    }

    public inline fun copy(block: Builder.() -> kotlin.Unit = {}): aws.sdk.kotlin.services.ec2.model.AllowedPrincipal = Builder(this).apply(block).build()

    public class Builder {
        /**
         * The Amazon Resource Name (ARN) of the principal.
         */
        public var principal: kotlin.String? = null
        /**
         * The type of principal.
         */
        public var principalType: aws.sdk.kotlin.services.ec2.model.PrincipalType? = null
        /**
         * The ID of the service.
         */
        public var serviceId: kotlin.String? = null
        /**
         * The ID of the service permission.
         */
        public var servicePermissionId: kotlin.String? = null
        /**
         * The tags.
         */
        public var tags: List<Tag>? = null

        @PublishedApi
        internal constructor()
        @PublishedApi
        internal constructor(x: aws.sdk.kotlin.services.ec2.model.AllowedPrincipal) : this() {
            this.principal = x.principal
            this.principalType = x.principalType
            this.serviceId = x.serviceId
            this.servicePermissionId = x.servicePermissionId
            this.tags = x.tags
        }

        @PublishedApi
        internal fun build(): aws.sdk.kotlin.services.ec2.model.AllowedPrincipal = AllowedPrincipal(this)
    }
}
