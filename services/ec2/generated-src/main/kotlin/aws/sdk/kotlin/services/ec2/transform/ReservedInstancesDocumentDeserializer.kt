// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.transform

import aws.sdk.kotlin.services.ec2.model.CurrencyCodeValues
import aws.sdk.kotlin.services.ec2.model.InstanceType
import aws.sdk.kotlin.services.ec2.model.OfferingClassType
import aws.sdk.kotlin.services.ec2.model.OfferingTypeValues
import aws.sdk.kotlin.services.ec2.model.RecurringCharge
import aws.sdk.kotlin.services.ec2.model.ReservedInstanceState
import aws.sdk.kotlin.services.ec2.model.ReservedInstances
import aws.sdk.kotlin.services.ec2.model.RiProductDescription
import aws.sdk.kotlin.services.ec2.model.Scope
import aws.sdk.kotlin.services.ec2.model.Tag
import aws.sdk.kotlin.services.ec2.model.Tenancy
import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.serde.xml.XmlCollectionName
import aws.smithy.kotlin.runtime.serde.xml.XmlDeserializer
import aws.smithy.kotlin.runtime.serde.xml.XmlNamespace
import aws.smithy.kotlin.runtime.serde.xml.XmlSerialName
import aws.smithy.kotlin.runtime.time.Instant

internal fun deserializeReservedInstancesDocument(deserializer: Deserializer): ReservedInstances {
    val builder = ReservedInstances.Builder()
    val AVAILABILITYZONE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("availabilityZone"))
    val CURRENCYCODE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("currencyCode"))
    val DURATION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Long, XmlSerialName("duration"))
    val END_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Timestamp, XmlSerialName("end"))
    val FIXEDPRICE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Float, XmlSerialName("fixedPrice"))
    val INSTANCECOUNT_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, XmlSerialName("instanceCount"))
    val INSTANCETENANCY_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("instanceTenancy"))
    val INSTANCETYPE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("instanceType"))
    val OFFERINGCLASS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("offeringClass"))
    val OFFERINGTYPE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("offeringType"))
    val PRODUCTDESCRIPTION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("productDescription"))
    val RECURRINGCHARGES_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("recurringCharges"), XmlCollectionName("item"))
    val RESERVEDINSTANCESID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("reservedInstancesId"))
    val SCOPE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("scope"))
    val START_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Timestamp, XmlSerialName("start"))
    val STATE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("state"))
    val TAGS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("tagSet"), XmlCollectionName("item"))
    val USAGEPRICE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Float, XmlSerialName("usagePrice"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(XmlSerialName("ReservedInstances"))
        trait(XmlNamespace("http://ec2.amazonaws.com/doc/2016-11-15"))
        field(AVAILABILITYZONE_DESCRIPTOR)
        field(CURRENCYCODE_DESCRIPTOR)
        field(DURATION_DESCRIPTOR)
        field(END_DESCRIPTOR)
        field(FIXEDPRICE_DESCRIPTOR)
        field(INSTANCECOUNT_DESCRIPTOR)
        field(INSTANCETENANCY_DESCRIPTOR)
        field(INSTANCETYPE_DESCRIPTOR)
        field(OFFERINGCLASS_DESCRIPTOR)
        field(OFFERINGTYPE_DESCRIPTOR)
        field(PRODUCTDESCRIPTION_DESCRIPTOR)
        field(RECURRINGCHARGES_DESCRIPTOR)
        field(RESERVEDINSTANCESID_DESCRIPTOR)
        field(SCOPE_DESCRIPTOR)
        field(START_DESCRIPTOR)
        field(STATE_DESCRIPTOR)
        field(TAGS_DESCRIPTOR)
        field(USAGEPRICE_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                AVAILABILITYZONE_DESCRIPTOR.index -> builder.availabilityZone = deserializeString()
                CURRENCYCODE_DESCRIPTOR.index -> builder.currencyCode = deserializeString().let { CurrencyCodeValues.fromValue(it) }
                DURATION_DESCRIPTOR.index -> builder.duration = deserializeLong()
                END_DESCRIPTOR.index -> builder.end = deserializeString().let { Instant.fromIso8601(it) }
                FIXEDPRICE_DESCRIPTOR.index -> builder.fixedPrice = deserializeFloat()
                INSTANCECOUNT_DESCRIPTOR.index -> builder.instanceCount = deserializeInt()
                INSTANCETENANCY_DESCRIPTOR.index -> builder.instanceTenancy = deserializeString().let { Tenancy.fromValue(it) }
                INSTANCETYPE_DESCRIPTOR.index -> builder.instanceType = deserializeString().let { InstanceType.fromValue(it) }
                OFFERINGCLASS_DESCRIPTOR.index -> builder.offeringClass = deserializeString().let { OfferingClassType.fromValue(it) }
                OFFERINGTYPE_DESCRIPTOR.index -> builder.offeringType = deserializeString().let { OfferingTypeValues.fromValue(it) }
                PRODUCTDESCRIPTION_DESCRIPTOR.index -> builder.productDescription = deserializeString().let { RiProductDescription.fromValue(it) }
                RECURRINGCHARGES_DESCRIPTOR.index -> builder.recurringCharges =
                    deserializer.deserializeList(RECURRINGCHARGES_DESCRIPTOR) {
                        val col0 = mutableListOf<RecurringCharge>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeRecurringChargeDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                RESERVEDINSTANCESID_DESCRIPTOR.index -> builder.reservedInstancesId = deserializeString()
                SCOPE_DESCRIPTOR.index -> builder.scope = deserializeString().let { Scope.fromValue(it) }
                START_DESCRIPTOR.index -> builder.start = deserializeString().let { Instant.fromIso8601(it) }
                STATE_DESCRIPTOR.index -> builder.state = deserializeString().let { ReservedInstanceState.fromValue(it) }
                TAGS_DESCRIPTOR.index -> builder.tags =
                    deserializer.deserializeList(TAGS_DESCRIPTOR) {
                        val col0 = mutableListOf<Tag>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeTagDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                USAGEPRICE_DESCRIPTOR.index -> builder.usagePrice = deserializeFloat()
                null -> break@loop
                else -> skipValue()
            }
        }
    }
    return builder.build()
}
