// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.transform

import aws.sdk.kotlin.services.ec2.model.CurrencyCodeValues
import aws.sdk.kotlin.services.ec2.model.HostReservation
import aws.sdk.kotlin.services.ec2.model.PaymentOption
import aws.sdk.kotlin.services.ec2.model.ReservationState
import aws.sdk.kotlin.services.ec2.model.Tag
import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.serde.xml.XmlCollectionName
import aws.smithy.kotlin.runtime.serde.xml.XmlDeserializer
import aws.smithy.kotlin.runtime.serde.xml.XmlNamespace
import aws.smithy.kotlin.runtime.serde.xml.XmlSerialName
import aws.smithy.kotlin.runtime.time.Instant

internal fun deserializeHostReservationDocument(deserializer: Deserializer): HostReservation {
    val builder = HostReservation.Builder()
    val COUNT_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, XmlSerialName("count"))
    val CURRENCYCODE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("currencyCode"))
    val DURATION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, XmlSerialName("duration"))
    val END_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Timestamp, XmlSerialName("end"))
    val HOSTIDSET_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("hostIdSet"), XmlCollectionName("item"))
    val HOSTRESERVATIONID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("hostReservationId"))
    val HOURLYPRICE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("hourlyPrice"))
    val INSTANCEFAMILY_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("instanceFamily"))
    val OFFERINGID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("offeringId"))
    val PAYMENTOPTION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("paymentOption"))
    val START_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Timestamp, XmlSerialName("start"))
    val STATE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("state"))
    val TAGS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("tagSet"), XmlCollectionName("item"))
    val UPFRONTPRICE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("upfrontPrice"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(XmlSerialName("HostReservation"))
        trait(XmlNamespace("http://ec2.amazonaws.com/doc/2016-11-15"))
        field(COUNT_DESCRIPTOR)
        field(CURRENCYCODE_DESCRIPTOR)
        field(DURATION_DESCRIPTOR)
        field(END_DESCRIPTOR)
        field(HOSTIDSET_DESCRIPTOR)
        field(HOSTRESERVATIONID_DESCRIPTOR)
        field(HOURLYPRICE_DESCRIPTOR)
        field(INSTANCEFAMILY_DESCRIPTOR)
        field(OFFERINGID_DESCRIPTOR)
        field(PAYMENTOPTION_DESCRIPTOR)
        field(START_DESCRIPTOR)
        field(STATE_DESCRIPTOR)
        field(TAGS_DESCRIPTOR)
        field(UPFRONTPRICE_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                COUNT_DESCRIPTOR.index -> builder.count = deserializeInt()
                CURRENCYCODE_DESCRIPTOR.index -> builder.currencyCode = deserializeString().let { CurrencyCodeValues.fromValue(it) }
                DURATION_DESCRIPTOR.index -> builder.duration = deserializeInt()
                END_DESCRIPTOR.index -> builder.end = deserializeString().let { Instant.fromIso8601(it) }
                HOSTIDSET_DESCRIPTOR.index -> builder.hostIdSet =
                    deserializer.deserializeList(HOSTIDSET_DESCRIPTOR) {
                        val col0 = mutableListOf<String>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeString() } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                HOSTRESERVATIONID_DESCRIPTOR.index -> builder.hostReservationId = deserializeString()
                HOURLYPRICE_DESCRIPTOR.index -> builder.hourlyPrice = deserializeString()
                INSTANCEFAMILY_DESCRIPTOR.index -> builder.instanceFamily = deserializeString()
                OFFERINGID_DESCRIPTOR.index -> builder.offeringId = deserializeString()
                PAYMENTOPTION_DESCRIPTOR.index -> builder.paymentOption = deserializeString().let { PaymentOption.fromValue(it) }
                START_DESCRIPTOR.index -> builder.start = deserializeString().let { Instant.fromIso8601(it) }
                STATE_DESCRIPTOR.index -> builder.state = deserializeString().let { ReservationState.fromValue(it) }
                TAGS_DESCRIPTOR.index -> builder.tags =
                    deserializer.deserializeList(TAGS_DESCRIPTOR) {
                        val col0 = mutableListOf<Tag>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeTagDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                UPFRONTPRICE_DESCRIPTOR.index -> builder.upfrontPrice = deserializeString()
                null -> break@loop
                else -> skipValue()
            }
        }
    }
    return builder.build()
}
