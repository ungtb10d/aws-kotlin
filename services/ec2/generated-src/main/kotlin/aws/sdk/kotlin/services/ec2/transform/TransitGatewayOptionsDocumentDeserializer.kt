// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.transform

import aws.sdk.kotlin.services.ec2.model.AutoAcceptSharedAttachmentsValue
import aws.sdk.kotlin.services.ec2.model.DefaultRouteTableAssociationValue
import aws.sdk.kotlin.services.ec2.model.DefaultRouteTablePropagationValue
import aws.sdk.kotlin.services.ec2.model.DnsSupportValue
import aws.sdk.kotlin.services.ec2.model.MulticastSupportValue
import aws.sdk.kotlin.services.ec2.model.TransitGatewayOptions
import aws.sdk.kotlin.services.ec2.model.VpnEcmpSupportValue
import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.serde.xml.XmlCollectionName
import aws.smithy.kotlin.runtime.serde.xml.XmlDeserializer
import aws.smithy.kotlin.runtime.serde.xml.XmlNamespace
import aws.smithy.kotlin.runtime.serde.xml.XmlSerialName

internal fun deserializeTransitGatewayOptionsDocument(deserializer: Deserializer): TransitGatewayOptions {
    val builder = TransitGatewayOptions.Builder()
    val AMAZONSIDEASN_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Long, XmlSerialName("amazonSideAsn"))
    val ASSOCIATIONDEFAULTROUTETABLEID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("associationDefaultRouteTableId"))
    val AUTOACCEPTSHAREDATTACHMENTS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("autoAcceptSharedAttachments"))
    val DEFAULTROUTETABLEASSOCIATION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("defaultRouteTableAssociation"))
    val DEFAULTROUTETABLEPROPAGATION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("defaultRouteTablePropagation"))
    val DNSSUPPORT_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("dnsSupport"))
    val MULTICASTSUPPORT_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("multicastSupport"))
    val PROPAGATIONDEFAULTROUTETABLEID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("propagationDefaultRouteTableId"))
    val TRANSITGATEWAYCIDRBLOCKS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("transitGatewayCidrBlocks"), XmlCollectionName("item"))
    val VPNECMPSUPPORT_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("vpnEcmpSupport"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(XmlSerialName("TransitGatewayOptions"))
        trait(XmlNamespace("http://ec2.amazonaws.com/doc/2016-11-15"))
        field(AMAZONSIDEASN_DESCRIPTOR)
        field(ASSOCIATIONDEFAULTROUTETABLEID_DESCRIPTOR)
        field(AUTOACCEPTSHAREDATTACHMENTS_DESCRIPTOR)
        field(DEFAULTROUTETABLEASSOCIATION_DESCRIPTOR)
        field(DEFAULTROUTETABLEPROPAGATION_DESCRIPTOR)
        field(DNSSUPPORT_DESCRIPTOR)
        field(MULTICASTSUPPORT_DESCRIPTOR)
        field(PROPAGATIONDEFAULTROUTETABLEID_DESCRIPTOR)
        field(TRANSITGATEWAYCIDRBLOCKS_DESCRIPTOR)
        field(VPNECMPSUPPORT_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                AMAZONSIDEASN_DESCRIPTOR.index -> builder.amazonSideAsn = deserializeLong()
                ASSOCIATIONDEFAULTROUTETABLEID_DESCRIPTOR.index -> builder.associationDefaultRouteTableId = deserializeString()
                AUTOACCEPTSHAREDATTACHMENTS_DESCRIPTOR.index -> builder.autoAcceptSharedAttachments = deserializeString().let { AutoAcceptSharedAttachmentsValue.fromValue(it) }
                DEFAULTROUTETABLEASSOCIATION_DESCRIPTOR.index -> builder.defaultRouteTableAssociation = deserializeString().let { DefaultRouteTableAssociationValue.fromValue(it) }
                DEFAULTROUTETABLEPROPAGATION_DESCRIPTOR.index -> builder.defaultRouteTablePropagation = deserializeString().let { DefaultRouteTablePropagationValue.fromValue(it) }
                DNSSUPPORT_DESCRIPTOR.index -> builder.dnsSupport = deserializeString().let { DnsSupportValue.fromValue(it) }
                MULTICASTSUPPORT_DESCRIPTOR.index -> builder.multicastSupport = deserializeString().let { MulticastSupportValue.fromValue(it) }
                PROPAGATIONDEFAULTROUTETABLEID_DESCRIPTOR.index -> builder.propagationDefaultRouteTableId = deserializeString()
                TRANSITGATEWAYCIDRBLOCKS_DESCRIPTOR.index -> builder.transitGatewayCidrBlocks =
                    deserializer.deserializeList(TRANSITGATEWAYCIDRBLOCKS_DESCRIPTOR) {
                        val col0 = mutableListOf<String>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeString() } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                VPNECMPSUPPORT_DESCRIPTOR.index -> builder.vpnEcmpSupport = deserializeString().let { VpnEcmpSupportValue.fromValue(it) }
                null -> break@loop
                else -> skipValue()
            }
        }
    }
    return builder.build()
}
