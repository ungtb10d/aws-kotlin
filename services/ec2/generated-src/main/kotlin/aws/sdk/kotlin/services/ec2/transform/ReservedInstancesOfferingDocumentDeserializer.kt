// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.transform

import aws.sdk.kotlin.services.ec2.model.CurrencyCodeValues
import aws.sdk.kotlin.services.ec2.model.InstanceType
import aws.sdk.kotlin.services.ec2.model.OfferingClassType
import aws.sdk.kotlin.services.ec2.model.OfferingTypeValues
import aws.sdk.kotlin.services.ec2.model.PricingDetail
import aws.sdk.kotlin.services.ec2.model.RecurringCharge
import aws.sdk.kotlin.services.ec2.model.ReservedInstancesOffering
import aws.sdk.kotlin.services.ec2.model.RiProductDescription
import aws.sdk.kotlin.services.ec2.model.Scope
import aws.sdk.kotlin.services.ec2.model.Tenancy
import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.serde.xml.XmlCollectionName
import aws.smithy.kotlin.runtime.serde.xml.XmlDeserializer
import aws.smithy.kotlin.runtime.serde.xml.XmlNamespace
import aws.smithy.kotlin.runtime.serde.xml.XmlSerialName

internal fun deserializeReservedInstancesOfferingDocument(deserializer: Deserializer): ReservedInstancesOffering {
    val builder = ReservedInstancesOffering.Builder()
    val AVAILABILITYZONE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("availabilityZone"))
    val CURRENCYCODE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("currencyCode"))
    val DURATION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Long, XmlSerialName("duration"))
    val FIXEDPRICE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Float, XmlSerialName("fixedPrice"))
    val INSTANCETENANCY_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("instanceTenancy"))
    val INSTANCETYPE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("instanceType"))
    val MARKETPLACE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Boolean, XmlSerialName("marketplace"))
    val OFFERINGCLASS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("offeringClass"))
    val OFFERINGTYPE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("offeringType"))
    val PRICINGDETAILS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("pricingDetailsSet"), XmlCollectionName("item"))
    val PRODUCTDESCRIPTION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("productDescription"))
    val RECURRINGCHARGES_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("recurringCharges"), XmlCollectionName("item"))
    val RESERVEDINSTANCESOFFERINGID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("reservedInstancesOfferingId"))
    val SCOPE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("scope"))
    val USAGEPRICE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Float, XmlSerialName("usagePrice"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(XmlSerialName("ReservedInstancesOffering"))
        trait(XmlNamespace("http://ec2.amazonaws.com/doc/2016-11-15"))
        field(AVAILABILITYZONE_DESCRIPTOR)
        field(CURRENCYCODE_DESCRIPTOR)
        field(DURATION_DESCRIPTOR)
        field(FIXEDPRICE_DESCRIPTOR)
        field(INSTANCETENANCY_DESCRIPTOR)
        field(INSTANCETYPE_DESCRIPTOR)
        field(MARKETPLACE_DESCRIPTOR)
        field(OFFERINGCLASS_DESCRIPTOR)
        field(OFFERINGTYPE_DESCRIPTOR)
        field(PRICINGDETAILS_DESCRIPTOR)
        field(PRODUCTDESCRIPTION_DESCRIPTOR)
        field(RECURRINGCHARGES_DESCRIPTOR)
        field(RESERVEDINSTANCESOFFERINGID_DESCRIPTOR)
        field(SCOPE_DESCRIPTOR)
        field(USAGEPRICE_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                AVAILABILITYZONE_DESCRIPTOR.index -> builder.availabilityZone = deserializeString()
                CURRENCYCODE_DESCRIPTOR.index -> builder.currencyCode = deserializeString().let { CurrencyCodeValues.fromValue(it) }
                DURATION_DESCRIPTOR.index -> builder.duration = deserializeLong()
                FIXEDPRICE_DESCRIPTOR.index -> builder.fixedPrice = deserializeFloat()
                INSTANCETENANCY_DESCRIPTOR.index -> builder.instanceTenancy = deserializeString().let { Tenancy.fromValue(it) }
                INSTANCETYPE_DESCRIPTOR.index -> builder.instanceType = deserializeString().let { InstanceType.fromValue(it) }
                MARKETPLACE_DESCRIPTOR.index -> builder.marketplace = deserializeBoolean()
                OFFERINGCLASS_DESCRIPTOR.index -> builder.offeringClass = deserializeString().let { OfferingClassType.fromValue(it) }
                OFFERINGTYPE_DESCRIPTOR.index -> builder.offeringType = deserializeString().let { OfferingTypeValues.fromValue(it) }
                PRICINGDETAILS_DESCRIPTOR.index -> builder.pricingDetails =
                    deserializer.deserializeList(PRICINGDETAILS_DESCRIPTOR) {
                        val col0 = mutableListOf<PricingDetail>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializePricingDetailDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                PRODUCTDESCRIPTION_DESCRIPTOR.index -> builder.productDescription = deserializeString().let { RiProductDescription.fromValue(it) }
                RECURRINGCHARGES_DESCRIPTOR.index -> builder.recurringCharges =
                    deserializer.deserializeList(RECURRINGCHARGES_DESCRIPTOR) {
                        val col0 = mutableListOf<RecurringCharge>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeRecurringChargeDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                RESERVEDINSTANCESOFFERINGID_DESCRIPTOR.index -> builder.reservedInstancesOfferingId = deserializeString()
                SCOPE_DESCRIPTOR.index -> builder.scope = deserializeString().let { Scope.fromValue(it) }
                USAGEPRICE_DESCRIPTOR.index -> builder.usagePrice = deserializeFloat()
                null -> break@loop
                else -> skipValue()
            }
        }
    }
    return builder.build()
}
