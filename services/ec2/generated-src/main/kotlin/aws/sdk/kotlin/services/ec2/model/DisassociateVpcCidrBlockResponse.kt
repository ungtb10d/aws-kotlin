// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



public class DisassociateVpcCidrBlockResponse private constructor(builder: Builder) {
    /**
     * Information about the IPv4 CIDR block association.
     */
    public val cidrBlockAssociation: aws.sdk.kotlin.services.ec2.model.VpcCidrBlockAssociation? = builder.cidrBlockAssociation
    /**
     * Information about the IPv6 CIDR block association.
     */
    public val ipv6CidrBlockAssociation: aws.sdk.kotlin.services.ec2.model.VpcIpv6CidrBlockAssociation? = builder.ipv6CidrBlockAssociation
    /**
     * The ID of the VPC.
     */
    public val vpcId: kotlin.String? = builder.vpcId

    public companion object {
        public operator fun invoke(block: Builder.() -> kotlin.Unit): aws.sdk.kotlin.services.ec2.model.DisassociateVpcCidrBlockResponse = Builder().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("DisassociateVpcCidrBlockResponse(")
        append("cidrBlockAssociation=$cidrBlockAssociation,")
        append("ipv6CidrBlockAssociation=$ipv6CidrBlockAssociation,")
        append("vpcId=$vpcId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = cidrBlockAssociation?.hashCode() ?: 0
        result = 31 * result + (ipv6CidrBlockAssociation?.hashCode() ?: 0)
        result = 31 * result + (vpcId?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as DisassociateVpcCidrBlockResponse

        if (cidrBlockAssociation != other.cidrBlockAssociation) return false
        if (ipv6CidrBlockAssociation != other.ipv6CidrBlockAssociation) return false
        if (vpcId != other.vpcId) return false

        return true
    }

    public inline fun copy(block: Builder.() -> kotlin.Unit = {}): aws.sdk.kotlin.services.ec2.model.DisassociateVpcCidrBlockResponse = Builder(this).apply(block).build()

    public class Builder {
        /**
         * Information about the IPv4 CIDR block association.
         */
        public var cidrBlockAssociation: aws.sdk.kotlin.services.ec2.model.VpcCidrBlockAssociation? = null
        /**
         * Information about the IPv6 CIDR block association.
         */
        public var ipv6CidrBlockAssociation: aws.sdk.kotlin.services.ec2.model.VpcIpv6CidrBlockAssociation? = null
        /**
         * The ID of the VPC.
         */
        public var vpcId: kotlin.String? = null

        @PublishedApi
        internal constructor()
        @PublishedApi
        internal constructor(x: aws.sdk.kotlin.services.ec2.model.DisassociateVpcCidrBlockResponse) : this() {
            this.cidrBlockAssociation = x.cidrBlockAssociation
            this.ipv6CidrBlockAssociation = x.ipv6CidrBlockAssociation
            this.vpcId = x.vpcId
        }

        @PublishedApi
        internal fun build(): aws.sdk.kotlin.services.ec2.model.DisassociateVpcCidrBlockResponse = DisassociateVpcCidrBlockResponse(this)

        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.VpcCidrBlockAssociation] inside the given [block]
         */
        public fun cidrBlockAssociation(block: aws.sdk.kotlin.services.ec2.model.VpcCidrBlockAssociation.Builder.() -> kotlin.Unit) {
            this.cidrBlockAssociation = aws.sdk.kotlin.services.ec2.model.VpcCidrBlockAssociation.invoke(block)
        }

        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.VpcIpv6CidrBlockAssociation] inside the given [block]
         */
        public fun ipv6CidrBlockAssociation(block: aws.sdk.kotlin.services.ec2.model.VpcIpv6CidrBlockAssociation.Builder.() -> kotlin.Unit) {
            this.ipv6CidrBlockAssociation = aws.sdk.kotlin.services.ec2.model.VpcIpv6CidrBlockAssociation.invoke(block)
        }
    }
}
