// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes an association between a subnet and an IPv6 CIDR block.
 */
public class SubnetIpv6CidrBlockAssociation private constructor(builder: Builder) {
    /**
     * The ID of the association.
     */
    public val associationId: kotlin.String? = builder.associationId
    /**
     * The IPv6 CIDR block.
     */
    public val ipv6CidrBlock: kotlin.String? = builder.ipv6CidrBlock
    /**
     * The state of the CIDR block.
     */
    public val ipv6CidrBlockState: aws.sdk.kotlin.services.ec2.model.SubnetCidrBlockState? = builder.ipv6CidrBlockState

    public companion object {
        public operator fun invoke(block: Builder.() -> kotlin.Unit): aws.sdk.kotlin.services.ec2.model.SubnetIpv6CidrBlockAssociation = Builder().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("SubnetIpv6CidrBlockAssociation(")
        append("associationId=$associationId,")
        append("ipv6CidrBlock=$ipv6CidrBlock,")
        append("ipv6CidrBlockState=$ipv6CidrBlockState)")
    }

    override fun hashCode(): kotlin.Int {
        var result = associationId?.hashCode() ?: 0
        result = 31 * result + (ipv6CidrBlock?.hashCode() ?: 0)
        result = 31 * result + (ipv6CidrBlockState?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as SubnetIpv6CidrBlockAssociation

        if (associationId != other.associationId) return false
        if (ipv6CidrBlock != other.ipv6CidrBlock) return false
        if (ipv6CidrBlockState != other.ipv6CidrBlockState) return false

        return true
    }

    public inline fun copy(block: Builder.() -> kotlin.Unit = {}): aws.sdk.kotlin.services.ec2.model.SubnetIpv6CidrBlockAssociation = Builder(this).apply(block).build()

    public class Builder {
        /**
         * The ID of the association.
         */
        public var associationId: kotlin.String? = null
        /**
         * The IPv6 CIDR block.
         */
        public var ipv6CidrBlock: kotlin.String? = null
        /**
         * The state of the CIDR block.
         */
        public var ipv6CidrBlockState: aws.sdk.kotlin.services.ec2.model.SubnetCidrBlockState? = null

        @PublishedApi
        internal constructor()
        @PublishedApi
        internal constructor(x: aws.sdk.kotlin.services.ec2.model.SubnetIpv6CidrBlockAssociation) : this() {
            this.associationId = x.associationId
            this.ipv6CidrBlock = x.ipv6CidrBlock
            this.ipv6CidrBlockState = x.ipv6CidrBlockState
        }

        @PublishedApi
        internal fun build(): aws.sdk.kotlin.services.ec2.model.SubnetIpv6CidrBlockAssociation = SubnetIpv6CidrBlockAssociation(this)

        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.SubnetCidrBlockState] inside the given [block]
         */
        public fun ipv6CidrBlockState(block: aws.sdk.kotlin.services.ec2.model.SubnetCidrBlockState.Builder.() -> kotlin.Unit) {
            this.ipv6CidrBlockState = aws.sdk.kotlin.services.ec2.model.SubnetCidrBlockState.invoke(block)
        }
    }
}
