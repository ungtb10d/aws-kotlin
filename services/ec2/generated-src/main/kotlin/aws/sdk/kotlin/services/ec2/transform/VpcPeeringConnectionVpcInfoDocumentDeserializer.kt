// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.transform

import aws.sdk.kotlin.services.ec2.model.CidrBlock
import aws.sdk.kotlin.services.ec2.model.Ipv6CidrBlock
import aws.sdk.kotlin.services.ec2.model.VpcPeeringConnectionVpcInfo
import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.serde.xml.XmlCollectionName
import aws.smithy.kotlin.runtime.serde.xml.XmlDeserializer
import aws.smithy.kotlin.runtime.serde.xml.XmlNamespace
import aws.smithy.kotlin.runtime.serde.xml.XmlSerialName

internal fun deserializeVpcPeeringConnectionVpcInfoDocument(deserializer: Deserializer): VpcPeeringConnectionVpcInfo {
    val builder = VpcPeeringConnectionVpcInfo.Builder()
    val CIDRBLOCK_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("cidrBlock"))
    val CIDRBLOCKSET_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("cidrBlockSet"), XmlCollectionName("item"))
    val IPV6CIDRBLOCKSET_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("ipv6CidrBlockSet"), XmlCollectionName("item"))
    val OWNERID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("ownerId"))
    val PEERINGOPTIONS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("peeringOptions"))
    val REGION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("region"))
    val VPCID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("vpcId"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(XmlSerialName("VpcPeeringConnectionVpcInfo"))
        trait(XmlNamespace("http://ec2.amazonaws.com/doc/2016-11-15"))
        field(CIDRBLOCK_DESCRIPTOR)
        field(CIDRBLOCKSET_DESCRIPTOR)
        field(IPV6CIDRBLOCKSET_DESCRIPTOR)
        field(OWNERID_DESCRIPTOR)
        field(PEERINGOPTIONS_DESCRIPTOR)
        field(REGION_DESCRIPTOR)
        field(VPCID_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                CIDRBLOCK_DESCRIPTOR.index -> builder.cidrBlock = deserializeString()
                CIDRBLOCKSET_DESCRIPTOR.index -> builder.cidrBlockSet =
                    deserializer.deserializeList(CIDRBLOCKSET_DESCRIPTOR) {
                        val col0 = mutableListOf<CidrBlock>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeCidrBlockDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                IPV6CIDRBLOCKSET_DESCRIPTOR.index -> builder.ipv6CidrBlockSet =
                    deserializer.deserializeList(IPV6CIDRBLOCKSET_DESCRIPTOR) {
                        val col0 = mutableListOf<Ipv6CidrBlock>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeIpv6CidrBlockDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                OWNERID_DESCRIPTOR.index -> builder.ownerId = deserializeString()
                PEERINGOPTIONS_DESCRIPTOR.index -> builder.peeringOptions = deserializeVpcPeeringConnectionOptionsDescriptionDocument(deserializer)
                REGION_DESCRIPTOR.index -> builder.region = deserializeString()
                VPCID_DESCRIPTOR.index -> builder.vpcId = deserializeString()
                null -> break@loop
                else -> skipValue()
            }
        }
    }
    return builder.build()
}
