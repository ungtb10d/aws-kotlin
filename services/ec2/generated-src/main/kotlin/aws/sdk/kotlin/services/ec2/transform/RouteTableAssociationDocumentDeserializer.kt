// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.transform

import aws.sdk.kotlin.services.ec2.model.RouteTableAssociation
import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.serde.xml.XmlDeserializer
import aws.smithy.kotlin.runtime.serde.xml.XmlNamespace
import aws.smithy.kotlin.runtime.serde.xml.XmlSerialName

internal fun deserializeRouteTableAssociationDocument(deserializer: Deserializer): RouteTableAssociation {
    val builder = RouteTableAssociation.Builder()
    val ASSOCIATIONSTATE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("associationState"))
    val GATEWAYID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("gatewayId"))
    val MAIN_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Boolean, XmlSerialName("main"))
    val ROUTETABLEASSOCIATIONID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("routeTableAssociationId"))
    val ROUTETABLEID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("routeTableId"))
    val SUBNETID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("subnetId"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(XmlSerialName("RouteTableAssociation"))
        trait(XmlNamespace("http://ec2.amazonaws.com/doc/2016-11-15"))
        field(ASSOCIATIONSTATE_DESCRIPTOR)
        field(GATEWAYID_DESCRIPTOR)
        field(MAIN_DESCRIPTOR)
        field(ROUTETABLEASSOCIATIONID_DESCRIPTOR)
        field(ROUTETABLEID_DESCRIPTOR)
        field(SUBNETID_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                ASSOCIATIONSTATE_DESCRIPTOR.index -> builder.associationState = deserializeRouteTableAssociationStateDocument(deserializer)
                GATEWAYID_DESCRIPTOR.index -> builder.gatewayId = deserializeString()
                MAIN_DESCRIPTOR.index -> builder.main = deserializeBoolean()
                ROUTETABLEASSOCIATIONID_DESCRIPTOR.index -> builder.routeTableAssociationId = deserializeString()
                ROUTETABLEID_DESCRIPTOR.index -> builder.routeTableId = deserializeString()
                SUBNETID_DESCRIPTOR.index -> builder.subnetId = deserializeString()
                null -> break@loop
                else -> skipValue()
            }
        }
    }
    return builder.build()
}
