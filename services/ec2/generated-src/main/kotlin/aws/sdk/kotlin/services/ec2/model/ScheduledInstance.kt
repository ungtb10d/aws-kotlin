// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model

import aws.smithy.kotlin.runtime.time.Instant

/**
 * Describes a Scheduled Instance.
 *
 * We are retiring EC2-Classic on August 15, 2022. We recommend that you migrate from EC2-Classic to a VPC. For more information, see [Migrate from EC2-Classic to a VPC](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-migrate.html) in the *Amazon Elastic Compute Cloud User Guide*.
 */
public class ScheduledInstance private constructor(builder: Builder) {
    /**
     * The Availability Zone.
     */
    public val availabilityZone: kotlin.String? = builder.availabilityZone
    /**
     * The date when the Scheduled Instance was purchased.
     */
    public val createDate: aws.smithy.kotlin.runtime.time.Instant? = builder.createDate
    /**
     * The hourly price for a single instance.
     */
    public val hourlyPrice: kotlin.String? = builder.hourlyPrice
    /**
     * The number of instances.
     */
    public val instanceCount: kotlin.Int? = builder.instanceCount
    /**
     * The instance type.
     */
    public val instanceType: kotlin.String? = builder.instanceType
    /**
     * The network platform (`EC2-Classic` or `EC2-VPC`).
     */
    public val networkPlatform: kotlin.String? = builder.networkPlatform
    /**
     * The time for the next schedule to start.
     */
    public val nextSlotStartTime: aws.smithy.kotlin.runtime.time.Instant? = builder.nextSlotStartTime
    /**
     * The platform (`Linux/UNIX` or `Windows`).
     */
    public val platform: kotlin.String? = builder.platform
    /**
     * The time that the previous schedule ended or will end.
     */
    public val previousSlotEndTime: aws.smithy.kotlin.runtime.time.Instant? = builder.previousSlotEndTime
    /**
     * The schedule recurrence.
     */
    public val recurrence: aws.sdk.kotlin.services.ec2.model.ScheduledInstanceRecurrence? = builder.recurrence
    /**
     * The Scheduled Instance ID.
     */
    public val scheduledInstanceId: kotlin.String? = builder.scheduledInstanceId
    /**
     * The number of hours in the schedule.
     */
    public val slotDurationInHours: kotlin.Int? = builder.slotDurationInHours
    /**
     * The end date for the Scheduled Instance.
     */
    public val termEndDate: aws.smithy.kotlin.runtime.time.Instant? = builder.termEndDate
    /**
     * The start date for the Scheduled Instance.
     */
    public val termStartDate: aws.smithy.kotlin.runtime.time.Instant? = builder.termStartDate
    /**
     * The total number of hours for a single instance for the entire term.
     */
    public val totalScheduledInstanceHours: kotlin.Int? = builder.totalScheduledInstanceHours

    public companion object {
        public operator fun invoke(block: Builder.() -> kotlin.Unit): aws.sdk.kotlin.services.ec2.model.ScheduledInstance = Builder().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("ScheduledInstance(")
        append("availabilityZone=$availabilityZone,")
        append("createDate=$createDate,")
        append("hourlyPrice=$hourlyPrice,")
        append("instanceCount=$instanceCount,")
        append("instanceType=$instanceType,")
        append("networkPlatform=$networkPlatform,")
        append("nextSlotStartTime=$nextSlotStartTime,")
        append("platform=$platform,")
        append("previousSlotEndTime=$previousSlotEndTime,")
        append("recurrence=$recurrence,")
        append("scheduledInstanceId=$scheduledInstanceId,")
        append("slotDurationInHours=$slotDurationInHours,")
        append("termEndDate=$termEndDate,")
        append("termStartDate=$termStartDate,")
        append("totalScheduledInstanceHours=$totalScheduledInstanceHours)")
    }

    override fun hashCode(): kotlin.Int {
        var result = availabilityZone?.hashCode() ?: 0
        result = 31 * result + (createDate?.hashCode() ?: 0)
        result = 31 * result + (hourlyPrice?.hashCode() ?: 0)
        result = 31 * result + (instanceCount ?: 0)
        result = 31 * result + (instanceType?.hashCode() ?: 0)
        result = 31 * result + (networkPlatform?.hashCode() ?: 0)
        result = 31 * result + (nextSlotStartTime?.hashCode() ?: 0)
        result = 31 * result + (platform?.hashCode() ?: 0)
        result = 31 * result + (previousSlotEndTime?.hashCode() ?: 0)
        result = 31 * result + (recurrence?.hashCode() ?: 0)
        result = 31 * result + (scheduledInstanceId?.hashCode() ?: 0)
        result = 31 * result + (slotDurationInHours ?: 0)
        result = 31 * result + (termEndDate?.hashCode() ?: 0)
        result = 31 * result + (termStartDate?.hashCode() ?: 0)
        result = 31 * result + (totalScheduledInstanceHours ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as ScheduledInstance

        if (availabilityZone != other.availabilityZone) return false
        if (createDate != other.createDate) return false
        if (hourlyPrice != other.hourlyPrice) return false
        if (instanceCount != other.instanceCount) return false
        if (instanceType != other.instanceType) return false
        if (networkPlatform != other.networkPlatform) return false
        if (nextSlotStartTime != other.nextSlotStartTime) return false
        if (platform != other.platform) return false
        if (previousSlotEndTime != other.previousSlotEndTime) return false
        if (recurrence != other.recurrence) return false
        if (scheduledInstanceId != other.scheduledInstanceId) return false
        if (slotDurationInHours != other.slotDurationInHours) return false
        if (termEndDate != other.termEndDate) return false
        if (termStartDate != other.termStartDate) return false
        if (totalScheduledInstanceHours != other.totalScheduledInstanceHours) return false

        return true
    }

    public inline fun copy(block: Builder.() -> kotlin.Unit = {}): aws.sdk.kotlin.services.ec2.model.ScheduledInstance = Builder(this).apply(block).build()

    public class Builder {
        /**
         * The Availability Zone.
         */
        public var availabilityZone: kotlin.String? = null
        /**
         * The date when the Scheduled Instance was purchased.
         */
        public var createDate: aws.smithy.kotlin.runtime.time.Instant? = null
        /**
         * The hourly price for a single instance.
         */
        public var hourlyPrice: kotlin.String? = null
        /**
         * The number of instances.
         */
        public var instanceCount: kotlin.Int? = null
        /**
         * The instance type.
         */
        public var instanceType: kotlin.String? = null
        /**
         * The network platform (`EC2-Classic` or `EC2-VPC`).
         */
        public var networkPlatform: kotlin.String? = null
        /**
         * The time for the next schedule to start.
         */
        public var nextSlotStartTime: aws.smithy.kotlin.runtime.time.Instant? = null
        /**
         * The platform (`Linux/UNIX` or `Windows`).
         */
        public var platform: kotlin.String? = null
        /**
         * The time that the previous schedule ended or will end.
         */
        public var previousSlotEndTime: aws.smithy.kotlin.runtime.time.Instant? = null
        /**
         * The schedule recurrence.
         */
        public var recurrence: aws.sdk.kotlin.services.ec2.model.ScheduledInstanceRecurrence? = null
        /**
         * The Scheduled Instance ID.
         */
        public var scheduledInstanceId: kotlin.String? = null
        /**
         * The number of hours in the schedule.
         */
        public var slotDurationInHours: kotlin.Int? = null
        /**
         * The end date for the Scheduled Instance.
         */
        public var termEndDate: aws.smithy.kotlin.runtime.time.Instant? = null
        /**
         * The start date for the Scheduled Instance.
         */
        public var termStartDate: aws.smithy.kotlin.runtime.time.Instant? = null
        /**
         * The total number of hours for a single instance for the entire term.
         */
        public var totalScheduledInstanceHours: kotlin.Int? = null

        @PublishedApi
        internal constructor()
        @PublishedApi
        internal constructor(x: aws.sdk.kotlin.services.ec2.model.ScheduledInstance) : this() {
            this.availabilityZone = x.availabilityZone
            this.createDate = x.createDate
            this.hourlyPrice = x.hourlyPrice
            this.instanceCount = x.instanceCount
            this.instanceType = x.instanceType
            this.networkPlatform = x.networkPlatform
            this.nextSlotStartTime = x.nextSlotStartTime
            this.platform = x.platform
            this.previousSlotEndTime = x.previousSlotEndTime
            this.recurrence = x.recurrence
            this.scheduledInstanceId = x.scheduledInstanceId
            this.slotDurationInHours = x.slotDurationInHours
            this.termEndDate = x.termEndDate
            this.termStartDate = x.termStartDate
            this.totalScheduledInstanceHours = x.totalScheduledInstanceHours
        }

        @PublishedApi
        internal fun build(): aws.sdk.kotlin.services.ec2.model.ScheduledInstance = ScheduledInstance(this)

        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.ScheduledInstanceRecurrence] inside the given [block]
         */
        public fun recurrence(block: aws.sdk.kotlin.services.ec2.model.ScheduledInstanceRecurrence.Builder.() -> kotlin.Unit) {
            this.recurrence = aws.sdk.kotlin.services.ec2.model.ScheduledInstanceRecurrence.invoke(block)
        }
    }
}
