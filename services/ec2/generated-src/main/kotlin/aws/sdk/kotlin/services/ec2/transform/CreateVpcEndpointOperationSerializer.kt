// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.transform

import aws.sdk.kotlin.services.ec2.model.CreateVpcEndpointRequest
import aws.sdk.kotlin.services.ec2.model.DnsOptionsSpecification
import aws.sdk.kotlin.services.ec2.model.IpAddressType
import aws.sdk.kotlin.services.ec2.model.TagSpecification
import aws.sdk.kotlin.services.ec2.model.VpcEndpointType
import aws.smithy.kotlin.runtime.client.ExecutionContext
import aws.smithy.kotlin.runtime.http.HttpBody
import aws.smithy.kotlin.runtime.http.HttpMethod
import aws.smithy.kotlin.runtime.http.content.ByteArrayContent
import aws.smithy.kotlin.runtime.http.operation.HttpSerialize
import aws.smithy.kotlin.runtime.http.request.HttpRequestBuilder
import aws.smithy.kotlin.runtime.http.request.url
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.formurl.FormUrlFlattened
import aws.smithy.kotlin.runtime.serde.formurl.FormUrlSerialName
import aws.smithy.kotlin.runtime.serde.formurl.FormUrlSerializer
import aws.smithy.kotlin.runtime.serde.formurl.QueryLiteral
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct


internal class CreateVpcEndpointOperationSerializer: HttpSerialize<CreateVpcEndpointRequest> {
    override suspend fun serialize(context: ExecutionContext, input: CreateVpcEndpointRequest): HttpRequestBuilder {
        val builder = HttpRequestBuilder()
        builder.method = HttpMethod.POST

        builder.url {
            path = "/"
        }

        val payload = serializeCreateVpcEndpointOperationBody(context, input)
        builder.body = ByteArrayContent(payload)
        if (builder.body !is HttpBody.Empty) {
            builder.headers.setMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        return builder
    }
}

private fun serializeCreateVpcEndpointOperationBody(context: ExecutionContext, input: CreateVpcEndpointRequest): ByteArray {
    val serializer = FormUrlSerializer()
    val CLIENTTOKEN_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, FormUrlSerialName("ClientToken"))
    val DNSOPTIONS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, FormUrlSerialName("DnsOptions"))
    val DRYRUN_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Boolean, FormUrlSerialName("DryRun"))
    val IPADDRESSTYPE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Enum, FormUrlSerialName("IpAddressType"))
    val POLICYDOCUMENT_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, FormUrlSerialName("PolicyDocument"))
    val PRIVATEDNSENABLED_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Boolean, FormUrlSerialName("PrivateDnsEnabled"))
    val ROUTETABLEIDS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, FormUrlSerialName("RouteTableId"), FormUrlFlattened)
    val SECURITYGROUPIDS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, FormUrlSerialName("SecurityGroupId"), FormUrlFlattened)
    val SERVICENAME_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, FormUrlSerialName("ServiceName"))
    val SUBNETIDS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, FormUrlSerialName("SubnetId"), FormUrlFlattened)
    val TAGSPECIFICATIONS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, FormUrlSerialName("TagSpecification"), FormUrlFlattened)
    val VPCENDPOINTTYPE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Enum, FormUrlSerialName("VpcEndpointType"))
    val VPCID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, FormUrlSerialName("VpcId"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(FormUrlSerialName("CreateVpcEndpointRequest"))
        trait(QueryLiteral("Action", "CreateVpcEndpoint"))
        trait(QueryLiteral("Version", "2016-11-15"))
        field(CLIENTTOKEN_DESCRIPTOR)
        field(DNSOPTIONS_DESCRIPTOR)
        field(DRYRUN_DESCRIPTOR)
        field(IPADDRESSTYPE_DESCRIPTOR)
        field(POLICYDOCUMENT_DESCRIPTOR)
        field(PRIVATEDNSENABLED_DESCRIPTOR)
        field(ROUTETABLEIDS_DESCRIPTOR)
        field(SECURITYGROUPIDS_DESCRIPTOR)
        field(SERVICENAME_DESCRIPTOR)
        field(SUBNETIDS_DESCRIPTOR)
        field(TAGSPECIFICATIONS_DESCRIPTOR)
        field(VPCENDPOINTTYPE_DESCRIPTOR)
        field(VPCID_DESCRIPTOR)
    }

    serializer.serializeStruct(OBJ_DESCRIPTOR) {
        input.clientToken?.let { field(CLIENTTOKEN_DESCRIPTOR, it) }
        input.dnsOptions?.let { field(DNSOPTIONS_DESCRIPTOR, it, ::serializeDnsOptionsSpecificationDocument) }
        input.dryRun?.let { field(DRYRUN_DESCRIPTOR, it) }
        input.ipAddressType?.let { field(IPADDRESSTYPE_DESCRIPTOR, it.value) }
        input.policyDocument?.let { field(POLICYDOCUMENT_DESCRIPTOR, it) }
        input.privateDnsEnabled?.let { field(PRIVATEDNSENABLED_DESCRIPTOR, it) }
        if (input.routeTableIds != null) {
            listField(ROUTETABLEIDS_DESCRIPTOR) {
                for (el0 in input.routeTableIds) {
                    serializeString(el0)
                }
            }
        }
        if (input.securityGroupIds != null) {
            listField(SECURITYGROUPIDS_DESCRIPTOR) {
                for (el0 in input.securityGroupIds) {
                    serializeString(el0)
                }
            }
        }
        input.serviceName?.let { field(SERVICENAME_DESCRIPTOR, it) }
        if (input.subnetIds != null) {
            listField(SUBNETIDS_DESCRIPTOR) {
                for (el0 in input.subnetIds) {
                    serializeString(el0)
                }
            }
        }
        if (input.tagSpecifications != null) {
            listField(TAGSPECIFICATIONS_DESCRIPTOR) {
                for (el0 in input.tagSpecifications) {
                    serializeSdkSerializable(asSdkSerializable(el0, ::serializeTagSpecificationDocument))
                }
            }
        }
        input.vpcEndpointType?.let { field(VPCENDPOINTTYPE_DESCRIPTOR, it.value) }
        input.vpcId?.let { field(VPCID_DESCRIPTOR, it) }
    }
    return serializer.toByteArray()
}
