// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



public class CreateFpgaImageRequest private constructor(builder: Builder) {
    /**
     * Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see [Ensuring Idempotency](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html).
     */
    public val clientToken: kotlin.String? = builder.clientToken
    /**
     * A description for the AFI.
     */
    public val description: kotlin.String? = builder.description
    /**
     * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is `DryRunOperation`. Otherwise, it is `UnauthorizedOperation`.
     */
    public val dryRun: kotlin.Boolean? = builder.dryRun
    /**
     * The location of the encrypted design checkpoint in Amazon S3. The input must be a tarball.
     */
    public val inputStorageLocation: aws.sdk.kotlin.services.ec2.model.StorageLocation? = builder.inputStorageLocation
    /**
     * The location in Amazon S3 for the output logs.
     */
    public val logsStorageLocation: aws.sdk.kotlin.services.ec2.model.StorageLocation? = builder.logsStorageLocation
    /**
     * A name for the AFI.
     */
    public val name: kotlin.String? = builder.name
    /**
     * The tags to apply to the FPGA image during creation.
     */
    public val tagSpecifications: List<TagSpecification>? = builder.tagSpecifications

    public companion object {
        public operator fun invoke(block: Builder.() -> kotlin.Unit): aws.sdk.kotlin.services.ec2.model.CreateFpgaImageRequest = Builder().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("CreateFpgaImageRequest(")
        append("clientToken=$clientToken,")
        append("description=$description,")
        append("dryRun=$dryRun,")
        append("inputStorageLocation=$inputStorageLocation,")
        append("logsStorageLocation=$logsStorageLocation,")
        append("name=$name,")
        append("tagSpecifications=$tagSpecifications)")
    }

    override fun hashCode(): kotlin.Int {
        var result = clientToken?.hashCode() ?: 0
        result = 31 * result + (description?.hashCode() ?: 0)
        result = 31 * result + (dryRun?.hashCode() ?: 0)
        result = 31 * result + (inputStorageLocation?.hashCode() ?: 0)
        result = 31 * result + (logsStorageLocation?.hashCode() ?: 0)
        result = 31 * result + (name?.hashCode() ?: 0)
        result = 31 * result + (tagSpecifications?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as CreateFpgaImageRequest

        if (clientToken != other.clientToken) return false
        if (description != other.description) return false
        if (dryRun != other.dryRun) return false
        if (inputStorageLocation != other.inputStorageLocation) return false
        if (logsStorageLocation != other.logsStorageLocation) return false
        if (name != other.name) return false
        if (tagSpecifications != other.tagSpecifications) return false

        return true
    }

    public inline fun copy(block: Builder.() -> kotlin.Unit = {}): aws.sdk.kotlin.services.ec2.model.CreateFpgaImageRequest = Builder(this).apply(block).build()

    public class Builder {
        /**
         * Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see [Ensuring Idempotency](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html).
         */
        public var clientToken: kotlin.String? = null
        /**
         * A description for the AFI.
         */
        public var description: kotlin.String? = null
        /**
         * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is `DryRunOperation`. Otherwise, it is `UnauthorizedOperation`.
         */
        public var dryRun: kotlin.Boolean? = null
        /**
         * The location of the encrypted design checkpoint in Amazon S3. The input must be a tarball.
         */
        public var inputStorageLocation: aws.sdk.kotlin.services.ec2.model.StorageLocation? = null
        /**
         * The location in Amazon S3 for the output logs.
         */
        public var logsStorageLocation: aws.sdk.kotlin.services.ec2.model.StorageLocation? = null
        /**
         * A name for the AFI.
         */
        public var name: kotlin.String? = null
        /**
         * The tags to apply to the FPGA image during creation.
         */
        public var tagSpecifications: List<TagSpecification>? = null

        @PublishedApi
        internal constructor()
        @PublishedApi
        internal constructor(x: aws.sdk.kotlin.services.ec2.model.CreateFpgaImageRequest) : this() {
            this.clientToken = x.clientToken
            this.description = x.description
            this.dryRun = x.dryRun
            this.inputStorageLocation = x.inputStorageLocation
            this.logsStorageLocation = x.logsStorageLocation
            this.name = x.name
            this.tagSpecifications = x.tagSpecifications
        }

        @PublishedApi
        internal fun build(): aws.sdk.kotlin.services.ec2.model.CreateFpgaImageRequest = CreateFpgaImageRequest(this)

        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.StorageLocation] inside the given [block]
         */
        public fun inputStorageLocation(block: aws.sdk.kotlin.services.ec2.model.StorageLocation.Builder.() -> kotlin.Unit) {
            this.inputStorageLocation = aws.sdk.kotlin.services.ec2.model.StorageLocation.invoke(block)
        }

        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.StorageLocation] inside the given [block]
         */
        public fun logsStorageLocation(block: aws.sdk.kotlin.services.ec2.model.StorageLocation.Builder.() -> kotlin.Unit) {
            this.logsStorageLocation = aws.sdk.kotlin.services.ec2.model.StorageLocation.invoke(block)
        }
    }
}
