// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.transform

import aws.sdk.kotlin.services.ec2.model.AdditionalDetail
import aws.sdk.kotlin.services.ec2.model.Explanation
import aws.sdk.kotlin.services.ec2.model.PathComponent
import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.serde.xml.XmlCollectionName
import aws.smithy.kotlin.runtime.serde.xml.XmlDeserializer
import aws.smithy.kotlin.runtime.serde.xml.XmlNamespace
import aws.smithy.kotlin.runtime.serde.xml.XmlSerialName

internal fun deserializePathComponentDocument(deserializer: Deserializer): PathComponent {
    val builder = PathComponent.Builder()
    val ACLRULE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("aclRule"))
    val ADDITIONALDETAILS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("additionalDetailSet"), XmlCollectionName("item"))
    val ATTACHEDTO_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("attachedTo"))
    val COMPONENT_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("component"))
    val DESTINATIONVPC_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("destinationVpc"))
    val ELASTICLOADBALANCERLISTENER_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("elasticLoadBalancerListener"))
    val EXPLANATIONS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("explanationSet"), XmlCollectionName("item"))
    val INBOUNDHEADER_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("inboundHeader"))
    val OUTBOUNDHEADER_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("outboundHeader"))
    val ROUTETABLEROUTE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("routeTableRoute"))
    val SECURITYGROUPRULE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("securityGroupRule"))
    val SEQUENCENUMBER_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, XmlSerialName("sequenceNumber"))
    val SOURCEVPC_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("sourceVpc"))
    val SUBNET_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("subnet"))
    val TRANSITGATEWAY_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("transitGateway"))
    val TRANSITGATEWAYROUTETABLEROUTE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("transitGatewayRouteTableRoute"))
    val VPC_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("vpc"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(XmlSerialName("PathComponent"))
        trait(XmlNamespace("http://ec2.amazonaws.com/doc/2016-11-15"))
        field(ACLRULE_DESCRIPTOR)
        field(ADDITIONALDETAILS_DESCRIPTOR)
        field(ATTACHEDTO_DESCRIPTOR)
        field(COMPONENT_DESCRIPTOR)
        field(DESTINATIONVPC_DESCRIPTOR)
        field(ELASTICLOADBALANCERLISTENER_DESCRIPTOR)
        field(EXPLANATIONS_DESCRIPTOR)
        field(INBOUNDHEADER_DESCRIPTOR)
        field(OUTBOUNDHEADER_DESCRIPTOR)
        field(ROUTETABLEROUTE_DESCRIPTOR)
        field(SECURITYGROUPRULE_DESCRIPTOR)
        field(SEQUENCENUMBER_DESCRIPTOR)
        field(SOURCEVPC_DESCRIPTOR)
        field(SUBNET_DESCRIPTOR)
        field(TRANSITGATEWAY_DESCRIPTOR)
        field(TRANSITGATEWAYROUTETABLEROUTE_DESCRIPTOR)
        field(VPC_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                ACLRULE_DESCRIPTOR.index -> builder.aclRule = deserializeAnalysisAclRuleDocument(deserializer)
                ADDITIONALDETAILS_DESCRIPTOR.index -> builder.additionalDetails =
                    deserializer.deserializeList(ADDITIONALDETAILS_DESCRIPTOR) {
                        val col0 = mutableListOf<AdditionalDetail>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeAdditionalDetailDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                ATTACHEDTO_DESCRIPTOR.index -> builder.attachedTo = deserializeAnalysisComponentDocument(deserializer)
                COMPONENT_DESCRIPTOR.index -> builder.component = deserializeAnalysisComponentDocument(deserializer)
                DESTINATIONVPC_DESCRIPTOR.index -> builder.destinationVpc = deserializeAnalysisComponentDocument(deserializer)
                ELASTICLOADBALANCERLISTENER_DESCRIPTOR.index -> builder.elasticLoadBalancerListener = deserializeAnalysisComponentDocument(deserializer)
                EXPLANATIONS_DESCRIPTOR.index -> builder.explanations =
                    deserializer.deserializeList(EXPLANATIONS_DESCRIPTOR) {
                        val col0 = mutableListOf<Explanation>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeExplanationDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                INBOUNDHEADER_DESCRIPTOR.index -> builder.inboundHeader = deserializeAnalysisPacketHeaderDocument(deserializer)
                OUTBOUNDHEADER_DESCRIPTOR.index -> builder.outboundHeader = deserializeAnalysisPacketHeaderDocument(deserializer)
                ROUTETABLEROUTE_DESCRIPTOR.index -> builder.routeTableRoute = deserializeAnalysisRouteTableRouteDocument(deserializer)
                SECURITYGROUPRULE_DESCRIPTOR.index -> builder.securityGroupRule = deserializeAnalysisSecurityGroupRuleDocument(deserializer)
                SEQUENCENUMBER_DESCRIPTOR.index -> builder.sequenceNumber = deserializeInt()
                SOURCEVPC_DESCRIPTOR.index -> builder.sourceVpc = deserializeAnalysisComponentDocument(deserializer)
                SUBNET_DESCRIPTOR.index -> builder.subnet = deserializeAnalysisComponentDocument(deserializer)
                TRANSITGATEWAY_DESCRIPTOR.index -> builder.transitGateway = deserializeAnalysisComponentDocument(deserializer)
                TRANSITGATEWAYROUTETABLEROUTE_DESCRIPTOR.index -> builder.transitGatewayRouteTableRoute = deserializeTransitGatewayRouteTableRouteDocument(deserializer)
                VPC_DESCRIPTOR.index -> builder.vpc = deserializeAnalysisComponentDocument(deserializer)
                null -> break@loop
                else -> skipValue()
            }
        }
    }
    return builder.build()
}
