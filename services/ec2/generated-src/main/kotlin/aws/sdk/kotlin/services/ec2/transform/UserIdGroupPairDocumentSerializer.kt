// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.transform

import aws.sdk.kotlin.services.ec2.model.UserIdGroupPair
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.Serializer
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.formurl.FormUrlSerialName
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct

internal fun serializeUserIdGroupPairDocument(serializer: Serializer, input: UserIdGroupPair) {
    val DESCRIPTION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, FormUrlSerialName("Description"))
    val GROUPID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, FormUrlSerialName("GroupId"))
    val GROUPNAME_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, FormUrlSerialName("GroupName"))
    val PEERINGSTATUS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, FormUrlSerialName("PeeringStatus"))
    val USERID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, FormUrlSerialName("UserId"))
    val VPCID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, FormUrlSerialName("VpcId"))
    val VPCPEERINGCONNECTIONID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, FormUrlSerialName("VpcPeeringConnectionId"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(FormUrlSerialName("UserIdGroupPair"))
        field(DESCRIPTION_DESCRIPTOR)
        field(GROUPID_DESCRIPTOR)
        field(GROUPNAME_DESCRIPTOR)
        field(PEERINGSTATUS_DESCRIPTOR)
        field(USERID_DESCRIPTOR)
        field(VPCID_DESCRIPTOR)
        field(VPCPEERINGCONNECTIONID_DESCRIPTOR)
    }

    serializer.serializeStruct(OBJ_DESCRIPTOR) {
        input.description?.let { field(DESCRIPTION_DESCRIPTOR, it) }
        input.groupId?.let { field(GROUPID_DESCRIPTOR, it) }
        input.groupName?.let { field(GROUPNAME_DESCRIPTOR, it) }
        input.peeringStatus?.let { field(PEERINGSTATUS_DESCRIPTOR, it) }
        input.userId?.let { field(USERID_DESCRIPTOR, it) }
        input.vpcId?.let { field(VPCID_DESCRIPTOR, it) }
        input.vpcPeeringConnectionId?.let { field(VPCPEERINGCONNECTIONID_DESCRIPTOR, it) }
    }
}
