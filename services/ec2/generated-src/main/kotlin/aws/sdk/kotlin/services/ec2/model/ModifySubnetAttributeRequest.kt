// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



public class ModifySubnetAttributeRequest private constructor(builder: Builder) {
    /**
     * Specify `true` to indicate that network interfaces created in the specified subnet should be assigned an IPv6 address. This includes a network interface that's created when launching an instance into the subnet (the instance therefore receives an IPv6 address).
     *
     * If you enable the IPv6 addressing feature for your subnet, your network interface or instance only receives an IPv6 address if it's created using version `2016-11-15` or later of the Amazon EC2 API.
     */
    public val assignIpv6AddressOnCreation: aws.sdk.kotlin.services.ec2.model.AttributeBooleanValue? = builder.assignIpv6AddressOnCreation
    /**
     * The customer-owned IPv4 address pool associated with the subnet.
     *
     * You must set this value when you specify `true` for `MapCustomerOwnedIpOnLaunch`.
     */
    public val customerOwnedIpv4Pool: kotlin.String? = builder.customerOwnedIpv4Pool
    /**
     * Specify `true` to indicate that local network interfaces at the current position should be disabled.
     */
    public val disableLniAtDeviceIndex: aws.sdk.kotlin.services.ec2.model.AttributeBooleanValue? = builder.disableLniAtDeviceIndex
    /**
     * Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations.
     */
    public val enableDns64: aws.sdk.kotlin.services.ec2.model.AttributeBooleanValue? = builder.enableDns64
    /**
     * Indicates the device position for local network interfaces in this subnet. For example, `1` indicates local network interfaces in this subnet are the secondary network interface (eth1). A local network interface cannot be the primary network interface (eth0).
     */
    public val enableLniAtDeviceIndex: kotlin.Int? = builder.enableLniAtDeviceIndex
    /**
     * Indicates whether to respond to DNS queries for instance hostnames with DNS A records.
     */
    public val enableResourceNameDnsARecordOnLaunch: aws.sdk.kotlin.services.ec2.model.AttributeBooleanValue? = builder.enableResourceNameDnsARecordOnLaunch
    /**
     * Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records.
     */
    public val enableResourceNameDnsAaaaRecordOnLaunch: aws.sdk.kotlin.services.ec2.model.AttributeBooleanValue? = builder.enableResourceNameDnsAaaaRecordOnLaunch
    /**
     * Specify `true` to indicate that network interfaces attached to instances created in the specified subnet should be assigned a customer-owned IPv4 address.
     *
     * When this value is `true`, you must specify the customer-owned IP pool using `CustomerOwnedIpv4Pool`.
     */
    public val mapCustomerOwnedIpOnLaunch: aws.sdk.kotlin.services.ec2.model.AttributeBooleanValue? = builder.mapCustomerOwnedIpOnLaunch
    /**
     * Specify `true` to indicate that network interfaces attached to instances created in the specified subnet should be assigned a public IPv4 address.
     */
    public val mapPublicIpOnLaunch: aws.sdk.kotlin.services.ec2.model.AttributeBooleanValue? = builder.mapPublicIpOnLaunch
    /**
     * The type of hostname to assign to instances in the subnet at launch. For IPv4-only and dual-stack (IPv4 and IPv6) subnets, an instance DNS name can be based on the instance IPv4 address (ip-name) or the instance ID (resource-name). For IPv6 only subnets, an instance DNS name must be based on the instance ID (resource-name).
     */
    public val privateDnsHostnameTypeOnLaunch: aws.sdk.kotlin.services.ec2.model.HostnameType? = builder.privateDnsHostnameTypeOnLaunch
    /**
     * The ID of the subnet.
     */
    public val subnetId: kotlin.String? = builder.subnetId

    public companion object {
        public operator fun invoke(block: Builder.() -> kotlin.Unit): aws.sdk.kotlin.services.ec2.model.ModifySubnetAttributeRequest = Builder().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("ModifySubnetAttributeRequest(")
        append("assignIpv6AddressOnCreation=$assignIpv6AddressOnCreation,")
        append("customerOwnedIpv4Pool=$customerOwnedIpv4Pool,")
        append("disableLniAtDeviceIndex=$disableLniAtDeviceIndex,")
        append("enableDns64=$enableDns64,")
        append("enableLniAtDeviceIndex=$enableLniAtDeviceIndex,")
        append("enableResourceNameDnsARecordOnLaunch=$enableResourceNameDnsARecordOnLaunch,")
        append("enableResourceNameDnsAaaaRecordOnLaunch=$enableResourceNameDnsAaaaRecordOnLaunch,")
        append("mapCustomerOwnedIpOnLaunch=$mapCustomerOwnedIpOnLaunch,")
        append("mapPublicIpOnLaunch=$mapPublicIpOnLaunch,")
        append("privateDnsHostnameTypeOnLaunch=$privateDnsHostnameTypeOnLaunch,")
        append("subnetId=$subnetId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = assignIpv6AddressOnCreation?.hashCode() ?: 0
        result = 31 * result + (customerOwnedIpv4Pool?.hashCode() ?: 0)
        result = 31 * result + (disableLniAtDeviceIndex?.hashCode() ?: 0)
        result = 31 * result + (enableDns64?.hashCode() ?: 0)
        result = 31 * result + (enableLniAtDeviceIndex ?: 0)
        result = 31 * result + (enableResourceNameDnsARecordOnLaunch?.hashCode() ?: 0)
        result = 31 * result + (enableResourceNameDnsAaaaRecordOnLaunch?.hashCode() ?: 0)
        result = 31 * result + (mapCustomerOwnedIpOnLaunch?.hashCode() ?: 0)
        result = 31 * result + (mapPublicIpOnLaunch?.hashCode() ?: 0)
        result = 31 * result + (privateDnsHostnameTypeOnLaunch?.hashCode() ?: 0)
        result = 31 * result + (subnetId?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as ModifySubnetAttributeRequest

        if (assignIpv6AddressOnCreation != other.assignIpv6AddressOnCreation) return false
        if (customerOwnedIpv4Pool != other.customerOwnedIpv4Pool) return false
        if (disableLniAtDeviceIndex != other.disableLniAtDeviceIndex) return false
        if (enableDns64 != other.enableDns64) return false
        if (enableLniAtDeviceIndex != other.enableLniAtDeviceIndex) return false
        if (enableResourceNameDnsARecordOnLaunch != other.enableResourceNameDnsARecordOnLaunch) return false
        if (enableResourceNameDnsAaaaRecordOnLaunch != other.enableResourceNameDnsAaaaRecordOnLaunch) return false
        if (mapCustomerOwnedIpOnLaunch != other.mapCustomerOwnedIpOnLaunch) return false
        if (mapPublicIpOnLaunch != other.mapPublicIpOnLaunch) return false
        if (privateDnsHostnameTypeOnLaunch != other.privateDnsHostnameTypeOnLaunch) return false
        if (subnetId != other.subnetId) return false

        return true
    }

    public inline fun copy(block: Builder.() -> kotlin.Unit = {}): aws.sdk.kotlin.services.ec2.model.ModifySubnetAttributeRequest = Builder(this).apply(block).build()

    public class Builder {
        /**
         * Specify `true` to indicate that network interfaces created in the specified subnet should be assigned an IPv6 address. This includes a network interface that's created when launching an instance into the subnet (the instance therefore receives an IPv6 address).
         *
         * If you enable the IPv6 addressing feature for your subnet, your network interface or instance only receives an IPv6 address if it's created using version `2016-11-15` or later of the Amazon EC2 API.
         */
        public var assignIpv6AddressOnCreation: aws.sdk.kotlin.services.ec2.model.AttributeBooleanValue? = null
        /**
         * The customer-owned IPv4 address pool associated with the subnet.
         *
         * You must set this value when you specify `true` for `MapCustomerOwnedIpOnLaunch`.
         */
        public var customerOwnedIpv4Pool: kotlin.String? = null
        /**
         * Specify `true` to indicate that local network interfaces at the current position should be disabled.
         */
        public var disableLniAtDeviceIndex: aws.sdk.kotlin.services.ec2.model.AttributeBooleanValue? = null
        /**
         * Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations.
         */
        public var enableDns64: aws.sdk.kotlin.services.ec2.model.AttributeBooleanValue? = null
        /**
         * Indicates the device position for local network interfaces in this subnet. For example, `1` indicates local network interfaces in this subnet are the secondary network interface (eth1). A local network interface cannot be the primary network interface (eth0).
         */
        public var enableLniAtDeviceIndex: kotlin.Int? = null
        /**
         * Indicates whether to respond to DNS queries for instance hostnames with DNS A records.
         */
        public var enableResourceNameDnsARecordOnLaunch: aws.sdk.kotlin.services.ec2.model.AttributeBooleanValue? = null
        /**
         * Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records.
         */
        public var enableResourceNameDnsAaaaRecordOnLaunch: aws.sdk.kotlin.services.ec2.model.AttributeBooleanValue? = null
        /**
         * Specify `true` to indicate that network interfaces attached to instances created in the specified subnet should be assigned a customer-owned IPv4 address.
         *
         * When this value is `true`, you must specify the customer-owned IP pool using `CustomerOwnedIpv4Pool`.
         */
        public var mapCustomerOwnedIpOnLaunch: aws.sdk.kotlin.services.ec2.model.AttributeBooleanValue? = null
        /**
         * Specify `true` to indicate that network interfaces attached to instances created in the specified subnet should be assigned a public IPv4 address.
         */
        public var mapPublicIpOnLaunch: aws.sdk.kotlin.services.ec2.model.AttributeBooleanValue? = null
        /**
         * The type of hostname to assign to instances in the subnet at launch. For IPv4-only and dual-stack (IPv4 and IPv6) subnets, an instance DNS name can be based on the instance IPv4 address (ip-name) or the instance ID (resource-name). For IPv6 only subnets, an instance DNS name must be based on the instance ID (resource-name).
         */
        public var privateDnsHostnameTypeOnLaunch: aws.sdk.kotlin.services.ec2.model.HostnameType? = null
        /**
         * The ID of the subnet.
         */
        public var subnetId: kotlin.String? = null

        @PublishedApi
        internal constructor()
        @PublishedApi
        internal constructor(x: aws.sdk.kotlin.services.ec2.model.ModifySubnetAttributeRequest) : this() {
            this.assignIpv6AddressOnCreation = x.assignIpv6AddressOnCreation
            this.customerOwnedIpv4Pool = x.customerOwnedIpv4Pool
            this.disableLniAtDeviceIndex = x.disableLniAtDeviceIndex
            this.enableDns64 = x.enableDns64
            this.enableLniAtDeviceIndex = x.enableLniAtDeviceIndex
            this.enableResourceNameDnsARecordOnLaunch = x.enableResourceNameDnsARecordOnLaunch
            this.enableResourceNameDnsAaaaRecordOnLaunch = x.enableResourceNameDnsAaaaRecordOnLaunch
            this.mapCustomerOwnedIpOnLaunch = x.mapCustomerOwnedIpOnLaunch
            this.mapPublicIpOnLaunch = x.mapPublicIpOnLaunch
            this.privateDnsHostnameTypeOnLaunch = x.privateDnsHostnameTypeOnLaunch
            this.subnetId = x.subnetId
        }

        @PublishedApi
        internal fun build(): aws.sdk.kotlin.services.ec2.model.ModifySubnetAttributeRequest = ModifySubnetAttributeRequest(this)

        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.AttributeBooleanValue] inside the given [block]
         */
        public fun assignIpv6AddressOnCreation(block: aws.sdk.kotlin.services.ec2.model.AttributeBooleanValue.Builder.() -> kotlin.Unit) {
            this.assignIpv6AddressOnCreation = aws.sdk.kotlin.services.ec2.model.AttributeBooleanValue.invoke(block)
        }

        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.AttributeBooleanValue] inside the given [block]
         */
        public fun disableLniAtDeviceIndex(block: aws.sdk.kotlin.services.ec2.model.AttributeBooleanValue.Builder.() -> kotlin.Unit) {
            this.disableLniAtDeviceIndex = aws.sdk.kotlin.services.ec2.model.AttributeBooleanValue.invoke(block)
        }

        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.AttributeBooleanValue] inside the given [block]
         */
        public fun enableDns64(block: aws.sdk.kotlin.services.ec2.model.AttributeBooleanValue.Builder.() -> kotlin.Unit) {
            this.enableDns64 = aws.sdk.kotlin.services.ec2.model.AttributeBooleanValue.invoke(block)
        }

        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.AttributeBooleanValue] inside the given [block]
         */
        public fun enableResourceNameDnsARecordOnLaunch(block: aws.sdk.kotlin.services.ec2.model.AttributeBooleanValue.Builder.() -> kotlin.Unit) {
            this.enableResourceNameDnsARecordOnLaunch = aws.sdk.kotlin.services.ec2.model.AttributeBooleanValue.invoke(block)
        }

        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.AttributeBooleanValue] inside the given [block]
         */
        public fun enableResourceNameDnsAaaaRecordOnLaunch(block: aws.sdk.kotlin.services.ec2.model.AttributeBooleanValue.Builder.() -> kotlin.Unit) {
            this.enableResourceNameDnsAaaaRecordOnLaunch = aws.sdk.kotlin.services.ec2.model.AttributeBooleanValue.invoke(block)
        }

        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.AttributeBooleanValue] inside the given [block]
         */
        public fun mapCustomerOwnedIpOnLaunch(block: aws.sdk.kotlin.services.ec2.model.AttributeBooleanValue.Builder.() -> kotlin.Unit) {
            this.mapCustomerOwnedIpOnLaunch = aws.sdk.kotlin.services.ec2.model.AttributeBooleanValue.invoke(block)
        }

        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.AttributeBooleanValue] inside the given [block]
         */
        public fun mapPublicIpOnLaunch(block: aws.sdk.kotlin.services.ec2.model.AttributeBooleanValue.Builder.() -> kotlin.Unit) {
            this.mapPublicIpOnLaunch = aws.sdk.kotlin.services.ec2.model.AttributeBooleanValue.invoke(block)
        }
    }
}
