// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.transform

import aws.sdk.kotlin.services.ec2.model.IcmpTypeCode
import aws.sdk.kotlin.services.ec2.model.PortRange
import aws.sdk.kotlin.services.ec2.model.ReplaceNetworkAclEntryRequest
import aws.sdk.kotlin.services.ec2.model.RuleAction
import aws.smithy.kotlin.runtime.client.ExecutionContext
import aws.smithy.kotlin.runtime.http.HttpBody
import aws.smithy.kotlin.runtime.http.HttpMethod
import aws.smithy.kotlin.runtime.http.content.ByteArrayContent
import aws.smithy.kotlin.runtime.http.operation.HttpSerialize
import aws.smithy.kotlin.runtime.http.request.HttpRequestBuilder
import aws.smithy.kotlin.runtime.http.request.url
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.formurl.FormUrlSerialName
import aws.smithy.kotlin.runtime.serde.formurl.FormUrlSerializer
import aws.smithy.kotlin.runtime.serde.formurl.QueryLiteral
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct


internal class ReplaceNetworkAclEntryOperationSerializer: HttpSerialize<ReplaceNetworkAclEntryRequest> {
    override suspend fun serialize(context: ExecutionContext, input: ReplaceNetworkAclEntryRequest): HttpRequestBuilder {
        val builder = HttpRequestBuilder()
        builder.method = HttpMethod.POST

        builder.url {
            path = "/"
        }

        val payload = serializeReplaceNetworkAclEntryOperationBody(context, input)
        builder.body = ByteArrayContent(payload)
        if (builder.body !is HttpBody.Empty) {
            builder.headers.setMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        return builder
    }
}

private fun serializeReplaceNetworkAclEntryOperationBody(context: ExecutionContext, input: ReplaceNetworkAclEntryRequest): ByteArray {
    val serializer = FormUrlSerializer()
    val CIDRBLOCK_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, FormUrlSerialName("CidrBlock"))
    val DRYRUN_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Boolean, FormUrlSerialName("DryRun"))
    val EGRESS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Boolean, FormUrlSerialName("Egress"))
    val ICMPTYPECODE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, FormUrlSerialName("Icmp"))
    val IPV6CIDRBLOCK_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, FormUrlSerialName("Ipv6CidrBlock"))
    val NETWORKACLID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, FormUrlSerialName("NetworkAclId"))
    val PORTRANGE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, FormUrlSerialName("PortRange"))
    val PROTOCOL_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, FormUrlSerialName("Protocol"))
    val RULEACTION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, FormUrlSerialName("RuleAction"))
    val RULENUMBER_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, FormUrlSerialName("RuleNumber"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(FormUrlSerialName("ReplaceNetworkAclEntryRequest"))
        trait(QueryLiteral("Action", "ReplaceNetworkAclEntry"))
        trait(QueryLiteral("Version", "2016-11-15"))
        field(CIDRBLOCK_DESCRIPTOR)
        field(DRYRUN_DESCRIPTOR)
        field(EGRESS_DESCRIPTOR)
        field(ICMPTYPECODE_DESCRIPTOR)
        field(IPV6CIDRBLOCK_DESCRIPTOR)
        field(NETWORKACLID_DESCRIPTOR)
        field(PORTRANGE_DESCRIPTOR)
        field(PROTOCOL_DESCRIPTOR)
        field(RULEACTION_DESCRIPTOR)
        field(RULENUMBER_DESCRIPTOR)
    }

    serializer.serializeStruct(OBJ_DESCRIPTOR) {
        input.cidrBlock?.let { field(CIDRBLOCK_DESCRIPTOR, it) }
        input.dryRun?.let { field(DRYRUN_DESCRIPTOR, it) }
        input.egress?.let { field(EGRESS_DESCRIPTOR, it) }
        input.icmpTypeCode?.let { field(ICMPTYPECODE_DESCRIPTOR, it, ::serializeIcmpTypeCodeDocument) }
        input.ipv6CidrBlock?.let { field(IPV6CIDRBLOCK_DESCRIPTOR, it) }
        input.networkAclId?.let { field(NETWORKACLID_DESCRIPTOR, it) }
        input.portRange?.let { field(PORTRANGE_DESCRIPTOR, it, ::serializePortRangeDocument) }
        input.protocol?.let { field(PROTOCOL_DESCRIPTOR, it) }
        input.ruleAction?.let { field(RULEACTION_DESCRIPTOR, it.value) }
        input.ruleNumber?.let { field(RULENUMBER_DESCRIPTOR, it) }
    }
    return serializer.toByteArray()
}
