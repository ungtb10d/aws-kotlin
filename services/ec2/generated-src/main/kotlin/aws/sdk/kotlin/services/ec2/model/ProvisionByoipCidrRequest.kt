// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



public class ProvisionByoipCidrRequest private constructor(builder: Builder) {
    /**
     * The public IPv4 or IPv6 address range, in CIDR notation. The most specific IPv4 prefix that you can specify is /24. The most specific IPv6 prefix you can specify is /56. The address range cannot overlap with another address range that you've brought to this or another Region.
     */
    public val cidr: kotlin.String? = builder.cidr
    /**
     * A signed document that proves that you are authorized to bring the specified IP address range to Amazon using BYOIP.
     */
    public val cidrAuthorizationContext: aws.sdk.kotlin.services.ec2.model.CidrAuthorizationContext? = builder.cidrAuthorizationContext
    /**
     * A description for the address range and the address pool.
     */
    public val description: kotlin.String? = builder.description
    /**
     * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is `DryRunOperation`. Otherwise, it is `UnauthorizedOperation`.
     */
    public val dryRun: kotlin.Boolean? = builder.dryRun
    /**
     * Reserved.
     */
    public val multiRegion: kotlin.Boolean? = builder.multiRegion
    /**
     * The tags to apply to the address pool.
     */
    public val poolTagSpecifications: List<TagSpecification>? = builder.poolTagSpecifications
    /**
     * (IPv6 only) Indicate whether the address range will be publicly advertised to the internet.
     *
     * Default: true
     */
    public val publiclyAdvertisable: kotlin.Boolean? = builder.publiclyAdvertisable

    public companion object {
        public operator fun invoke(block: Builder.() -> kotlin.Unit): aws.sdk.kotlin.services.ec2.model.ProvisionByoipCidrRequest = Builder().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("ProvisionByoipCidrRequest(")
        append("cidr=$cidr,")
        append("cidrAuthorizationContext=$cidrAuthorizationContext,")
        append("description=$description,")
        append("dryRun=$dryRun,")
        append("multiRegion=$multiRegion,")
        append("poolTagSpecifications=$poolTagSpecifications,")
        append("publiclyAdvertisable=$publiclyAdvertisable)")
    }

    override fun hashCode(): kotlin.Int {
        var result = cidr?.hashCode() ?: 0
        result = 31 * result + (cidrAuthorizationContext?.hashCode() ?: 0)
        result = 31 * result + (description?.hashCode() ?: 0)
        result = 31 * result + (dryRun?.hashCode() ?: 0)
        result = 31 * result + (multiRegion?.hashCode() ?: 0)
        result = 31 * result + (poolTagSpecifications?.hashCode() ?: 0)
        result = 31 * result + (publiclyAdvertisable?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as ProvisionByoipCidrRequest

        if (cidr != other.cidr) return false
        if (cidrAuthorizationContext != other.cidrAuthorizationContext) return false
        if (description != other.description) return false
        if (dryRun != other.dryRun) return false
        if (multiRegion != other.multiRegion) return false
        if (poolTagSpecifications != other.poolTagSpecifications) return false
        if (publiclyAdvertisable != other.publiclyAdvertisable) return false

        return true
    }

    public inline fun copy(block: Builder.() -> kotlin.Unit = {}): aws.sdk.kotlin.services.ec2.model.ProvisionByoipCidrRequest = Builder(this).apply(block).build()

    public class Builder {
        /**
         * The public IPv4 or IPv6 address range, in CIDR notation. The most specific IPv4 prefix that you can specify is /24. The most specific IPv6 prefix you can specify is /56. The address range cannot overlap with another address range that you've brought to this or another Region.
         */
        public var cidr: kotlin.String? = null
        /**
         * A signed document that proves that you are authorized to bring the specified IP address range to Amazon using BYOIP.
         */
        public var cidrAuthorizationContext: aws.sdk.kotlin.services.ec2.model.CidrAuthorizationContext? = null
        /**
         * A description for the address range and the address pool.
         */
        public var description: kotlin.String? = null
        /**
         * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is `DryRunOperation`. Otherwise, it is `UnauthorizedOperation`.
         */
        public var dryRun: kotlin.Boolean? = null
        /**
         * Reserved.
         */
        public var multiRegion: kotlin.Boolean? = null
        /**
         * The tags to apply to the address pool.
         */
        public var poolTagSpecifications: List<TagSpecification>? = null
        /**
         * (IPv6 only) Indicate whether the address range will be publicly advertised to the internet.
         *
         * Default: true
         */
        public var publiclyAdvertisable: kotlin.Boolean? = null

        @PublishedApi
        internal constructor()
        @PublishedApi
        internal constructor(x: aws.sdk.kotlin.services.ec2.model.ProvisionByoipCidrRequest) : this() {
            this.cidr = x.cidr
            this.cidrAuthorizationContext = x.cidrAuthorizationContext
            this.description = x.description
            this.dryRun = x.dryRun
            this.multiRegion = x.multiRegion
            this.poolTagSpecifications = x.poolTagSpecifications
            this.publiclyAdvertisable = x.publiclyAdvertisable
        }

        @PublishedApi
        internal fun build(): aws.sdk.kotlin.services.ec2.model.ProvisionByoipCidrRequest = ProvisionByoipCidrRequest(this)

        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.CidrAuthorizationContext] inside the given [block]
         */
        public fun cidrAuthorizationContext(block: aws.sdk.kotlin.services.ec2.model.CidrAuthorizationContext.Builder.() -> kotlin.Unit) {
            this.cidrAuthorizationContext = aws.sdk.kotlin.services.ec2.model.CidrAuthorizationContext.invoke(block)
        }
    }
}
