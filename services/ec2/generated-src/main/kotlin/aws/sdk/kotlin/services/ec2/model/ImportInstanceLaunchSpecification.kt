// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes the launch specification for VM import.
 */
public class ImportInstanceLaunchSpecification private constructor(builder: Builder) {
    /**
     * Reserved.
     */
    public val additionalInfo: kotlin.String? = builder.additionalInfo
    /**
     * The architecture of the instance.
     */
    public val architecture: aws.sdk.kotlin.services.ec2.model.ArchitectureValues? = builder.architecture
    /**
     * The security group IDs.
     */
    public val groupIds: List<String>? = builder.groupIds
    /**
     * The security group names.
     */
    public val groupNames: List<String>? = builder.groupNames
    /**
     * Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).
     */
    public val instanceInitiatedShutdownBehavior: aws.sdk.kotlin.services.ec2.model.ShutdownBehavior? = builder.instanceInitiatedShutdownBehavior
    /**
     * The instance type. For more information about the instance types that you can import, see [Instance Types](https://docs.aws.amazon.com/vm-import/latest/userguide/vmie_prereqs.html#vmimport-instance-types) in the VM Import/Export User Guide.
     */
    public val instanceType: aws.sdk.kotlin.services.ec2.model.InstanceType? = builder.instanceType
    /**
     * Indicates whether monitoring is enabled.
     */
    public val monitoring: kotlin.Boolean? = builder.monitoring
    /**
     * The placement information for the instance.
     */
    public val placement: aws.sdk.kotlin.services.ec2.model.Placement? = builder.placement
    /**
     * &#91;EC2-VPC&#93; An available IP address from the IP address range of the subnet.
     */
    public val privateIpAddress: kotlin.String? = builder.privateIpAddress
    /**
     * &#91;EC2-VPC&#93; The ID of the subnet in which to launch the instance.
     */
    public val subnetId: kotlin.String? = builder.subnetId
    /**
     * The Base64-encoded user data to make available to the instance.
     */
    public val userData: aws.sdk.kotlin.services.ec2.model.UserData? = builder.userData

    public companion object {
        public operator fun invoke(block: Builder.() -> kotlin.Unit): aws.sdk.kotlin.services.ec2.model.ImportInstanceLaunchSpecification = Builder().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("ImportInstanceLaunchSpecification(")
        append("additionalInfo=$additionalInfo,")
        append("architecture=$architecture,")
        append("groupIds=$groupIds,")
        append("groupNames=$groupNames,")
        append("instanceInitiatedShutdownBehavior=$instanceInitiatedShutdownBehavior,")
        append("instanceType=$instanceType,")
        append("monitoring=$monitoring,")
        append("placement=$placement,")
        append("privateIpAddress=$privateIpAddress,")
        append("subnetId=$subnetId,")
        append("userData=*** Sensitive Data Redacted ***)")
    }

    override fun hashCode(): kotlin.Int {
        var result = additionalInfo?.hashCode() ?: 0
        result = 31 * result + (architecture?.hashCode() ?: 0)
        result = 31 * result + (groupIds?.hashCode() ?: 0)
        result = 31 * result + (groupNames?.hashCode() ?: 0)
        result = 31 * result + (instanceInitiatedShutdownBehavior?.hashCode() ?: 0)
        result = 31 * result + (instanceType?.hashCode() ?: 0)
        result = 31 * result + (monitoring?.hashCode() ?: 0)
        result = 31 * result + (placement?.hashCode() ?: 0)
        result = 31 * result + (privateIpAddress?.hashCode() ?: 0)
        result = 31 * result + (subnetId?.hashCode() ?: 0)
        result = 31 * result + (userData?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as ImportInstanceLaunchSpecification

        if (additionalInfo != other.additionalInfo) return false
        if (architecture != other.architecture) return false
        if (groupIds != other.groupIds) return false
        if (groupNames != other.groupNames) return false
        if (instanceInitiatedShutdownBehavior != other.instanceInitiatedShutdownBehavior) return false
        if (instanceType != other.instanceType) return false
        if (monitoring != other.monitoring) return false
        if (placement != other.placement) return false
        if (privateIpAddress != other.privateIpAddress) return false
        if (subnetId != other.subnetId) return false
        if (userData != other.userData) return false

        return true
    }

    public inline fun copy(block: Builder.() -> kotlin.Unit = {}): aws.sdk.kotlin.services.ec2.model.ImportInstanceLaunchSpecification = Builder(this).apply(block).build()

    public class Builder {
        /**
         * Reserved.
         */
        public var additionalInfo: kotlin.String? = null
        /**
         * The architecture of the instance.
         */
        public var architecture: aws.sdk.kotlin.services.ec2.model.ArchitectureValues? = null
        /**
         * The security group IDs.
         */
        public var groupIds: List<String>? = null
        /**
         * The security group names.
         */
        public var groupNames: List<String>? = null
        /**
         * Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).
         */
        public var instanceInitiatedShutdownBehavior: aws.sdk.kotlin.services.ec2.model.ShutdownBehavior? = null
        /**
         * The instance type. For more information about the instance types that you can import, see [Instance Types](https://docs.aws.amazon.com/vm-import/latest/userguide/vmie_prereqs.html#vmimport-instance-types) in the VM Import/Export User Guide.
         */
        public var instanceType: aws.sdk.kotlin.services.ec2.model.InstanceType? = null
        /**
         * Indicates whether monitoring is enabled.
         */
        public var monitoring: kotlin.Boolean? = null
        /**
         * The placement information for the instance.
         */
        public var placement: aws.sdk.kotlin.services.ec2.model.Placement? = null
        /**
         * &#91;EC2-VPC&#93; An available IP address from the IP address range of the subnet.
         */
        public var privateIpAddress: kotlin.String? = null
        /**
         * &#91;EC2-VPC&#93; The ID of the subnet in which to launch the instance.
         */
        public var subnetId: kotlin.String? = null
        /**
         * The Base64-encoded user data to make available to the instance.
         */
        public var userData: aws.sdk.kotlin.services.ec2.model.UserData? = null

        @PublishedApi
        internal constructor()
        @PublishedApi
        internal constructor(x: aws.sdk.kotlin.services.ec2.model.ImportInstanceLaunchSpecification) : this() {
            this.additionalInfo = x.additionalInfo
            this.architecture = x.architecture
            this.groupIds = x.groupIds
            this.groupNames = x.groupNames
            this.instanceInitiatedShutdownBehavior = x.instanceInitiatedShutdownBehavior
            this.instanceType = x.instanceType
            this.monitoring = x.monitoring
            this.placement = x.placement
            this.privateIpAddress = x.privateIpAddress
            this.subnetId = x.subnetId
            this.userData = x.userData
        }

        @PublishedApi
        internal fun build(): aws.sdk.kotlin.services.ec2.model.ImportInstanceLaunchSpecification = ImportInstanceLaunchSpecification(this)

        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.Placement] inside the given [block]
         */
        public fun placement(block: aws.sdk.kotlin.services.ec2.model.Placement.Builder.() -> kotlin.Unit) {
            this.placement = aws.sdk.kotlin.services.ec2.model.Placement.invoke(block)
        }

        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.UserData] inside the given [block]
         */
        public fun userData(block: aws.sdk.kotlin.services.ec2.model.UserData.Builder.() -> kotlin.Unit) {
            this.userData = aws.sdk.kotlin.services.ec2.model.UserData.invoke(block)
        }
    }
}
