// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.transform

import aws.sdk.kotlin.services.ec2.model.ContainerFormat
import aws.sdk.kotlin.services.ec2.model.DiskImageFormat
import aws.sdk.kotlin.services.ec2.model.ExportToS3Task
import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.serde.xml.XmlDeserializer
import aws.smithy.kotlin.runtime.serde.xml.XmlNamespace
import aws.smithy.kotlin.runtime.serde.xml.XmlSerialName

internal fun deserializeExportToS3TaskDocument(deserializer: Deserializer): ExportToS3Task {
    val builder = ExportToS3Task.Builder()
    val CONTAINERFORMAT_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("containerFormat"))
    val DISKIMAGEFORMAT_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("diskImageFormat"))
    val S3BUCKET_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("s3Bucket"))
    val S3KEY_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("s3Key"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(XmlSerialName("ExportToS3Task"))
        trait(XmlNamespace("http://ec2.amazonaws.com/doc/2016-11-15"))
        field(CONTAINERFORMAT_DESCRIPTOR)
        field(DISKIMAGEFORMAT_DESCRIPTOR)
        field(S3BUCKET_DESCRIPTOR)
        field(S3KEY_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                CONTAINERFORMAT_DESCRIPTOR.index -> builder.containerFormat = deserializeString().let { ContainerFormat.fromValue(it) }
                DISKIMAGEFORMAT_DESCRIPTOR.index -> builder.diskImageFormat = deserializeString().let { DiskImageFormat.fromValue(it) }
                S3BUCKET_DESCRIPTOR.index -> builder.s3Bucket = deserializeString()
                S3KEY_DESCRIPTOR.index -> builder.s3Key = deserializeString()
                null -> break@loop
                else -> skipValue()
            }
        }
    }
    return builder.build()
}
