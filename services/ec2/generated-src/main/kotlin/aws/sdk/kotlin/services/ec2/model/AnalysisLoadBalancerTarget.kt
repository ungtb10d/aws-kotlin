// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes a load balancer target.
 */
public class AnalysisLoadBalancerTarget private constructor(builder: Builder) {
    /**
     * The IP address.
     */
    public val address: kotlin.String? = builder.address
    /**
     * The Availability Zone.
     */
    public val availabilityZone: kotlin.String? = builder.availabilityZone
    /**
     * Information about the instance.
     */
    public val instance: aws.sdk.kotlin.services.ec2.model.AnalysisComponent? = builder.instance
    /**
     * The port on which the target is listening.
     */
    public val port: kotlin.Int? = builder.port

    public companion object {
        public operator fun invoke(block: Builder.() -> kotlin.Unit): aws.sdk.kotlin.services.ec2.model.AnalysisLoadBalancerTarget = Builder().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("AnalysisLoadBalancerTarget(")
        append("address=$address,")
        append("availabilityZone=$availabilityZone,")
        append("instance=$instance,")
        append("port=$port)")
    }

    override fun hashCode(): kotlin.Int {
        var result = address?.hashCode() ?: 0
        result = 31 * result + (availabilityZone?.hashCode() ?: 0)
        result = 31 * result + (instance?.hashCode() ?: 0)
        result = 31 * result + (port ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as AnalysisLoadBalancerTarget

        if (address != other.address) return false
        if (availabilityZone != other.availabilityZone) return false
        if (instance != other.instance) return false
        if (port != other.port) return false

        return true
    }

    public inline fun copy(block: Builder.() -> kotlin.Unit = {}): aws.sdk.kotlin.services.ec2.model.AnalysisLoadBalancerTarget = Builder(this).apply(block).build()

    public class Builder {
        /**
         * The IP address.
         */
        public var address: kotlin.String? = null
        /**
         * The Availability Zone.
         */
        public var availabilityZone: kotlin.String? = null
        /**
         * Information about the instance.
         */
        public var instance: aws.sdk.kotlin.services.ec2.model.AnalysisComponent? = null
        /**
         * The port on which the target is listening.
         */
        public var port: kotlin.Int? = null

        @PublishedApi
        internal constructor()
        @PublishedApi
        internal constructor(x: aws.sdk.kotlin.services.ec2.model.AnalysisLoadBalancerTarget) : this() {
            this.address = x.address
            this.availabilityZone = x.availabilityZone
            this.instance = x.instance
            this.port = x.port
        }

        @PublishedApi
        internal fun build(): aws.sdk.kotlin.services.ec2.model.AnalysisLoadBalancerTarget = AnalysisLoadBalancerTarget(this)

        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.AnalysisComponent] inside the given [block]
         */
        public fun instance(block: aws.sdk.kotlin.services.ec2.model.AnalysisComponent.Builder.() -> kotlin.Unit) {
            this.instance = aws.sdk.kotlin.services.ec2.model.AnalysisComponent.invoke(block)
        }
    }
}
