// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes the data feed for a Spot Instance.
 */
public class SpotDatafeedSubscription private constructor(builder: Builder) {
    /**
     * The name of the Amazon S3 bucket where the Spot Instance data feed is located.
     */
    public val bucket: kotlin.String? = builder.bucket
    /**
     * The fault codes for the Spot Instance request, if any.
     */
    public val fault: aws.sdk.kotlin.services.ec2.model.SpotInstanceStateFault? = builder.fault
    /**
     * The Amazon Web Services account ID of the account.
     */
    public val ownerId: kotlin.String? = builder.ownerId
    /**
     * The prefix for the data feed files.
     */
    public val prefix: kotlin.String? = builder.prefix
    /**
     * The state of the Spot Instance data feed subscription.
     */
    public val state: aws.sdk.kotlin.services.ec2.model.DatafeedSubscriptionState? = builder.state

    public companion object {
        public operator fun invoke(block: Builder.() -> kotlin.Unit): aws.sdk.kotlin.services.ec2.model.SpotDatafeedSubscription = Builder().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("SpotDatafeedSubscription(")
        append("bucket=$bucket,")
        append("fault=$fault,")
        append("ownerId=$ownerId,")
        append("prefix=$prefix,")
        append("state=$state)")
    }

    override fun hashCode(): kotlin.Int {
        var result = bucket?.hashCode() ?: 0
        result = 31 * result + (fault?.hashCode() ?: 0)
        result = 31 * result + (ownerId?.hashCode() ?: 0)
        result = 31 * result + (prefix?.hashCode() ?: 0)
        result = 31 * result + (state?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as SpotDatafeedSubscription

        if (bucket != other.bucket) return false
        if (fault != other.fault) return false
        if (ownerId != other.ownerId) return false
        if (prefix != other.prefix) return false
        if (state != other.state) return false

        return true
    }

    public inline fun copy(block: Builder.() -> kotlin.Unit = {}): aws.sdk.kotlin.services.ec2.model.SpotDatafeedSubscription = Builder(this).apply(block).build()

    public class Builder {
        /**
         * The name of the Amazon S3 bucket where the Spot Instance data feed is located.
         */
        public var bucket: kotlin.String? = null
        /**
         * The fault codes for the Spot Instance request, if any.
         */
        public var fault: aws.sdk.kotlin.services.ec2.model.SpotInstanceStateFault? = null
        /**
         * The Amazon Web Services account ID of the account.
         */
        public var ownerId: kotlin.String? = null
        /**
         * The prefix for the data feed files.
         */
        public var prefix: kotlin.String? = null
        /**
         * The state of the Spot Instance data feed subscription.
         */
        public var state: aws.sdk.kotlin.services.ec2.model.DatafeedSubscriptionState? = null

        @PublishedApi
        internal constructor()
        @PublishedApi
        internal constructor(x: aws.sdk.kotlin.services.ec2.model.SpotDatafeedSubscription) : this() {
            this.bucket = x.bucket
            this.fault = x.fault
            this.ownerId = x.ownerId
            this.prefix = x.prefix
            this.state = x.state
        }

        @PublishedApi
        internal fun build(): aws.sdk.kotlin.services.ec2.model.SpotDatafeedSubscription = SpotDatafeedSubscription(this)

        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.SpotInstanceStateFault] inside the given [block]
         */
        public fun fault(block: aws.sdk.kotlin.services.ec2.model.SpotInstanceStateFault.Builder.() -> kotlin.Unit) {
            this.fault = aws.sdk.kotlin.services.ec2.model.SpotInstanceStateFault.invoke(block)
        }
    }
}
