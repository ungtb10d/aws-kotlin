// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.transform

import aws.sdk.kotlin.services.ec2.model.GroupIdentifier
import aws.sdk.kotlin.services.ec2.model.InstanceIpv4Prefix
import aws.sdk.kotlin.services.ec2.model.InstanceIpv6Address
import aws.sdk.kotlin.services.ec2.model.InstanceIpv6Prefix
import aws.sdk.kotlin.services.ec2.model.InstanceNetworkInterface
import aws.sdk.kotlin.services.ec2.model.InstancePrivateIpAddress
import aws.sdk.kotlin.services.ec2.model.NetworkInterfaceStatus
import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.serde.xml.XmlCollectionName
import aws.smithy.kotlin.runtime.serde.xml.XmlDeserializer
import aws.smithy.kotlin.runtime.serde.xml.XmlNamespace
import aws.smithy.kotlin.runtime.serde.xml.XmlSerialName

internal fun deserializeInstanceNetworkInterfaceDocument(deserializer: Deserializer): InstanceNetworkInterface {
    val builder = InstanceNetworkInterface.Builder()
    val ASSOCIATION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("association"))
    val ATTACHMENT_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("attachment"))
    val DESCRIPTION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("description"))
    val GROUPS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("groupSet"), XmlCollectionName("item"))
    val INTERFACETYPE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("interfaceType"))
    val IPV4PREFIXES_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("ipv4PrefixSet"), XmlCollectionName("item"))
    val IPV6ADDRESSES_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("ipv6AddressesSet"), XmlCollectionName("item"))
    val IPV6PREFIXES_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("ipv6PrefixSet"), XmlCollectionName("item"))
    val MACADDRESS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("macAddress"))
    val NETWORKINTERFACEID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("networkInterfaceId"))
    val OWNERID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("ownerId"))
    val PRIVATEDNSNAME_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("privateDnsName"))
    val PRIVATEIPADDRESS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("privateIpAddress"))
    val PRIVATEIPADDRESSES_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("privateIpAddressesSet"), XmlCollectionName("item"))
    val SOURCEDESTCHECK_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Boolean, XmlSerialName("sourceDestCheck"))
    val STATUS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Enum, XmlSerialName("status"))
    val SUBNETID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("subnetId"))
    val VPCID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("vpcId"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(XmlSerialName("InstanceNetworkInterface"))
        trait(XmlNamespace("http://ec2.amazonaws.com/doc/2016-11-15"))
        field(ASSOCIATION_DESCRIPTOR)
        field(ATTACHMENT_DESCRIPTOR)
        field(DESCRIPTION_DESCRIPTOR)
        field(GROUPS_DESCRIPTOR)
        field(INTERFACETYPE_DESCRIPTOR)
        field(IPV4PREFIXES_DESCRIPTOR)
        field(IPV6ADDRESSES_DESCRIPTOR)
        field(IPV6PREFIXES_DESCRIPTOR)
        field(MACADDRESS_DESCRIPTOR)
        field(NETWORKINTERFACEID_DESCRIPTOR)
        field(OWNERID_DESCRIPTOR)
        field(PRIVATEDNSNAME_DESCRIPTOR)
        field(PRIVATEIPADDRESS_DESCRIPTOR)
        field(PRIVATEIPADDRESSES_DESCRIPTOR)
        field(SOURCEDESTCHECK_DESCRIPTOR)
        field(STATUS_DESCRIPTOR)
        field(SUBNETID_DESCRIPTOR)
        field(VPCID_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                ASSOCIATION_DESCRIPTOR.index -> builder.association = deserializeInstanceNetworkInterfaceAssociationDocument(deserializer)
                ATTACHMENT_DESCRIPTOR.index -> builder.attachment = deserializeInstanceNetworkInterfaceAttachmentDocument(deserializer)
                DESCRIPTION_DESCRIPTOR.index -> builder.description = deserializeString()
                GROUPS_DESCRIPTOR.index -> builder.groups =
                    deserializer.deserializeList(GROUPS_DESCRIPTOR) {
                        val col0 = mutableListOf<GroupIdentifier>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeGroupIdentifierDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                INTERFACETYPE_DESCRIPTOR.index -> builder.interfaceType = deserializeString()
                IPV4PREFIXES_DESCRIPTOR.index -> builder.ipv4Prefixes =
                    deserializer.deserializeList(IPV4PREFIXES_DESCRIPTOR) {
                        val col0 = mutableListOf<InstanceIpv4Prefix>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeInstanceIpv4PrefixDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                IPV6ADDRESSES_DESCRIPTOR.index -> builder.ipv6Addresses =
                    deserializer.deserializeList(IPV6ADDRESSES_DESCRIPTOR) {
                        val col0 = mutableListOf<InstanceIpv6Address>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeInstanceIpv6AddressDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                IPV6PREFIXES_DESCRIPTOR.index -> builder.ipv6Prefixes =
                    deserializer.deserializeList(IPV6PREFIXES_DESCRIPTOR) {
                        val col0 = mutableListOf<InstanceIpv6Prefix>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeInstanceIpv6PrefixDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                MACADDRESS_DESCRIPTOR.index -> builder.macAddress = deserializeString()
                NETWORKINTERFACEID_DESCRIPTOR.index -> builder.networkInterfaceId = deserializeString()
                OWNERID_DESCRIPTOR.index -> builder.ownerId = deserializeString()
                PRIVATEDNSNAME_DESCRIPTOR.index -> builder.privateDnsName = deserializeString()
                PRIVATEIPADDRESS_DESCRIPTOR.index -> builder.privateIpAddress = deserializeString()
                PRIVATEIPADDRESSES_DESCRIPTOR.index -> builder.privateIpAddresses =
                    deserializer.deserializeList(PRIVATEIPADDRESSES_DESCRIPTOR) {
                        val col0 = mutableListOf<InstancePrivateIpAddress>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeInstancePrivateIpAddressDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                SOURCEDESTCHECK_DESCRIPTOR.index -> builder.sourceDestCheck = deserializeBoolean()
                STATUS_DESCRIPTOR.index -> builder.status = deserializeString().let { NetworkInterfaceStatus.fromValue(it) }
                SUBNETID_DESCRIPTOR.index -> builder.subnetId = deserializeString()
                VPCID_DESCRIPTOR.index -> builder.vpcId = deserializeString()
                null -> break@loop
                else -> skipValue()
            }
        }
    }
    return builder.build()
}
