// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes a state change.
 */
public class StateReason private constructor(builder: Builder) {
    /**
     * The reason code for the state change.
     */
    public val code: kotlin.String? = builder.code
    /**
     * The message for the state change.
     * + `Server.InsufficientInstanceCapacity`: There was insufficient capacity available to satisfy the launch request.
     * + `Server.InternalError`: An internal error caused the instance to terminate during launch.
     * + `Server.ScheduledStop`: The instance was stopped due to a scheduled retirement.
     * + `Server.SpotInstanceShutdown`: The instance was stopped because the number of Spot requests with a maximum price equal to or higher than the Spot price exceeded available capacity or because of an increase in the Spot price.
     * + `Server.SpotInstanceTermination`: The instance was terminated because the number of Spot requests with a maximum price equal to or higher than the Spot price exceeded available capacity or because of an increase in the Spot price.
     * + `Client.InstanceInitiatedShutdown`: The instance was shut down using the `shutdown -h` command from the instance.
     * + `Client.InstanceTerminated`: The instance was terminated or rebooted during AMI creation.
     * + `Client.InternalError`: A client error caused the instance to terminate during launch.
     * + `Client.InvalidSnapshot.NotFound`: The specified snapshot was not found.
     * + `Client.UserInitiatedHibernate`: Hibernation was initiated on the instance.
     * + `Client.UserInitiatedShutdown`: The instance was shut down using the Amazon EC2 API.
     * + `Client.VolumeLimitExceeded`: The limit on the number of EBS volumes or total storage was exceeded. Decrease usage or request an increase in your account limits.
     */
    public val message: kotlin.String? = builder.message

    public companion object {
        public operator fun invoke(block: Builder.() -> kotlin.Unit): aws.sdk.kotlin.services.ec2.model.StateReason = Builder().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("StateReason(")
        append("code=$code,")
        append("message=$message)")
    }

    override fun hashCode(): kotlin.Int {
        var result = code?.hashCode() ?: 0
        result = 31 * result + (message?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as StateReason

        if (code != other.code) return false
        if (message != other.message) return false

        return true
    }

    public inline fun copy(block: Builder.() -> kotlin.Unit = {}): aws.sdk.kotlin.services.ec2.model.StateReason = Builder(this).apply(block).build()

    public class Builder {
        /**
         * The reason code for the state change.
         */
        public var code: kotlin.String? = null
        /**
         * The message for the state change.
         * + `Server.InsufficientInstanceCapacity`: There was insufficient capacity available to satisfy the launch request.
         * + `Server.InternalError`: An internal error caused the instance to terminate during launch.
         * + `Server.ScheduledStop`: The instance was stopped due to a scheduled retirement.
         * + `Server.SpotInstanceShutdown`: The instance was stopped because the number of Spot requests with a maximum price equal to or higher than the Spot price exceeded available capacity or because of an increase in the Spot price.
         * + `Server.SpotInstanceTermination`: The instance was terminated because the number of Spot requests with a maximum price equal to or higher than the Spot price exceeded available capacity or because of an increase in the Spot price.
         * + `Client.InstanceInitiatedShutdown`: The instance was shut down using the `shutdown -h` command from the instance.
         * + `Client.InstanceTerminated`: The instance was terminated or rebooted during AMI creation.
         * + `Client.InternalError`: A client error caused the instance to terminate during launch.
         * + `Client.InvalidSnapshot.NotFound`: The specified snapshot was not found.
         * + `Client.UserInitiatedHibernate`: Hibernation was initiated on the instance.
         * + `Client.UserInitiatedShutdown`: The instance was shut down using the Amazon EC2 API.
         * + `Client.VolumeLimitExceeded`: The limit on the number of EBS volumes or total storage was exceeded. Decrease usage or request an increase in your account limits.
         */
        public var message: kotlin.String? = null

        @PublishedApi
        internal constructor()
        @PublishedApi
        internal constructor(x: aws.sdk.kotlin.services.ec2.model.StateReason) : this() {
            this.code = x.code
            this.message = x.message
        }

        @PublishedApi
        internal fun build(): aws.sdk.kotlin.services.ec2.model.StateReason = StateReason(this)
    }
}
