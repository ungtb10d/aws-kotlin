// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.transform

import aws.sdk.kotlin.services.ec2.model.Tag
import aws.sdk.kotlin.services.ec2.model.TrafficMirrorFilter
import aws.sdk.kotlin.services.ec2.model.TrafficMirrorFilterRule
import aws.sdk.kotlin.services.ec2.model.TrafficMirrorNetworkService
import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.serde.xml.XmlCollectionName
import aws.smithy.kotlin.runtime.serde.xml.XmlDeserializer
import aws.smithy.kotlin.runtime.serde.xml.XmlNamespace
import aws.smithy.kotlin.runtime.serde.xml.XmlSerialName

internal fun deserializeTrafficMirrorFilterDocument(deserializer: Deserializer): TrafficMirrorFilter {
    val builder = TrafficMirrorFilter.Builder()
    val DESCRIPTION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("description"))
    val EGRESSFILTERRULES_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("egressFilterRuleSet"), XmlCollectionName("item"))
    val INGRESSFILTERRULES_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("ingressFilterRuleSet"), XmlCollectionName("item"))
    val NETWORKSERVICES_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("networkServiceSet"), XmlCollectionName("item"))
    val TAGS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("tagSet"), XmlCollectionName("item"))
    val TRAFFICMIRRORFILTERID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("trafficMirrorFilterId"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(XmlSerialName("TrafficMirrorFilter"))
        trait(XmlNamespace("http://ec2.amazonaws.com/doc/2016-11-15"))
        field(DESCRIPTION_DESCRIPTOR)
        field(EGRESSFILTERRULES_DESCRIPTOR)
        field(INGRESSFILTERRULES_DESCRIPTOR)
        field(NETWORKSERVICES_DESCRIPTOR)
        field(TAGS_DESCRIPTOR)
        field(TRAFFICMIRRORFILTERID_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                DESCRIPTION_DESCRIPTOR.index -> builder.description = deserializeString()
                EGRESSFILTERRULES_DESCRIPTOR.index -> builder.egressFilterRules =
                    deserializer.deserializeList(EGRESSFILTERRULES_DESCRIPTOR) {
                        val col0 = mutableListOf<TrafficMirrorFilterRule>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeTrafficMirrorFilterRuleDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                INGRESSFILTERRULES_DESCRIPTOR.index -> builder.ingressFilterRules =
                    deserializer.deserializeList(INGRESSFILTERRULES_DESCRIPTOR) {
                        val col0 = mutableListOf<TrafficMirrorFilterRule>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeTrafficMirrorFilterRuleDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                NETWORKSERVICES_DESCRIPTOR.index -> builder.networkServices =
                    deserializer.deserializeList(NETWORKSERVICES_DESCRIPTOR) {
                        val col0 = mutableListOf<TrafficMirrorNetworkService>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeString().let { TrafficMirrorNetworkService.fromValue(it) } } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                TAGS_DESCRIPTOR.index -> builder.tags =
                    deserializer.deserializeList(TAGS_DESCRIPTOR) {
                        val col0 = mutableListOf<Tag>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeTagDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                TRAFFICMIRRORFILTERID_DESCRIPTOR.index -> builder.trafficMirrorFilterId = deserializeString()
                null -> break@loop
                else -> skipValue()
            }
        }
    }
    return builder.build()
}
