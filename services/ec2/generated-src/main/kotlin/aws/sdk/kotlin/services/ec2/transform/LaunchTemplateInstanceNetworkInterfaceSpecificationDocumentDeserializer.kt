// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.transform

import aws.sdk.kotlin.services.ec2.model.InstanceIpv6Address
import aws.sdk.kotlin.services.ec2.model.Ipv4PrefixSpecificationResponse
import aws.sdk.kotlin.services.ec2.model.Ipv6PrefixSpecificationResponse
import aws.sdk.kotlin.services.ec2.model.LaunchTemplateInstanceNetworkInterfaceSpecification
import aws.sdk.kotlin.services.ec2.model.PrivateIpAddressSpecification
import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.serde.xml.XmlCollectionName
import aws.smithy.kotlin.runtime.serde.xml.XmlDeserializer
import aws.smithy.kotlin.runtime.serde.xml.XmlNamespace
import aws.smithy.kotlin.runtime.serde.xml.XmlSerialName

internal fun deserializeLaunchTemplateInstanceNetworkInterfaceSpecificationDocument(deserializer: Deserializer): LaunchTemplateInstanceNetworkInterfaceSpecification {
    val builder = LaunchTemplateInstanceNetworkInterfaceSpecification.Builder()
    val ASSOCIATECARRIERIPADDRESS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Boolean, XmlSerialName("associateCarrierIpAddress"))
    val ASSOCIATEPUBLICIPADDRESS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Boolean, XmlSerialName("associatePublicIpAddress"))
    val DELETEONTERMINATION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Boolean, XmlSerialName("deleteOnTermination"))
    val DESCRIPTION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("description"))
    val DEVICEINDEX_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, XmlSerialName("deviceIndex"))
    val GROUPS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("groupSet"), XmlCollectionName("groupId"))
    val INTERFACETYPE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("interfaceType"))
    val IPV4PREFIXCOUNT_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, XmlSerialName("ipv4PrefixCount"))
    val IPV4PREFIXES_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("ipv4PrefixSet"), XmlCollectionName("item"))
    val IPV6ADDRESSCOUNT_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, XmlSerialName("ipv6AddressCount"))
    val IPV6ADDRESSES_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("ipv6AddressesSet"), XmlCollectionName("item"))
    val IPV6PREFIXCOUNT_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, XmlSerialName("ipv6PrefixCount"))
    val IPV6PREFIXES_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("ipv6PrefixSet"), XmlCollectionName("item"))
    val NETWORKCARDINDEX_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, XmlSerialName("networkCardIndex"))
    val NETWORKINTERFACEID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("networkInterfaceId"))
    val PRIVATEIPADDRESS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("privateIpAddress"))
    val PRIVATEIPADDRESSES_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("privateIpAddressesSet"), XmlCollectionName("item"))
    val SECONDARYPRIVATEIPADDRESSCOUNT_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, XmlSerialName("secondaryPrivateIpAddressCount"))
    val SUBNETID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("subnetId"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(XmlSerialName("LaunchTemplateInstanceNetworkInterfaceSpecification"))
        trait(XmlNamespace("http://ec2.amazonaws.com/doc/2016-11-15"))
        field(ASSOCIATECARRIERIPADDRESS_DESCRIPTOR)
        field(ASSOCIATEPUBLICIPADDRESS_DESCRIPTOR)
        field(DELETEONTERMINATION_DESCRIPTOR)
        field(DESCRIPTION_DESCRIPTOR)
        field(DEVICEINDEX_DESCRIPTOR)
        field(GROUPS_DESCRIPTOR)
        field(INTERFACETYPE_DESCRIPTOR)
        field(IPV4PREFIXCOUNT_DESCRIPTOR)
        field(IPV4PREFIXES_DESCRIPTOR)
        field(IPV6ADDRESSCOUNT_DESCRIPTOR)
        field(IPV6ADDRESSES_DESCRIPTOR)
        field(IPV6PREFIXCOUNT_DESCRIPTOR)
        field(IPV6PREFIXES_DESCRIPTOR)
        field(NETWORKCARDINDEX_DESCRIPTOR)
        field(NETWORKINTERFACEID_DESCRIPTOR)
        field(PRIVATEIPADDRESS_DESCRIPTOR)
        field(PRIVATEIPADDRESSES_DESCRIPTOR)
        field(SECONDARYPRIVATEIPADDRESSCOUNT_DESCRIPTOR)
        field(SUBNETID_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                ASSOCIATECARRIERIPADDRESS_DESCRIPTOR.index -> builder.associateCarrierIpAddress = deserializeBoolean()
                ASSOCIATEPUBLICIPADDRESS_DESCRIPTOR.index -> builder.associatePublicIpAddress = deserializeBoolean()
                DELETEONTERMINATION_DESCRIPTOR.index -> builder.deleteOnTermination = deserializeBoolean()
                DESCRIPTION_DESCRIPTOR.index -> builder.description = deserializeString()
                DEVICEINDEX_DESCRIPTOR.index -> builder.deviceIndex = deserializeInt()
                GROUPS_DESCRIPTOR.index -> builder.groups =
                    deserializer.deserializeList(GROUPS_DESCRIPTOR) {
                        val col0 = mutableListOf<String>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeString() } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                INTERFACETYPE_DESCRIPTOR.index -> builder.interfaceType = deserializeString()
                IPV4PREFIXCOUNT_DESCRIPTOR.index -> builder.ipv4PrefixCount = deserializeInt()
                IPV4PREFIXES_DESCRIPTOR.index -> builder.ipv4Prefixes =
                    deserializer.deserializeList(IPV4PREFIXES_DESCRIPTOR) {
                        val col0 = mutableListOf<Ipv4PrefixSpecificationResponse>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeIpv4PrefixSpecificationResponseDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                IPV6ADDRESSCOUNT_DESCRIPTOR.index -> builder.ipv6AddressCount = deserializeInt()
                IPV6ADDRESSES_DESCRIPTOR.index -> builder.ipv6Addresses =
                    deserializer.deserializeList(IPV6ADDRESSES_DESCRIPTOR) {
                        val col0 = mutableListOf<InstanceIpv6Address>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeInstanceIpv6AddressDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                IPV6PREFIXCOUNT_DESCRIPTOR.index -> builder.ipv6PrefixCount = deserializeInt()
                IPV6PREFIXES_DESCRIPTOR.index -> builder.ipv6Prefixes =
                    deserializer.deserializeList(IPV6PREFIXES_DESCRIPTOR) {
                        val col0 = mutableListOf<Ipv6PrefixSpecificationResponse>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeIpv6PrefixSpecificationResponseDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                NETWORKCARDINDEX_DESCRIPTOR.index -> builder.networkCardIndex = deserializeInt()
                NETWORKINTERFACEID_DESCRIPTOR.index -> builder.networkInterfaceId = deserializeString()
                PRIVATEIPADDRESS_DESCRIPTOR.index -> builder.privateIpAddress = deserializeString()
                PRIVATEIPADDRESSES_DESCRIPTOR.index -> builder.privateIpAddresses =
                    deserializer.deserializeList(PRIVATEIPADDRESSES_DESCRIPTOR) {
                        val col0 = mutableListOf<PrivateIpAddressSpecification>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializePrivateIpAddressSpecificationDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                SECONDARYPRIVATEIPADDRESSCOUNT_DESCRIPTOR.index -> builder.secondaryPrivateIpAddressCount = deserializeInt()
                SUBNETID_DESCRIPTOR.index -> builder.subnetId = deserializeString()
                null -> break@loop
                else -> skipValue()
            }
        }
    }
    return builder.build()
}
