// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.transform

import aws.sdk.kotlin.services.ec2.model.DescribeFleetError
import aws.sdk.kotlin.services.ec2.model.DescribeFleetsInstances
import aws.sdk.kotlin.services.ec2.model.FleetActivityStatus
import aws.sdk.kotlin.services.ec2.model.FleetData
import aws.sdk.kotlin.services.ec2.model.FleetExcessCapacityTerminationPolicy
import aws.sdk.kotlin.services.ec2.model.FleetLaunchTemplateConfig
import aws.sdk.kotlin.services.ec2.model.FleetStateCode
import aws.sdk.kotlin.services.ec2.model.FleetType
import aws.sdk.kotlin.services.ec2.model.Tag
import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.serde.xml.XmlCollectionName
import aws.smithy.kotlin.runtime.serde.xml.XmlDeserializer
import aws.smithy.kotlin.runtime.serde.xml.XmlNamespace
import aws.smithy.kotlin.runtime.serde.xml.XmlSerialName
import aws.smithy.kotlin.runtime.time.Instant

internal fun deserializeFleetDataDocument(deserializer: Deserializer): FleetData {
    val builder = FleetData.Builder()
    val ACTIVITYSTATUS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("activityStatus"))
    val CLIENTTOKEN_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("clientToken"))
    val CONTEXT_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("context"))
    val CREATETIME_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Timestamp, XmlSerialName("createTime"))
    val ERRORS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("errorSet"), XmlCollectionName("item"))
    val EXCESSCAPACITYTERMINATIONPOLICY_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("excessCapacityTerminationPolicy"))
    val FLEETID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("fleetId"))
    val FLEETSTATE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("fleetState"))
    val FULFILLEDCAPACITY_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Double, XmlSerialName("fulfilledCapacity"))
    val FULFILLEDONDEMANDCAPACITY_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Double, XmlSerialName("fulfilledOnDemandCapacity"))
    val INSTANCES_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("fleetInstanceSet"), XmlCollectionName("item"))
    val LAUNCHTEMPLATECONFIGS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("launchTemplateConfigs"), XmlCollectionName("item"))
    val ONDEMANDOPTIONS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("onDemandOptions"))
    val REPLACEUNHEALTHYINSTANCES_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Boolean, XmlSerialName("replaceUnhealthyInstances"))
    val SPOTOPTIONS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("spotOptions"))
    val TAGS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("tagSet"), XmlCollectionName("item"))
    val TARGETCAPACITYSPECIFICATION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("targetCapacitySpecification"))
    val TERMINATEINSTANCESWITHEXPIRATION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Boolean, XmlSerialName("terminateInstancesWithExpiration"))
    val TYPE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("type"))
    val VALIDFROM_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Timestamp, XmlSerialName("validFrom"))
    val VALIDUNTIL_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Timestamp, XmlSerialName("validUntil"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(XmlSerialName("FleetData"))
        trait(XmlNamespace("http://ec2.amazonaws.com/doc/2016-11-15"))
        field(ACTIVITYSTATUS_DESCRIPTOR)
        field(CLIENTTOKEN_DESCRIPTOR)
        field(CONTEXT_DESCRIPTOR)
        field(CREATETIME_DESCRIPTOR)
        field(ERRORS_DESCRIPTOR)
        field(EXCESSCAPACITYTERMINATIONPOLICY_DESCRIPTOR)
        field(FLEETID_DESCRIPTOR)
        field(FLEETSTATE_DESCRIPTOR)
        field(FULFILLEDCAPACITY_DESCRIPTOR)
        field(FULFILLEDONDEMANDCAPACITY_DESCRIPTOR)
        field(INSTANCES_DESCRIPTOR)
        field(LAUNCHTEMPLATECONFIGS_DESCRIPTOR)
        field(ONDEMANDOPTIONS_DESCRIPTOR)
        field(REPLACEUNHEALTHYINSTANCES_DESCRIPTOR)
        field(SPOTOPTIONS_DESCRIPTOR)
        field(TAGS_DESCRIPTOR)
        field(TARGETCAPACITYSPECIFICATION_DESCRIPTOR)
        field(TERMINATEINSTANCESWITHEXPIRATION_DESCRIPTOR)
        field(TYPE_DESCRIPTOR)
        field(VALIDFROM_DESCRIPTOR)
        field(VALIDUNTIL_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                ACTIVITYSTATUS_DESCRIPTOR.index -> builder.activityStatus = deserializeString().let { FleetActivityStatus.fromValue(it) }
                CLIENTTOKEN_DESCRIPTOR.index -> builder.clientToken = deserializeString()
                CONTEXT_DESCRIPTOR.index -> builder.context = deserializeString()
                CREATETIME_DESCRIPTOR.index -> builder.createTime = deserializeString().let { Instant.fromIso8601(it) }
                ERRORS_DESCRIPTOR.index -> builder.errors =
                    deserializer.deserializeList(ERRORS_DESCRIPTOR) {
                        val col0 = mutableListOf<DescribeFleetError>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeDescribeFleetErrorDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                EXCESSCAPACITYTERMINATIONPOLICY_DESCRIPTOR.index -> builder.excessCapacityTerminationPolicy = deserializeString().let { FleetExcessCapacityTerminationPolicy.fromValue(it) }
                FLEETID_DESCRIPTOR.index -> builder.fleetId = deserializeString()
                FLEETSTATE_DESCRIPTOR.index -> builder.fleetState = deserializeString().let { FleetStateCode.fromValue(it) }
                FULFILLEDCAPACITY_DESCRIPTOR.index -> builder.fulfilledCapacity = deserializeDouble()
                FULFILLEDONDEMANDCAPACITY_DESCRIPTOR.index -> builder.fulfilledOnDemandCapacity = deserializeDouble()
                INSTANCES_DESCRIPTOR.index -> builder.instances =
                    deserializer.deserializeList(INSTANCES_DESCRIPTOR) {
                        val col0 = mutableListOf<DescribeFleetsInstances>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeDescribeFleetsInstancesDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                LAUNCHTEMPLATECONFIGS_DESCRIPTOR.index -> builder.launchTemplateConfigs =
                    deserializer.deserializeList(LAUNCHTEMPLATECONFIGS_DESCRIPTOR) {
                        val col0 = mutableListOf<FleetLaunchTemplateConfig>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeFleetLaunchTemplateConfigDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                ONDEMANDOPTIONS_DESCRIPTOR.index -> builder.onDemandOptions = deserializeOnDemandOptionsDocument(deserializer)
                REPLACEUNHEALTHYINSTANCES_DESCRIPTOR.index -> builder.replaceUnhealthyInstances = deserializeBoolean()
                SPOTOPTIONS_DESCRIPTOR.index -> builder.spotOptions = deserializeSpotOptionsDocument(deserializer)
                TAGS_DESCRIPTOR.index -> builder.tags =
                    deserializer.deserializeList(TAGS_DESCRIPTOR) {
                        val col0 = mutableListOf<Tag>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeTagDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                TARGETCAPACITYSPECIFICATION_DESCRIPTOR.index -> builder.targetCapacitySpecification = deserializeTargetCapacitySpecificationDocument(deserializer)
                TERMINATEINSTANCESWITHEXPIRATION_DESCRIPTOR.index -> builder.terminateInstancesWithExpiration = deserializeBoolean()
                TYPE_DESCRIPTOR.index -> builder.type = deserializeString().let { FleetType.fromValue(it) }
                VALIDFROM_DESCRIPTOR.index -> builder.validFrom = deserializeString().let { Instant.fromIso8601(it) }
                VALIDUNTIL_DESCRIPTOR.index -> builder.validUntil = deserializeString().let { Instant.fromIso8601(it) }
                null -> break@loop
                else -> skipValue()
            }
        }
    }
    return builder.build()
}
