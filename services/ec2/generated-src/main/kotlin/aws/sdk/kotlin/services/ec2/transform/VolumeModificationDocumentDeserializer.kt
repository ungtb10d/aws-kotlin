// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.transform

import aws.sdk.kotlin.services.ec2.model.VolumeModification
import aws.sdk.kotlin.services.ec2.model.VolumeModificationState
import aws.sdk.kotlin.services.ec2.model.VolumeType
import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.serde.xml.XmlDeserializer
import aws.smithy.kotlin.runtime.serde.xml.XmlNamespace
import aws.smithy.kotlin.runtime.serde.xml.XmlSerialName
import aws.smithy.kotlin.runtime.time.Instant

internal fun deserializeVolumeModificationDocument(deserializer: Deserializer): VolumeModification {
    val builder = VolumeModification.Builder()
    val ENDTIME_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Timestamp, XmlSerialName("endTime"))
    val MODIFICATIONSTATE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("modificationState"))
    val ORIGINALIOPS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, XmlSerialName("originalIops"))
    val ORIGINALMULTIATTACHENABLED_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Boolean, XmlSerialName("originalMultiAttachEnabled"))
    val ORIGINALSIZE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, XmlSerialName("originalSize"))
    val ORIGINALTHROUGHPUT_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, XmlSerialName("originalThroughput"))
    val ORIGINALVOLUMETYPE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("originalVolumeType"))
    val PROGRESS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Long, XmlSerialName("progress"))
    val STARTTIME_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Timestamp, XmlSerialName("startTime"))
    val STATUSMESSAGE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("statusMessage"))
    val TARGETIOPS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, XmlSerialName("targetIops"))
    val TARGETMULTIATTACHENABLED_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Boolean, XmlSerialName("targetMultiAttachEnabled"))
    val TARGETSIZE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, XmlSerialName("targetSize"))
    val TARGETTHROUGHPUT_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, XmlSerialName("targetThroughput"))
    val TARGETVOLUMETYPE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("targetVolumeType"))
    val VOLUMEID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("volumeId"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(XmlSerialName("VolumeModification"))
        trait(XmlNamespace("http://ec2.amazonaws.com/doc/2016-11-15"))
        field(ENDTIME_DESCRIPTOR)
        field(MODIFICATIONSTATE_DESCRIPTOR)
        field(ORIGINALIOPS_DESCRIPTOR)
        field(ORIGINALMULTIATTACHENABLED_DESCRIPTOR)
        field(ORIGINALSIZE_DESCRIPTOR)
        field(ORIGINALTHROUGHPUT_DESCRIPTOR)
        field(ORIGINALVOLUMETYPE_DESCRIPTOR)
        field(PROGRESS_DESCRIPTOR)
        field(STARTTIME_DESCRIPTOR)
        field(STATUSMESSAGE_DESCRIPTOR)
        field(TARGETIOPS_DESCRIPTOR)
        field(TARGETMULTIATTACHENABLED_DESCRIPTOR)
        field(TARGETSIZE_DESCRIPTOR)
        field(TARGETTHROUGHPUT_DESCRIPTOR)
        field(TARGETVOLUMETYPE_DESCRIPTOR)
        field(VOLUMEID_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                ENDTIME_DESCRIPTOR.index -> builder.endTime = deserializeString().let { Instant.fromIso8601(it) }
                MODIFICATIONSTATE_DESCRIPTOR.index -> builder.modificationState = deserializeString().let { VolumeModificationState.fromValue(it) }
                ORIGINALIOPS_DESCRIPTOR.index -> builder.originalIops = deserializeInt()
                ORIGINALMULTIATTACHENABLED_DESCRIPTOR.index -> builder.originalMultiAttachEnabled = deserializeBoolean()
                ORIGINALSIZE_DESCRIPTOR.index -> builder.originalSize = deserializeInt()
                ORIGINALTHROUGHPUT_DESCRIPTOR.index -> builder.originalThroughput = deserializeInt()
                ORIGINALVOLUMETYPE_DESCRIPTOR.index -> builder.originalVolumeType = deserializeString().let { VolumeType.fromValue(it) }
                PROGRESS_DESCRIPTOR.index -> builder.progress = deserializeLong()
                STARTTIME_DESCRIPTOR.index -> builder.startTime = deserializeString().let { Instant.fromIso8601(it) }
                STATUSMESSAGE_DESCRIPTOR.index -> builder.statusMessage = deserializeString()
                TARGETIOPS_DESCRIPTOR.index -> builder.targetIops = deserializeInt()
                TARGETMULTIATTACHENABLED_DESCRIPTOR.index -> builder.targetMultiAttachEnabled = deserializeBoolean()
                TARGETSIZE_DESCRIPTOR.index -> builder.targetSize = deserializeInt()
                TARGETTHROUGHPUT_DESCRIPTOR.index -> builder.targetThroughput = deserializeInt()
                TARGETVOLUMETYPE_DESCRIPTOR.index -> builder.targetVolumeType = deserializeString().let { VolumeType.fromValue(it) }
                VOLUMEID_DESCRIPTOR.index -> builder.volumeId = deserializeString()
                null -> break@loop
                else -> skipValue()
            }
        }
    }
    return builder.build()
}
