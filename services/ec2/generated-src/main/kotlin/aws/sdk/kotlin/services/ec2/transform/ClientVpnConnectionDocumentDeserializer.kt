// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.transform

import aws.sdk.kotlin.services.ec2.model.ClientVpnConnection
import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.serde.xml.XmlCollectionName
import aws.smithy.kotlin.runtime.serde.xml.XmlDeserializer
import aws.smithy.kotlin.runtime.serde.xml.XmlNamespace
import aws.smithy.kotlin.runtime.serde.xml.XmlSerialName

internal fun deserializeClientVpnConnectionDocument(deserializer: Deserializer): ClientVpnConnection {
    val builder = ClientVpnConnection.Builder()
    val CLIENTIP_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("clientIp"))
    val CLIENTVPNENDPOINTID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("clientVpnEndpointId"))
    val COMMONNAME_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("commonName"))
    val CONNECTIONENDTIME_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("connectionEndTime"))
    val CONNECTIONESTABLISHEDTIME_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("connectionEstablishedTime"))
    val CONNECTIONID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("connectionId"))
    val EGRESSBYTES_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("egressBytes"))
    val EGRESSPACKETS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("egressPackets"))
    val INGRESSBYTES_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("ingressBytes"))
    val INGRESSPACKETS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("ingressPackets"))
    val POSTURECOMPLIANCESTATUSES_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("postureComplianceStatusSet"), XmlCollectionName("item"))
    val STATUS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("status"))
    val TIMESTAMP_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("timestamp"))
    val USERNAME_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("username"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(XmlSerialName("ClientVpnConnection"))
        trait(XmlNamespace("http://ec2.amazonaws.com/doc/2016-11-15"))
        field(CLIENTIP_DESCRIPTOR)
        field(CLIENTVPNENDPOINTID_DESCRIPTOR)
        field(COMMONNAME_DESCRIPTOR)
        field(CONNECTIONENDTIME_DESCRIPTOR)
        field(CONNECTIONESTABLISHEDTIME_DESCRIPTOR)
        field(CONNECTIONID_DESCRIPTOR)
        field(EGRESSBYTES_DESCRIPTOR)
        field(EGRESSPACKETS_DESCRIPTOR)
        field(INGRESSBYTES_DESCRIPTOR)
        field(INGRESSPACKETS_DESCRIPTOR)
        field(POSTURECOMPLIANCESTATUSES_DESCRIPTOR)
        field(STATUS_DESCRIPTOR)
        field(TIMESTAMP_DESCRIPTOR)
        field(USERNAME_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                CLIENTIP_DESCRIPTOR.index -> builder.clientIp = deserializeString()
                CLIENTVPNENDPOINTID_DESCRIPTOR.index -> builder.clientVpnEndpointId = deserializeString()
                COMMONNAME_DESCRIPTOR.index -> builder.commonName = deserializeString()
                CONNECTIONENDTIME_DESCRIPTOR.index -> builder.connectionEndTime = deserializeString()
                CONNECTIONESTABLISHEDTIME_DESCRIPTOR.index -> builder.connectionEstablishedTime = deserializeString()
                CONNECTIONID_DESCRIPTOR.index -> builder.connectionId = deserializeString()
                EGRESSBYTES_DESCRIPTOR.index -> builder.egressBytes = deserializeString()
                EGRESSPACKETS_DESCRIPTOR.index -> builder.egressPackets = deserializeString()
                INGRESSBYTES_DESCRIPTOR.index -> builder.ingressBytes = deserializeString()
                INGRESSPACKETS_DESCRIPTOR.index -> builder.ingressPackets = deserializeString()
                POSTURECOMPLIANCESTATUSES_DESCRIPTOR.index -> builder.postureComplianceStatuses =
                    deserializer.deserializeList(POSTURECOMPLIANCESTATUSES_DESCRIPTOR) {
                        val col0 = mutableListOf<String>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeString() } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                STATUS_DESCRIPTOR.index -> builder.status = deserializeClientVpnConnectionStatusDocument(deserializer)
                TIMESTAMP_DESCRIPTOR.index -> builder.timestamp = deserializeString()
                USERNAME_DESCRIPTOR.index -> builder.username = deserializeString()
                null -> break@loop
                else -> skipValue()
            }
        }
    }
    return builder.build()
}
