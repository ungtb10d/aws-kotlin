// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.transform

import aws.sdk.kotlin.services.ec2.model.TrafficDirection
import aws.sdk.kotlin.services.ec2.model.TrafficMirrorFilterRule
import aws.sdk.kotlin.services.ec2.model.TrafficMirrorRuleAction
import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.serde.xml.XmlDeserializer
import aws.smithy.kotlin.runtime.serde.xml.XmlNamespace
import aws.smithy.kotlin.runtime.serde.xml.XmlSerialName

internal fun deserializeTrafficMirrorFilterRuleDocument(deserializer: Deserializer): TrafficMirrorFilterRule {
    val builder = TrafficMirrorFilterRule.Builder()
    val DESCRIPTION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("description"))
    val DESTINATIONCIDRBLOCK_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("destinationCidrBlock"))
    val DESTINATIONPORTRANGE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("destinationPortRange"))
    val PROTOCOL_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, XmlSerialName("protocol"))
    val RULEACTION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Enum, XmlSerialName("ruleAction"))
    val RULENUMBER_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, XmlSerialName("ruleNumber"))
    val SOURCECIDRBLOCK_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("sourceCidrBlock"))
    val SOURCEPORTRANGE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("sourcePortRange"))
    val TRAFFICDIRECTION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Enum, XmlSerialName("trafficDirection"))
    val TRAFFICMIRRORFILTERID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("trafficMirrorFilterId"))
    val TRAFFICMIRRORFILTERRULEID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("trafficMirrorFilterRuleId"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(XmlSerialName("TrafficMirrorFilterRule"))
        trait(XmlNamespace("http://ec2.amazonaws.com/doc/2016-11-15"))
        field(DESCRIPTION_DESCRIPTOR)
        field(DESTINATIONCIDRBLOCK_DESCRIPTOR)
        field(DESTINATIONPORTRANGE_DESCRIPTOR)
        field(PROTOCOL_DESCRIPTOR)
        field(RULEACTION_DESCRIPTOR)
        field(RULENUMBER_DESCRIPTOR)
        field(SOURCECIDRBLOCK_DESCRIPTOR)
        field(SOURCEPORTRANGE_DESCRIPTOR)
        field(TRAFFICDIRECTION_DESCRIPTOR)
        field(TRAFFICMIRRORFILTERID_DESCRIPTOR)
        field(TRAFFICMIRRORFILTERRULEID_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                DESCRIPTION_DESCRIPTOR.index -> builder.description = deserializeString()
                DESTINATIONCIDRBLOCK_DESCRIPTOR.index -> builder.destinationCidrBlock = deserializeString()
                DESTINATIONPORTRANGE_DESCRIPTOR.index -> builder.destinationPortRange = deserializeTrafficMirrorPortRangeDocument(deserializer)
                PROTOCOL_DESCRIPTOR.index -> builder.protocol = deserializeInt()
                RULEACTION_DESCRIPTOR.index -> builder.ruleAction = deserializeString().let { TrafficMirrorRuleAction.fromValue(it) }
                RULENUMBER_DESCRIPTOR.index -> builder.ruleNumber = deserializeInt()
                SOURCECIDRBLOCK_DESCRIPTOR.index -> builder.sourceCidrBlock = deserializeString()
                SOURCEPORTRANGE_DESCRIPTOR.index -> builder.sourcePortRange = deserializeTrafficMirrorPortRangeDocument(deserializer)
                TRAFFICDIRECTION_DESCRIPTOR.index -> builder.trafficDirection = deserializeString().let { TrafficDirection.fromValue(it) }
                TRAFFICMIRRORFILTERID_DESCRIPTOR.index -> builder.trafficMirrorFilterId = deserializeString()
                TRAFFICMIRRORFILTERRULEID_DESCRIPTOR.index -> builder.trafficMirrorFilterRuleId = deserializeString()
                null -> break@loop
                else -> skipValue()
            }
        }
    }
    return builder.build()
}
