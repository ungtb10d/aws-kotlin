// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes a block device mapping.
 */
public class LaunchTemplateBlockDeviceMapping private constructor(builder: Builder) {
    /**
     * The device name.
     */
    public val deviceName: kotlin.String? = builder.deviceName
    /**
     * Information about the block device for an EBS volume.
     */
    public val ebs: aws.sdk.kotlin.services.ec2.model.LaunchTemplateEbsBlockDevice? = builder.ebs
    /**
     * To omit the device from the block device mapping, specify an empty string.
     */
    public val noDevice: kotlin.String? = builder.noDevice
    /**
     * The virtual device name (ephemeralN).
     */
    public val virtualName: kotlin.String? = builder.virtualName

    public companion object {
        public operator fun invoke(block: Builder.() -> kotlin.Unit): aws.sdk.kotlin.services.ec2.model.LaunchTemplateBlockDeviceMapping = Builder().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("LaunchTemplateBlockDeviceMapping(")
        append("deviceName=$deviceName,")
        append("ebs=$ebs,")
        append("noDevice=$noDevice,")
        append("virtualName=$virtualName)")
    }

    override fun hashCode(): kotlin.Int {
        var result = deviceName?.hashCode() ?: 0
        result = 31 * result + (ebs?.hashCode() ?: 0)
        result = 31 * result + (noDevice?.hashCode() ?: 0)
        result = 31 * result + (virtualName?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as LaunchTemplateBlockDeviceMapping

        if (deviceName != other.deviceName) return false
        if (ebs != other.ebs) return false
        if (noDevice != other.noDevice) return false
        if (virtualName != other.virtualName) return false

        return true
    }

    public inline fun copy(block: Builder.() -> kotlin.Unit = {}): aws.sdk.kotlin.services.ec2.model.LaunchTemplateBlockDeviceMapping = Builder(this).apply(block).build()

    public class Builder {
        /**
         * The device name.
         */
        public var deviceName: kotlin.String? = null
        /**
         * Information about the block device for an EBS volume.
         */
        public var ebs: aws.sdk.kotlin.services.ec2.model.LaunchTemplateEbsBlockDevice? = null
        /**
         * To omit the device from the block device mapping, specify an empty string.
         */
        public var noDevice: kotlin.String? = null
        /**
         * The virtual device name (ephemeralN).
         */
        public var virtualName: kotlin.String? = null

        @PublishedApi
        internal constructor()
        @PublishedApi
        internal constructor(x: aws.sdk.kotlin.services.ec2.model.LaunchTemplateBlockDeviceMapping) : this() {
            this.deviceName = x.deviceName
            this.ebs = x.ebs
            this.noDevice = x.noDevice
            this.virtualName = x.virtualName
        }

        @PublishedApi
        internal fun build(): aws.sdk.kotlin.services.ec2.model.LaunchTemplateBlockDeviceMapping = LaunchTemplateBlockDeviceMapping(this)

        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.LaunchTemplateEbsBlockDevice] inside the given [block]
         */
        public fun ebs(block: aws.sdk.kotlin.services.ec2.model.LaunchTemplateEbsBlockDevice.Builder.() -> kotlin.Unit) {
            this.ebs = aws.sdk.kotlin.services.ec2.model.LaunchTemplateEbsBlockDevice.invoke(block)
        }
    }
}
