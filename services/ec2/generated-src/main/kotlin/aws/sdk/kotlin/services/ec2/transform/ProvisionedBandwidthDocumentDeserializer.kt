// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.transform

import aws.sdk.kotlin.services.ec2.model.ProvisionedBandwidth
import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.serde.xml.XmlDeserializer
import aws.smithy.kotlin.runtime.serde.xml.XmlNamespace
import aws.smithy.kotlin.runtime.serde.xml.XmlSerialName
import aws.smithy.kotlin.runtime.time.Instant

internal fun deserializeProvisionedBandwidthDocument(deserializer: Deserializer): ProvisionedBandwidth {
    val builder = ProvisionedBandwidth.Builder()
    val PROVISIONTIME_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Timestamp, XmlSerialName("provisionTime"))
    val PROVISIONED_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("provisioned"))
    val REQUESTTIME_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Timestamp, XmlSerialName("requestTime"))
    val REQUESTED_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("requested"))
    val STATUS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("status"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(XmlSerialName("ProvisionedBandwidth"))
        trait(XmlNamespace("http://ec2.amazonaws.com/doc/2016-11-15"))
        field(PROVISIONTIME_DESCRIPTOR)
        field(PROVISIONED_DESCRIPTOR)
        field(REQUESTTIME_DESCRIPTOR)
        field(REQUESTED_DESCRIPTOR)
        field(STATUS_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                PROVISIONTIME_DESCRIPTOR.index -> builder.provisionTime = deserializeString().let { Instant.fromIso8601(it) }
                PROVISIONED_DESCRIPTOR.index -> builder.provisioned = deserializeString()
                REQUESTTIME_DESCRIPTOR.index -> builder.requestTime = deserializeString().let { Instant.fromIso8601(it) }
                REQUESTED_DESCRIPTOR.index -> builder.requested = deserializeString()
                STATUS_DESCRIPTOR.index -> builder.status = deserializeString()
                null -> break@loop
                else -> skipValue()
            }
        }
    }
    return builder.build()
}
