// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.transform

import aws.sdk.kotlin.services.ec2.model.AllocationState
import aws.sdk.kotlin.services.ec2.model.AllowsMultipleInstanceTypes
import aws.sdk.kotlin.services.ec2.model.AutoPlacement
import aws.sdk.kotlin.services.ec2.model.Host
import aws.sdk.kotlin.services.ec2.model.HostInstance
import aws.sdk.kotlin.services.ec2.model.HostRecovery
import aws.sdk.kotlin.services.ec2.model.Tag
import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.serde.xml.XmlCollectionName
import aws.smithy.kotlin.runtime.serde.xml.XmlDeserializer
import aws.smithy.kotlin.runtime.serde.xml.XmlNamespace
import aws.smithy.kotlin.runtime.serde.xml.XmlSerialName
import aws.smithy.kotlin.runtime.time.Instant

internal fun deserializeHostDocument(deserializer: Deserializer): Host {
    val builder = Host.Builder()
    val ALLOCATIONTIME_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Timestamp, XmlSerialName("allocationTime"))
    val ALLOWSMULTIPLEINSTANCETYPES_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Enum, XmlSerialName("allowsMultipleInstanceTypes"))
    val AUTOPLACEMENT_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Enum, XmlSerialName("autoPlacement"))
    val AVAILABILITYZONE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("availabilityZone"))
    val AVAILABILITYZONEID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("availabilityZoneId"))
    val AVAILABLECAPACITY_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("availableCapacity"))
    val CLIENTTOKEN_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("clientToken"))
    val HOSTID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("hostId"))
    val HOSTPROPERTIES_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("hostProperties"))
    val HOSTRECOVERY_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Enum, XmlSerialName("hostRecovery"))
    val HOSTRESERVATIONID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("hostReservationId"))
    val INSTANCES_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("instances"), XmlCollectionName("item"))
    val MEMBEROFSERVICELINKEDRESOURCEGROUP_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Boolean, XmlSerialName("memberOfServiceLinkedResourceGroup"))
    val OUTPOSTARN_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("outpostArn"))
    val OWNERID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("ownerId"))
    val RELEASETIME_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Timestamp, XmlSerialName("releaseTime"))
    val STATE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Enum, XmlSerialName("state"))
    val TAGS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("tagSet"), XmlCollectionName("item"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(XmlSerialName("Host"))
        trait(XmlNamespace("http://ec2.amazonaws.com/doc/2016-11-15"))
        field(ALLOCATIONTIME_DESCRIPTOR)
        field(ALLOWSMULTIPLEINSTANCETYPES_DESCRIPTOR)
        field(AUTOPLACEMENT_DESCRIPTOR)
        field(AVAILABILITYZONE_DESCRIPTOR)
        field(AVAILABILITYZONEID_DESCRIPTOR)
        field(AVAILABLECAPACITY_DESCRIPTOR)
        field(CLIENTTOKEN_DESCRIPTOR)
        field(HOSTID_DESCRIPTOR)
        field(HOSTPROPERTIES_DESCRIPTOR)
        field(HOSTRECOVERY_DESCRIPTOR)
        field(HOSTRESERVATIONID_DESCRIPTOR)
        field(INSTANCES_DESCRIPTOR)
        field(MEMBEROFSERVICELINKEDRESOURCEGROUP_DESCRIPTOR)
        field(OUTPOSTARN_DESCRIPTOR)
        field(OWNERID_DESCRIPTOR)
        field(RELEASETIME_DESCRIPTOR)
        field(STATE_DESCRIPTOR)
        field(TAGS_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                ALLOCATIONTIME_DESCRIPTOR.index -> builder.allocationTime = deserializeString().let { Instant.fromIso8601(it) }
                ALLOWSMULTIPLEINSTANCETYPES_DESCRIPTOR.index -> builder.allowsMultipleInstanceTypes = deserializeString().let { AllowsMultipleInstanceTypes.fromValue(it) }
                AUTOPLACEMENT_DESCRIPTOR.index -> builder.autoPlacement = deserializeString().let { AutoPlacement.fromValue(it) }
                AVAILABILITYZONE_DESCRIPTOR.index -> builder.availabilityZone = deserializeString()
                AVAILABILITYZONEID_DESCRIPTOR.index -> builder.availabilityZoneId = deserializeString()
                AVAILABLECAPACITY_DESCRIPTOR.index -> builder.availableCapacity = deserializeAvailableCapacityDocument(deserializer)
                CLIENTTOKEN_DESCRIPTOR.index -> builder.clientToken = deserializeString()
                HOSTID_DESCRIPTOR.index -> builder.hostId = deserializeString()
                HOSTPROPERTIES_DESCRIPTOR.index -> builder.hostProperties = deserializeHostPropertiesDocument(deserializer)
                HOSTRECOVERY_DESCRIPTOR.index -> builder.hostRecovery = deserializeString().let { HostRecovery.fromValue(it) }
                HOSTRESERVATIONID_DESCRIPTOR.index -> builder.hostReservationId = deserializeString()
                INSTANCES_DESCRIPTOR.index -> builder.instances =
                    deserializer.deserializeList(INSTANCES_DESCRIPTOR) {
                        val col0 = mutableListOf<HostInstance>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeHostInstanceDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                MEMBEROFSERVICELINKEDRESOURCEGROUP_DESCRIPTOR.index -> builder.memberOfServiceLinkedResourceGroup = deserializeBoolean()
                OUTPOSTARN_DESCRIPTOR.index -> builder.outpostArn = deserializeString()
                OWNERID_DESCRIPTOR.index -> builder.ownerId = deserializeString()
                RELEASETIME_DESCRIPTOR.index -> builder.releaseTime = deserializeString().let { Instant.fromIso8601(it) }
                STATE_DESCRIPTOR.index -> builder.state = deserializeString().let { AllocationState.fromValue(it) }
                TAGS_DESCRIPTOR.index -> builder.tags =
                    deserializer.deserializeList(TAGS_DESCRIPTOR) {
                        val col0 = mutableListOf<Tag>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeTagDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                null -> break@loop
                else -> skipValue()
            }
        }
    }
    return builder.build()
}
