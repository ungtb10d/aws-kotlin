// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model

import kotlin.collections.List

public sealed class CapacityReservationInstancePlatform {

    public abstract val value: kotlin.String

    public object LinuxUnix : aws.sdk.kotlin.services.ec2.model.CapacityReservationInstancePlatform() {
        override val value: kotlin.String = "Linux/UNIX"
        override fun toString(): kotlin.String = value
    }

    public object LinuxWithSqlServerEnterprise : aws.sdk.kotlin.services.ec2.model.CapacityReservationInstancePlatform() {
        override val value: kotlin.String = "Linux with SQL Server Enterprise"
        override fun toString(): kotlin.String = value
    }

    public object LinuxWithSqlServerStandard : aws.sdk.kotlin.services.ec2.model.CapacityReservationInstancePlatform() {
        override val value: kotlin.String = "Linux with SQL Server Standard"
        override fun toString(): kotlin.String = value
    }

    public object LinuxWithSqlServerWeb : aws.sdk.kotlin.services.ec2.model.CapacityReservationInstancePlatform() {
        override val value: kotlin.String = "Linux with SQL Server Web"
        override fun toString(): kotlin.String = value
    }

    public object RedHatEnterpriseLinux : aws.sdk.kotlin.services.ec2.model.CapacityReservationInstancePlatform() {
        override val value: kotlin.String = "Red Hat Enterprise Linux"
        override fun toString(): kotlin.String = value
    }

    public object RhelWithHa : aws.sdk.kotlin.services.ec2.model.CapacityReservationInstancePlatform() {
        override val value: kotlin.String = "RHEL with HA"
        override fun toString(): kotlin.String = value
    }

    public object RhelWithHaAndSqlServerEnterprise : aws.sdk.kotlin.services.ec2.model.CapacityReservationInstancePlatform() {
        override val value: kotlin.String = "RHEL with HA and SQL Server Enterprise"
        override fun toString(): kotlin.String = value
    }

    public object RhelWithHaAndSqlServerStandard : aws.sdk.kotlin.services.ec2.model.CapacityReservationInstancePlatform() {
        override val value: kotlin.String = "RHEL with HA and SQL Server Standard"
        override fun toString(): kotlin.String = value
    }

    public object RhelWithSqlServerEnterprise : aws.sdk.kotlin.services.ec2.model.CapacityReservationInstancePlatform() {
        override val value: kotlin.String = "RHEL with SQL Server Enterprise"
        override fun toString(): kotlin.String = value
    }

    public object RhelWithSqlServerStandard : aws.sdk.kotlin.services.ec2.model.CapacityReservationInstancePlatform() {
        override val value: kotlin.String = "RHEL with SQL Server Standard"
        override fun toString(): kotlin.String = value
    }

    public object RhelWithSqlServerWeb : aws.sdk.kotlin.services.ec2.model.CapacityReservationInstancePlatform() {
        override val value: kotlin.String = "RHEL with SQL Server Web"
        override fun toString(): kotlin.String = value
    }

    public object SuseLinux : aws.sdk.kotlin.services.ec2.model.CapacityReservationInstancePlatform() {
        override val value: kotlin.String = "SUSE Linux"
        override fun toString(): kotlin.String = value
    }

    public object Windows : aws.sdk.kotlin.services.ec2.model.CapacityReservationInstancePlatform() {
        override val value: kotlin.String = "Windows"
        override fun toString(): kotlin.String = value
    }

    public object WindowsWithSqlServer : aws.sdk.kotlin.services.ec2.model.CapacityReservationInstancePlatform() {
        override val value: kotlin.String = "Windows with SQL Server"
        override fun toString(): kotlin.String = value
    }

    public object WindowsWithSqlServerEnterprise : aws.sdk.kotlin.services.ec2.model.CapacityReservationInstancePlatform() {
        override val value: kotlin.String = "Windows with SQL Server Enterprise"
        override fun toString(): kotlin.String = value
    }

    public object WindowsWithSqlServerStandard : aws.sdk.kotlin.services.ec2.model.CapacityReservationInstancePlatform() {
        override val value: kotlin.String = "Windows with SQL Server Standard"
        override fun toString(): kotlin.String = value
    }

    public object WindowsWithSqlServerWeb : aws.sdk.kotlin.services.ec2.model.CapacityReservationInstancePlatform() {
        override val value: kotlin.String = "Windows with SQL Server Web"
        override fun toString(): kotlin.String = value
    }

    public data class SdkUnknown(override val value: kotlin.String) : aws.sdk.kotlin.services.ec2.model.CapacityReservationInstancePlatform() {
        override fun toString(): kotlin.String = value
    }

    public companion object {
        /**
         * Convert a raw value to one of the sealed variants or [SdkUnknown]
         */
        public fun fromValue(str: kotlin.String): aws.sdk.kotlin.services.ec2.model.CapacityReservationInstancePlatform = when(str) {
            "Linux/UNIX" -> LinuxUnix
            "Linux with SQL Server Enterprise" -> LinuxWithSqlServerEnterprise
            "Linux with SQL Server Standard" -> LinuxWithSqlServerStandard
            "Linux with SQL Server Web" -> LinuxWithSqlServerWeb
            "Red Hat Enterprise Linux" -> RedHatEnterpriseLinux
            "RHEL with HA" -> RhelWithHa
            "RHEL with HA and SQL Server Enterprise" -> RhelWithHaAndSqlServerEnterprise
            "RHEL with HA and SQL Server Standard" -> RhelWithHaAndSqlServerStandard
            "RHEL with SQL Server Enterprise" -> RhelWithSqlServerEnterprise
            "RHEL with SQL Server Standard" -> RhelWithSqlServerStandard
            "RHEL with SQL Server Web" -> RhelWithSqlServerWeb
            "SUSE Linux" -> SuseLinux
            "Windows" -> Windows
            "Windows with SQL Server" -> WindowsWithSqlServer
            "Windows with SQL Server Enterprise" -> WindowsWithSqlServerEnterprise
            "Windows with SQL Server Standard" -> WindowsWithSqlServerStandard
            "Windows with SQL Server Web" -> WindowsWithSqlServerWeb
            else -> SdkUnknown(str)
        }

        /**
         * Get a list of all possible variants
         */
        public fun values(): kotlin.collections.List<aws.sdk.kotlin.services.ec2.model.CapacityReservationInstancePlatform> = listOf(
            LinuxUnix,
            LinuxWithSqlServerEnterprise,
            LinuxWithSqlServerStandard,
            LinuxWithSqlServerWeb,
            RedHatEnterpriseLinux,
            RhelWithHa,
            RhelWithHaAndSqlServerEnterprise,
            RhelWithHaAndSqlServerStandard,
            RhelWithSqlServerEnterprise,
            RhelWithSqlServerStandard,
            RhelWithSqlServerWeb,
            SuseLinux,
            Windows,
            WindowsWithSqlServer,
            WindowsWithSqlServerEnterprise,
            WindowsWithSqlServerStandard,
            WindowsWithSqlServerWeb
        )
    }
}
