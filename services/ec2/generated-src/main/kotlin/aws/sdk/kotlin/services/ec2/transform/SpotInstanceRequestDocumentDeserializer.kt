// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.transform

import aws.sdk.kotlin.services.ec2.model.InstanceInterruptionBehavior
import aws.sdk.kotlin.services.ec2.model.RiProductDescription
import aws.sdk.kotlin.services.ec2.model.SpotInstanceRequest
import aws.sdk.kotlin.services.ec2.model.SpotInstanceState
import aws.sdk.kotlin.services.ec2.model.SpotInstanceType
import aws.sdk.kotlin.services.ec2.model.Tag
import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.serde.xml.XmlCollectionName
import aws.smithy.kotlin.runtime.serde.xml.XmlDeserializer
import aws.smithy.kotlin.runtime.serde.xml.XmlNamespace
import aws.smithy.kotlin.runtime.serde.xml.XmlSerialName
import aws.smithy.kotlin.runtime.time.Instant

internal fun deserializeSpotInstanceRequestDocument(deserializer: Deserializer): SpotInstanceRequest {
    val builder = SpotInstanceRequest.Builder()
    val ACTUALBLOCKHOURLYPRICE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("actualBlockHourlyPrice"))
    val AVAILABILITYZONEGROUP_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("availabilityZoneGroup"))
    val BLOCKDURATIONMINUTES_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, XmlSerialName("blockDurationMinutes"))
    val CREATETIME_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Timestamp, XmlSerialName("createTime"))
    val FAULT_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("fault"))
    val INSTANCEID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("instanceId"))
    val INSTANCEINTERRUPTIONBEHAVIOR_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("instanceInterruptionBehavior"))
    val LAUNCHGROUP_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("launchGroup"))
    val LAUNCHSPECIFICATION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("launchSpecification"))
    val LAUNCHEDAVAILABILITYZONE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("launchedAvailabilityZone"))
    val PRODUCTDESCRIPTION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("productDescription"))
    val SPOTINSTANCEREQUESTID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("spotInstanceRequestId"))
    val SPOTPRICE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("spotPrice"))
    val STATE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("state"))
    val STATUS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("status"))
    val TAGS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("tagSet"), XmlCollectionName("item"))
    val TYPE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("type"))
    val VALIDFROM_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Timestamp, XmlSerialName("validFrom"))
    val VALIDUNTIL_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Timestamp, XmlSerialName("validUntil"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(XmlSerialName("SpotInstanceRequest"))
        trait(XmlNamespace("http://ec2.amazonaws.com/doc/2016-11-15"))
        field(ACTUALBLOCKHOURLYPRICE_DESCRIPTOR)
        field(AVAILABILITYZONEGROUP_DESCRIPTOR)
        field(BLOCKDURATIONMINUTES_DESCRIPTOR)
        field(CREATETIME_DESCRIPTOR)
        field(FAULT_DESCRIPTOR)
        field(INSTANCEID_DESCRIPTOR)
        field(INSTANCEINTERRUPTIONBEHAVIOR_DESCRIPTOR)
        field(LAUNCHGROUP_DESCRIPTOR)
        field(LAUNCHSPECIFICATION_DESCRIPTOR)
        field(LAUNCHEDAVAILABILITYZONE_DESCRIPTOR)
        field(PRODUCTDESCRIPTION_DESCRIPTOR)
        field(SPOTINSTANCEREQUESTID_DESCRIPTOR)
        field(SPOTPRICE_DESCRIPTOR)
        field(STATE_DESCRIPTOR)
        field(STATUS_DESCRIPTOR)
        field(TAGS_DESCRIPTOR)
        field(TYPE_DESCRIPTOR)
        field(VALIDFROM_DESCRIPTOR)
        field(VALIDUNTIL_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                ACTUALBLOCKHOURLYPRICE_DESCRIPTOR.index -> builder.actualBlockHourlyPrice = deserializeString()
                AVAILABILITYZONEGROUP_DESCRIPTOR.index -> builder.availabilityZoneGroup = deserializeString()
                BLOCKDURATIONMINUTES_DESCRIPTOR.index -> builder.blockDurationMinutes = deserializeInt()
                CREATETIME_DESCRIPTOR.index -> builder.createTime = deserializeString().let { Instant.fromIso8601(it) }
                FAULT_DESCRIPTOR.index -> builder.fault = deserializeSpotInstanceStateFaultDocument(deserializer)
                INSTANCEID_DESCRIPTOR.index -> builder.instanceId = deserializeString()
                INSTANCEINTERRUPTIONBEHAVIOR_DESCRIPTOR.index -> builder.instanceInterruptionBehavior = deserializeString().let { InstanceInterruptionBehavior.fromValue(it) }
                LAUNCHGROUP_DESCRIPTOR.index -> builder.launchGroup = deserializeString()
                LAUNCHSPECIFICATION_DESCRIPTOR.index -> builder.launchSpecification = deserializeLaunchSpecificationDocument(deserializer)
                LAUNCHEDAVAILABILITYZONE_DESCRIPTOR.index -> builder.launchedAvailabilityZone = deserializeString()
                PRODUCTDESCRIPTION_DESCRIPTOR.index -> builder.productDescription = deserializeString().let { RiProductDescription.fromValue(it) }
                SPOTINSTANCEREQUESTID_DESCRIPTOR.index -> builder.spotInstanceRequestId = deserializeString()
                SPOTPRICE_DESCRIPTOR.index -> builder.spotPrice = deserializeString()
                STATE_DESCRIPTOR.index -> builder.state = deserializeString().let { SpotInstanceState.fromValue(it) }
                STATUS_DESCRIPTOR.index -> builder.status = deserializeSpotInstanceStatusDocument(deserializer)
                TAGS_DESCRIPTOR.index -> builder.tags =
                    deserializer.deserializeList(TAGS_DESCRIPTOR) {
                        val col0 = mutableListOf<Tag>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeTagDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                TYPE_DESCRIPTOR.index -> builder.type = deserializeString().let { SpotInstanceType.fromValue(it) }
                VALIDFROM_DESCRIPTOR.index -> builder.validFrom = deserializeString().let { Instant.fromIso8601(it) }
                VALIDUNTIL_DESCRIPTOR.index -> builder.validUntil = deserializeString().let { Instant.fromIso8601(it) }
                null -> break@loop
                else -> skipValue()
            }
        }
    }
    return builder.build()
}
