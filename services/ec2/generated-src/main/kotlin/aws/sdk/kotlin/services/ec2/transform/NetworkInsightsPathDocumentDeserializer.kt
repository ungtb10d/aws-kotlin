// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.transform

import aws.sdk.kotlin.services.ec2.model.NetworkInsightsPath
import aws.sdk.kotlin.services.ec2.model.Protocol
import aws.sdk.kotlin.services.ec2.model.Tag
import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.serde.xml.XmlCollectionName
import aws.smithy.kotlin.runtime.serde.xml.XmlDeserializer
import aws.smithy.kotlin.runtime.serde.xml.XmlNamespace
import aws.smithy.kotlin.runtime.serde.xml.XmlSerialName
import aws.smithy.kotlin.runtime.time.Instant

internal fun deserializeNetworkInsightsPathDocument(deserializer: Deserializer): NetworkInsightsPath {
    val builder = NetworkInsightsPath.Builder()
    val CREATEDDATE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Timestamp, XmlSerialName("createdDate"))
    val DESTINATION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("destination"))
    val DESTINATIONIP_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("destinationIp"))
    val DESTINATIONPORT_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, XmlSerialName("destinationPort"))
    val NETWORKINSIGHTSPATHARN_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("networkInsightsPathArn"))
    val NETWORKINSIGHTSPATHID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("networkInsightsPathId"))
    val PROTOCOL_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("protocol"))
    val SOURCE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("source"))
    val SOURCEIP_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("sourceIp"))
    val TAGS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("tagSet"), XmlCollectionName("item"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(XmlSerialName("NetworkInsightsPath"))
        trait(XmlNamespace("http://ec2.amazonaws.com/doc/2016-11-15"))
        field(CREATEDDATE_DESCRIPTOR)
        field(DESTINATION_DESCRIPTOR)
        field(DESTINATIONIP_DESCRIPTOR)
        field(DESTINATIONPORT_DESCRIPTOR)
        field(NETWORKINSIGHTSPATHARN_DESCRIPTOR)
        field(NETWORKINSIGHTSPATHID_DESCRIPTOR)
        field(PROTOCOL_DESCRIPTOR)
        field(SOURCE_DESCRIPTOR)
        field(SOURCEIP_DESCRIPTOR)
        field(TAGS_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                CREATEDDATE_DESCRIPTOR.index -> builder.createdDate = deserializeString().let { Instant.fromIso8601(it) }
                DESTINATION_DESCRIPTOR.index -> builder.destination = deserializeString()
                DESTINATIONIP_DESCRIPTOR.index -> builder.destinationIp = deserializeString()
                DESTINATIONPORT_DESCRIPTOR.index -> builder.destinationPort = deserializeInt()
                NETWORKINSIGHTSPATHARN_DESCRIPTOR.index -> builder.networkInsightsPathArn = deserializeString()
                NETWORKINSIGHTSPATHID_DESCRIPTOR.index -> builder.networkInsightsPathId = deserializeString()
                PROTOCOL_DESCRIPTOR.index -> builder.protocol = deserializeString().let { Protocol.fromValue(it) }
                SOURCE_DESCRIPTOR.index -> builder.source = deserializeString()
                SOURCEIP_DESCRIPTOR.index -> builder.sourceIp = deserializeString()
                TAGS_DESCRIPTOR.index -> builder.tags =
                    deserializer.deserializeList(TAGS_DESCRIPTOR) {
                        val col0 = mutableListOf<Tag>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeTagDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                null -> break@loop
                else -> skipValue()
            }
        }
    }
    return builder.build()
}
