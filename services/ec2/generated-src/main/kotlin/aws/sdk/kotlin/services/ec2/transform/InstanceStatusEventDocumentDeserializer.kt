// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.transform

import aws.sdk.kotlin.services.ec2.model.EventCode
import aws.sdk.kotlin.services.ec2.model.InstanceStatusEvent
import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.serde.xml.XmlDeserializer
import aws.smithy.kotlin.runtime.serde.xml.XmlNamespace
import aws.smithy.kotlin.runtime.serde.xml.XmlSerialName
import aws.smithy.kotlin.runtime.time.Instant

internal fun deserializeInstanceStatusEventDocument(deserializer: Deserializer): InstanceStatusEvent {
    val builder = InstanceStatusEvent.Builder()
    val CODE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("code"))
    val DESCRIPTION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("description"))
    val INSTANCEEVENTID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("instanceEventId"))
    val NOTAFTER_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Timestamp, XmlSerialName("notAfter"))
    val NOTBEFORE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Timestamp, XmlSerialName("notBefore"))
    val NOTBEFOREDEADLINE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Timestamp, XmlSerialName("notBeforeDeadline"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(XmlSerialName("InstanceStatusEvent"))
        trait(XmlNamespace("http://ec2.amazonaws.com/doc/2016-11-15"))
        field(CODE_DESCRIPTOR)
        field(DESCRIPTION_DESCRIPTOR)
        field(INSTANCEEVENTID_DESCRIPTOR)
        field(NOTAFTER_DESCRIPTOR)
        field(NOTBEFORE_DESCRIPTOR)
        field(NOTBEFOREDEADLINE_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                CODE_DESCRIPTOR.index -> builder.code = deserializeString().let { EventCode.fromValue(it) }
                DESCRIPTION_DESCRIPTOR.index -> builder.description = deserializeString()
                INSTANCEEVENTID_DESCRIPTOR.index -> builder.instanceEventId = deserializeString()
                NOTAFTER_DESCRIPTOR.index -> builder.notAfter = deserializeString().let { Instant.fromIso8601(it) }
                NOTBEFORE_DESCRIPTOR.index -> builder.notBefore = deserializeString().let { Instant.fromIso8601(it) }
                NOTBEFOREDEADLINE_DESCRIPTOR.index -> builder.notBeforeDeadline = deserializeString().let { Instant.fromIso8601(it) }
                null -> break@loop
                else -> skipValue()
            }
        }
    }
    return builder.build()
}
