// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.transform

import aws.sdk.kotlin.services.ec2.model.CapacityReservationInstancePlatform
import aws.sdk.kotlin.services.ec2.model.FleetCapacityReservation
import aws.sdk.kotlin.services.ec2.model.InstanceType
import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.serde.xml.XmlDeserializer
import aws.smithy.kotlin.runtime.serde.xml.XmlNamespace
import aws.smithy.kotlin.runtime.serde.xml.XmlSerialName
import aws.smithy.kotlin.runtime.time.Instant

internal fun deserializeFleetCapacityReservationDocument(deserializer: Deserializer): FleetCapacityReservation {
    val builder = FleetCapacityReservation.Builder()
    val AVAILABILITYZONE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("availabilityZone"))
    val AVAILABILITYZONEID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("availabilityZoneId"))
    val CAPACITYRESERVATIONID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("capacityReservationId"))
    val CREATEDATE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Timestamp, XmlSerialName("createDate"))
    val EBSOPTIMIZED_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Boolean, XmlSerialName("ebsOptimized"))
    val FULFILLEDCAPACITY_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Double, XmlSerialName("fulfilledCapacity"))
    val INSTANCEPLATFORM_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Enum, XmlSerialName("instancePlatform"))
    val INSTANCETYPE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Enum, XmlSerialName("instanceType"))
    val PRIORITY_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, XmlSerialName("priority"))
    val TOTALINSTANCECOUNT_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, XmlSerialName("totalInstanceCount"))
    val WEIGHT_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Double, XmlSerialName("weight"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(XmlSerialName("FleetCapacityReservation"))
        trait(XmlNamespace("http://ec2.amazonaws.com/doc/2016-11-15"))
        field(AVAILABILITYZONE_DESCRIPTOR)
        field(AVAILABILITYZONEID_DESCRIPTOR)
        field(CAPACITYRESERVATIONID_DESCRIPTOR)
        field(CREATEDATE_DESCRIPTOR)
        field(EBSOPTIMIZED_DESCRIPTOR)
        field(FULFILLEDCAPACITY_DESCRIPTOR)
        field(INSTANCEPLATFORM_DESCRIPTOR)
        field(INSTANCETYPE_DESCRIPTOR)
        field(PRIORITY_DESCRIPTOR)
        field(TOTALINSTANCECOUNT_DESCRIPTOR)
        field(WEIGHT_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                AVAILABILITYZONE_DESCRIPTOR.index -> builder.availabilityZone = deserializeString()
                AVAILABILITYZONEID_DESCRIPTOR.index -> builder.availabilityZoneId = deserializeString()
                CAPACITYRESERVATIONID_DESCRIPTOR.index -> builder.capacityReservationId = deserializeString()
                CREATEDATE_DESCRIPTOR.index -> builder.createDate = deserializeString().let { Instant.fromIso8601(it) }
                EBSOPTIMIZED_DESCRIPTOR.index -> builder.ebsOptimized = deserializeBoolean()
                FULFILLEDCAPACITY_DESCRIPTOR.index -> builder.fulfilledCapacity = deserializeDouble()
                INSTANCEPLATFORM_DESCRIPTOR.index -> builder.instancePlatform = deserializeString().let { CapacityReservationInstancePlatform.fromValue(it) }
                INSTANCETYPE_DESCRIPTOR.index -> builder.instanceType = deserializeString().let { InstanceType.fromValue(it) }
                PRIORITY_DESCRIPTOR.index -> builder.priority = deserializeInt()
                TOTALINSTANCECOUNT_DESCRIPTOR.index -> builder.totalInstanceCount = deserializeInt()
                WEIGHT_DESCRIPTOR.index -> builder.weight = deserializeDouble()
                null -> break@loop
                else -> skipValue()
            }
        }
    }
    return builder.build()
}
