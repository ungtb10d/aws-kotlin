// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.transform

import aws.sdk.kotlin.services.ec2.model.IkeVersionsListValue
import aws.sdk.kotlin.services.ec2.model.Phase1DhGroupNumbersListValue
import aws.sdk.kotlin.services.ec2.model.Phase1EncryptionAlgorithmsListValue
import aws.sdk.kotlin.services.ec2.model.Phase1IntegrityAlgorithmsListValue
import aws.sdk.kotlin.services.ec2.model.Phase2DhGroupNumbersListValue
import aws.sdk.kotlin.services.ec2.model.Phase2EncryptionAlgorithmsListValue
import aws.sdk.kotlin.services.ec2.model.Phase2IntegrityAlgorithmsListValue
import aws.sdk.kotlin.services.ec2.model.TunnelOption
import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.serde.xml.XmlCollectionName
import aws.smithy.kotlin.runtime.serde.xml.XmlDeserializer
import aws.smithy.kotlin.runtime.serde.xml.XmlNamespace
import aws.smithy.kotlin.runtime.serde.xml.XmlSerialName

internal fun deserializeTunnelOptionDocument(deserializer: Deserializer): TunnelOption {
    val builder = TunnelOption.Builder()
    val DPDTIMEOUTACTION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("dpdTimeoutAction"))
    val DPDTIMEOUTSECONDS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, XmlSerialName("dpdTimeoutSeconds"))
    val IKEVERSIONS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("ikeVersionSet"), XmlCollectionName("item"))
    val OUTSIDEIPADDRESS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("outsideIpAddress"))
    val PHASE1DHGROUPNUMBERS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("phase1DHGroupNumberSet"), XmlCollectionName("item"))
    val PHASE1ENCRYPTIONALGORITHMS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("phase1EncryptionAlgorithmSet"), XmlCollectionName("item"))
    val PHASE1INTEGRITYALGORITHMS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("phase1IntegrityAlgorithmSet"), XmlCollectionName("item"))
    val PHASE1LIFETIMESECONDS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, XmlSerialName("phase1LifetimeSeconds"))
    val PHASE2DHGROUPNUMBERS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("phase2DHGroupNumberSet"), XmlCollectionName("item"))
    val PHASE2ENCRYPTIONALGORITHMS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("phase2EncryptionAlgorithmSet"), XmlCollectionName("item"))
    val PHASE2INTEGRITYALGORITHMS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("phase2IntegrityAlgorithmSet"), XmlCollectionName("item"))
    val PHASE2LIFETIMESECONDS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, XmlSerialName("phase2LifetimeSeconds"))
    val PRESHAREDKEY_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("preSharedKey"))
    val REKEYFUZZPERCENTAGE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, XmlSerialName("rekeyFuzzPercentage"))
    val REKEYMARGINTIMESECONDS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, XmlSerialName("rekeyMarginTimeSeconds"))
    val REPLAYWINDOWSIZE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, XmlSerialName("replayWindowSize"))
    val STARTUPACTION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("startupAction"))
    val TUNNELINSIDECIDR_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("tunnelInsideCidr"))
    val TUNNELINSIDEIPV6CIDR_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("tunnelInsideIpv6Cidr"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(XmlSerialName("TunnelOption"))
        trait(XmlNamespace("http://ec2.amazonaws.com/doc/2016-11-15"))
        field(DPDTIMEOUTACTION_DESCRIPTOR)
        field(DPDTIMEOUTSECONDS_DESCRIPTOR)
        field(IKEVERSIONS_DESCRIPTOR)
        field(OUTSIDEIPADDRESS_DESCRIPTOR)
        field(PHASE1DHGROUPNUMBERS_DESCRIPTOR)
        field(PHASE1ENCRYPTIONALGORITHMS_DESCRIPTOR)
        field(PHASE1INTEGRITYALGORITHMS_DESCRIPTOR)
        field(PHASE1LIFETIMESECONDS_DESCRIPTOR)
        field(PHASE2DHGROUPNUMBERS_DESCRIPTOR)
        field(PHASE2ENCRYPTIONALGORITHMS_DESCRIPTOR)
        field(PHASE2INTEGRITYALGORITHMS_DESCRIPTOR)
        field(PHASE2LIFETIMESECONDS_DESCRIPTOR)
        field(PRESHAREDKEY_DESCRIPTOR)
        field(REKEYFUZZPERCENTAGE_DESCRIPTOR)
        field(REKEYMARGINTIMESECONDS_DESCRIPTOR)
        field(REPLAYWINDOWSIZE_DESCRIPTOR)
        field(STARTUPACTION_DESCRIPTOR)
        field(TUNNELINSIDECIDR_DESCRIPTOR)
        field(TUNNELINSIDEIPV6CIDR_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                DPDTIMEOUTACTION_DESCRIPTOR.index -> builder.dpdTimeoutAction = deserializeString()
                DPDTIMEOUTSECONDS_DESCRIPTOR.index -> builder.dpdTimeoutSeconds = deserializeInt()
                IKEVERSIONS_DESCRIPTOR.index -> builder.ikeVersions =
                    deserializer.deserializeList(IKEVERSIONS_DESCRIPTOR) {
                        val col0 = mutableListOf<IkeVersionsListValue>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeIkeVersionsListValueDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                OUTSIDEIPADDRESS_DESCRIPTOR.index -> builder.outsideIpAddress = deserializeString()
                PHASE1DHGROUPNUMBERS_DESCRIPTOR.index -> builder.phase1DhGroupNumbers =
                    deserializer.deserializeList(PHASE1DHGROUPNUMBERS_DESCRIPTOR) {
                        val col0 = mutableListOf<Phase1DhGroupNumbersListValue>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializePhase1DhGroupNumbersListValueDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                PHASE1ENCRYPTIONALGORITHMS_DESCRIPTOR.index -> builder.phase1EncryptionAlgorithms =
                    deserializer.deserializeList(PHASE1ENCRYPTIONALGORITHMS_DESCRIPTOR) {
                        val col0 = mutableListOf<Phase1EncryptionAlgorithmsListValue>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializePhase1EncryptionAlgorithmsListValueDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                PHASE1INTEGRITYALGORITHMS_DESCRIPTOR.index -> builder.phase1IntegrityAlgorithms =
                    deserializer.deserializeList(PHASE1INTEGRITYALGORITHMS_DESCRIPTOR) {
                        val col0 = mutableListOf<Phase1IntegrityAlgorithmsListValue>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializePhase1IntegrityAlgorithmsListValueDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                PHASE1LIFETIMESECONDS_DESCRIPTOR.index -> builder.phase1LifetimeSeconds = deserializeInt()
                PHASE2DHGROUPNUMBERS_DESCRIPTOR.index -> builder.phase2DhGroupNumbers =
                    deserializer.deserializeList(PHASE2DHGROUPNUMBERS_DESCRIPTOR) {
                        val col0 = mutableListOf<Phase2DhGroupNumbersListValue>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializePhase2DhGroupNumbersListValueDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                PHASE2ENCRYPTIONALGORITHMS_DESCRIPTOR.index -> builder.phase2EncryptionAlgorithms =
                    deserializer.deserializeList(PHASE2ENCRYPTIONALGORITHMS_DESCRIPTOR) {
                        val col0 = mutableListOf<Phase2EncryptionAlgorithmsListValue>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializePhase2EncryptionAlgorithmsListValueDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                PHASE2INTEGRITYALGORITHMS_DESCRIPTOR.index -> builder.phase2IntegrityAlgorithms =
                    deserializer.deserializeList(PHASE2INTEGRITYALGORITHMS_DESCRIPTOR) {
                        val col0 = mutableListOf<Phase2IntegrityAlgorithmsListValue>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializePhase2IntegrityAlgorithmsListValueDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                PHASE2LIFETIMESECONDS_DESCRIPTOR.index -> builder.phase2LifetimeSeconds = deserializeInt()
                PRESHAREDKEY_DESCRIPTOR.index -> builder.preSharedKey = deserializeString()
                REKEYFUZZPERCENTAGE_DESCRIPTOR.index -> builder.rekeyFuzzPercentage = deserializeInt()
                REKEYMARGINTIMESECONDS_DESCRIPTOR.index -> builder.rekeyMarginTimeSeconds = deserializeInt()
                REPLAYWINDOWSIZE_DESCRIPTOR.index -> builder.replayWindowSize = deserializeInt()
                STARTUPACTION_DESCRIPTOR.index -> builder.startupAction = deserializeString()
                TUNNELINSIDECIDR_DESCRIPTOR.index -> builder.tunnelInsideCidr = deserializeString()
                TUNNELINSIDEIPV6CIDR_DESCRIPTOR.index -> builder.tunnelInsideIpv6Cidr = deserializeString()
                null -> break@loop
                else -> skipValue()
            }
        }
    }
    return builder.build()
}
