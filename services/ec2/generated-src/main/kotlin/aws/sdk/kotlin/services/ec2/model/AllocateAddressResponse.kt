// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



public class AllocateAddressResponse private constructor(builder: Builder) {
    /**
     * &#91;EC2-VPC&#93; The ID that Amazon Web Services assigns to represent the allocation of the Elastic IP address for use with instances in a VPC.
     */
    public val allocationId: kotlin.String? = builder.allocationId
    /**
     * The carrier IP address. This option is only available for network interfaces which reside in a subnet in a Wavelength Zone (for example an EC2 instance).
     */
    public val carrierIp: kotlin.String? = builder.carrierIp
    /**
     * The customer-owned IP address.
     */
    public val customerOwnedIp: kotlin.String? = builder.customerOwnedIp
    /**
     * The ID of the customer-owned address pool.
     */
    public val customerOwnedIpv4Pool: kotlin.String? = builder.customerOwnedIpv4Pool
    /**
     * Indicates whether the Elastic IP address is for use with instances in a VPC (`vpc`) or instances in EC2-Classic (`standard`).
     */
    public val domain: aws.sdk.kotlin.services.ec2.model.DomainType? = builder.domain
    /**
     * The set of Availability Zones, Local Zones, or Wavelength Zones from which Amazon Web Services advertises IP addresses.
     */
    public val networkBorderGroup: kotlin.String? = builder.networkBorderGroup
    /**
     * The Elastic IP address.
     */
    public val publicIp: kotlin.String? = builder.publicIp
    /**
     * The ID of an address pool.
     */
    public val publicIpv4Pool: kotlin.String? = builder.publicIpv4Pool

    public companion object {
        public operator fun invoke(block: Builder.() -> kotlin.Unit): aws.sdk.kotlin.services.ec2.model.AllocateAddressResponse = Builder().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("AllocateAddressResponse(")
        append("allocationId=$allocationId,")
        append("carrierIp=$carrierIp,")
        append("customerOwnedIp=$customerOwnedIp,")
        append("customerOwnedIpv4Pool=$customerOwnedIpv4Pool,")
        append("domain=$domain,")
        append("networkBorderGroup=$networkBorderGroup,")
        append("publicIp=$publicIp,")
        append("publicIpv4Pool=$publicIpv4Pool)")
    }

    override fun hashCode(): kotlin.Int {
        var result = allocationId?.hashCode() ?: 0
        result = 31 * result + (carrierIp?.hashCode() ?: 0)
        result = 31 * result + (customerOwnedIp?.hashCode() ?: 0)
        result = 31 * result + (customerOwnedIpv4Pool?.hashCode() ?: 0)
        result = 31 * result + (domain?.hashCode() ?: 0)
        result = 31 * result + (networkBorderGroup?.hashCode() ?: 0)
        result = 31 * result + (publicIp?.hashCode() ?: 0)
        result = 31 * result + (publicIpv4Pool?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as AllocateAddressResponse

        if (allocationId != other.allocationId) return false
        if (carrierIp != other.carrierIp) return false
        if (customerOwnedIp != other.customerOwnedIp) return false
        if (customerOwnedIpv4Pool != other.customerOwnedIpv4Pool) return false
        if (domain != other.domain) return false
        if (networkBorderGroup != other.networkBorderGroup) return false
        if (publicIp != other.publicIp) return false
        if (publicIpv4Pool != other.publicIpv4Pool) return false

        return true
    }

    public inline fun copy(block: Builder.() -> kotlin.Unit = {}): aws.sdk.kotlin.services.ec2.model.AllocateAddressResponse = Builder(this).apply(block).build()

    public class Builder {
        /**
         * &#91;EC2-VPC&#93; The ID that Amazon Web Services assigns to represent the allocation of the Elastic IP address for use with instances in a VPC.
         */
        public var allocationId: kotlin.String? = null
        /**
         * The carrier IP address. This option is only available for network interfaces which reside in a subnet in a Wavelength Zone (for example an EC2 instance).
         */
        public var carrierIp: kotlin.String? = null
        /**
         * The customer-owned IP address.
         */
        public var customerOwnedIp: kotlin.String? = null
        /**
         * The ID of the customer-owned address pool.
         */
        public var customerOwnedIpv4Pool: kotlin.String? = null
        /**
         * Indicates whether the Elastic IP address is for use with instances in a VPC (`vpc`) or instances in EC2-Classic (`standard`).
         */
        public var domain: aws.sdk.kotlin.services.ec2.model.DomainType? = null
        /**
         * The set of Availability Zones, Local Zones, or Wavelength Zones from which Amazon Web Services advertises IP addresses.
         */
        public var networkBorderGroup: kotlin.String? = null
        /**
         * The Elastic IP address.
         */
        public var publicIp: kotlin.String? = null
        /**
         * The ID of an address pool.
         */
        public var publicIpv4Pool: kotlin.String? = null

        @PublishedApi
        internal constructor()
        @PublishedApi
        internal constructor(x: aws.sdk.kotlin.services.ec2.model.AllocateAddressResponse) : this() {
            this.allocationId = x.allocationId
            this.carrierIp = x.carrierIp
            this.customerOwnedIp = x.customerOwnedIp
            this.customerOwnedIpv4Pool = x.customerOwnedIpv4Pool
            this.domain = x.domain
            this.networkBorderGroup = x.networkBorderGroup
            this.publicIp = x.publicIp
            this.publicIpv4Pool = x.publicIpv4Pool
        }

        @PublishedApi
        internal fun build(): aws.sdk.kotlin.services.ec2.model.AllocateAddressResponse = AllocateAddressResponse(this)
    }
}
