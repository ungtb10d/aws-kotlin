// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.transform

import aws.sdk.kotlin.services.ec2.model.AcceleratorManufacturer
import aws.sdk.kotlin.services.ec2.model.AcceleratorName
import aws.sdk.kotlin.services.ec2.model.AcceleratorType
import aws.sdk.kotlin.services.ec2.model.BareMetal
import aws.sdk.kotlin.services.ec2.model.BurstablePerformance
import aws.sdk.kotlin.services.ec2.model.CpuManufacturer
import aws.sdk.kotlin.services.ec2.model.InstanceGeneration
import aws.sdk.kotlin.services.ec2.model.InstanceRequirements
import aws.sdk.kotlin.services.ec2.model.LocalStorage
import aws.sdk.kotlin.services.ec2.model.LocalStorageType
import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.serde.xml.XmlCollectionName
import aws.smithy.kotlin.runtime.serde.xml.XmlDeserializer
import aws.smithy.kotlin.runtime.serde.xml.XmlNamespace
import aws.smithy.kotlin.runtime.serde.xml.XmlSerialName

internal fun deserializeInstanceRequirementsDocument(deserializer: Deserializer): InstanceRequirements {
    val builder = InstanceRequirements.Builder()
    val ACCELERATORCOUNT_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("acceleratorCount"))
    val ACCELERATORMANUFACTURERS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("acceleratorManufacturerSet"), XmlCollectionName("item"))
    val ACCELERATORNAMES_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("acceleratorNameSet"), XmlCollectionName("item"))
    val ACCELERATORTOTALMEMORYMIB_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("acceleratorTotalMemoryMiB"))
    val ACCELERATORTYPES_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("acceleratorTypeSet"), XmlCollectionName("item"))
    val BAREMETAL_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Enum, XmlSerialName("bareMetal"))
    val BASELINEEBSBANDWIDTHMBPS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("baselineEbsBandwidthMbps"))
    val BURSTABLEPERFORMANCE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Enum, XmlSerialName("burstablePerformance"))
    val CPUMANUFACTURERS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("cpuManufacturerSet"), XmlCollectionName("item"))
    val EXCLUDEDINSTANCETYPES_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("excludedInstanceTypeSet"), XmlCollectionName("item"))
    val INSTANCEGENERATIONS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("instanceGenerationSet"), XmlCollectionName("item"))
    val LOCALSTORAGE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Enum, XmlSerialName("localStorage"))
    val LOCALSTORAGETYPES_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("localStorageTypeSet"), XmlCollectionName("item"))
    val MEMORYGIBPERVCPU_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("memoryGiBPerVCpu"))
    val MEMORYMIB_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("memoryMiB"))
    val NETWORKINTERFACECOUNT_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("networkInterfaceCount"))
    val ONDEMANDMAXPRICEPERCENTAGEOVERLOWESTPRICE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, XmlSerialName("onDemandMaxPricePercentageOverLowestPrice"))
    val REQUIREHIBERNATESUPPORT_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Boolean, XmlSerialName("requireHibernateSupport"))
    val SPOTMAXPRICEPERCENTAGEOVERLOWESTPRICE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, XmlSerialName("spotMaxPricePercentageOverLowestPrice"))
    val TOTALLOCALSTORAGEGB_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("totalLocalStorageGB"))
    val VCPUCOUNT_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("vCpuCount"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(XmlSerialName("InstanceRequirements"))
        trait(XmlNamespace("http://ec2.amazonaws.com/doc/2016-11-15"))
        field(ACCELERATORCOUNT_DESCRIPTOR)
        field(ACCELERATORMANUFACTURERS_DESCRIPTOR)
        field(ACCELERATORNAMES_DESCRIPTOR)
        field(ACCELERATORTOTALMEMORYMIB_DESCRIPTOR)
        field(ACCELERATORTYPES_DESCRIPTOR)
        field(BAREMETAL_DESCRIPTOR)
        field(BASELINEEBSBANDWIDTHMBPS_DESCRIPTOR)
        field(BURSTABLEPERFORMANCE_DESCRIPTOR)
        field(CPUMANUFACTURERS_DESCRIPTOR)
        field(EXCLUDEDINSTANCETYPES_DESCRIPTOR)
        field(INSTANCEGENERATIONS_DESCRIPTOR)
        field(LOCALSTORAGE_DESCRIPTOR)
        field(LOCALSTORAGETYPES_DESCRIPTOR)
        field(MEMORYGIBPERVCPU_DESCRIPTOR)
        field(MEMORYMIB_DESCRIPTOR)
        field(NETWORKINTERFACECOUNT_DESCRIPTOR)
        field(ONDEMANDMAXPRICEPERCENTAGEOVERLOWESTPRICE_DESCRIPTOR)
        field(REQUIREHIBERNATESUPPORT_DESCRIPTOR)
        field(SPOTMAXPRICEPERCENTAGEOVERLOWESTPRICE_DESCRIPTOR)
        field(TOTALLOCALSTORAGEGB_DESCRIPTOR)
        field(VCPUCOUNT_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                ACCELERATORCOUNT_DESCRIPTOR.index -> builder.acceleratorCount = deserializeAcceleratorCountDocument(deserializer)
                ACCELERATORMANUFACTURERS_DESCRIPTOR.index -> builder.acceleratorManufacturers =
                    deserializer.deserializeList(ACCELERATORMANUFACTURERS_DESCRIPTOR) {
                        val col0 = mutableListOf<AcceleratorManufacturer>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeString().let { AcceleratorManufacturer.fromValue(it) } } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                ACCELERATORNAMES_DESCRIPTOR.index -> builder.acceleratorNames =
                    deserializer.deserializeList(ACCELERATORNAMES_DESCRIPTOR) {
                        val col0 = mutableListOf<AcceleratorName>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeString().let { AcceleratorName.fromValue(it) } } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                ACCELERATORTOTALMEMORYMIB_DESCRIPTOR.index -> builder.acceleratorTotalMemoryMib = deserializeAcceleratorTotalMemoryMibDocument(deserializer)
                ACCELERATORTYPES_DESCRIPTOR.index -> builder.acceleratorTypes =
                    deserializer.deserializeList(ACCELERATORTYPES_DESCRIPTOR) {
                        val col0 = mutableListOf<AcceleratorType>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeString().let { AcceleratorType.fromValue(it) } } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                BAREMETAL_DESCRIPTOR.index -> builder.bareMetal = deserializeString().let { BareMetal.fromValue(it) }
                BASELINEEBSBANDWIDTHMBPS_DESCRIPTOR.index -> builder.baselineEbsBandwidthMbps = deserializeBaselineEbsBandwidthMbpsDocument(deserializer)
                BURSTABLEPERFORMANCE_DESCRIPTOR.index -> builder.burstablePerformance = deserializeString().let { BurstablePerformance.fromValue(it) }
                CPUMANUFACTURERS_DESCRIPTOR.index -> builder.cpuManufacturers =
                    deserializer.deserializeList(CPUMANUFACTURERS_DESCRIPTOR) {
                        val col0 = mutableListOf<CpuManufacturer>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeString().let { CpuManufacturer.fromValue(it) } } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                EXCLUDEDINSTANCETYPES_DESCRIPTOR.index -> builder.excludedInstanceTypes =
                    deserializer.deserializeList(EXCLUDEDINSTANCETYPES_DESCRIPTOR) {
                        val col0 = mutableListOf<String>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeString() } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                INSTANCEGENERATIONS_DESCRIPTOR.index -> builder.instanceGenerations =
                    deserializer.deserializeList(INSTANCEGENERATIONS_DESCRIPTOR) {
                        val col0 = mutableListOf<InstanceGeneration>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeString().let { InstanceGeneration.fromValue(it) } } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                LOCALSTORAGE_DESCRIPTOR.index -> builder.localStorage = deserializeString().let { LocalStorage.fromValue(it) }
                LOCALSTORAGETYPES_DESCRIPTOR.index -> builder.localStorageTypes =
                    deserializer.deserializeList(LOCALSTORAGETYPES_DESCRIPTOR) {
                        val col0 = mutableListOf<LocalStorageType>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeString().let { LocalStorageType.fromValue(it) } } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                MEMORYGIBPERVCPU_DESCRIPTOR.index -> builder.memoryGiBPerVCpu = deserializeMemoryGiBPerVCpuDocument(deserializer)
                MEMORYMIB_DESCRIPTOR.index -> builder.memoryMib = deserializeMemoryMibDocument(deserializer)
                NETWORKINTERFACECOUNT_DESCRIPTOR.index -> builder.networkInterfaceCount = deserializeNetworkInterfaceCountDocument(deserializer)
                ONDEMANDMAXPRICEPERCENTAGEOVERLOWESTPRICE_DESCRIPTOR.index -> builder.onDemandMaxPricePercentageOverLowestPrice = deserializeInt()
                REQUIREHIBERNATESUPPORT_DESCRIPTOR.index -> builder.requireHibernateSupport = deserializeBoolean()
                SPOTMAXPRICEPERCENTAGEOVERLOWESTPRICE_DESCRIPTOR.index -> builder.spotMaxPricePercentageOverLowestPrice = deserializeInt()
                TOTALLOCALSTORAGEGB_DESCRIPTOR.index -> builder.totalLocalStorageGb = deserializeTotalLocalStorageGbDocument(deserializer)
                VCPUCOUNT_DESCRIPTOR.index -> builder.vCpuCount = deserializeVCpuCountRangeDocument(deserializer)
                null -> break@loop
                else -> skipValue()
            }
        }
    }
    return builder.build()
}
