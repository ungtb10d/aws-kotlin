// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model

import aws.smithy.kotlin.runtime.time.Instant

/**
 * Describe details about a fast-launch enabled Windows image that meets the requested criteria. Criteria are defined by the `DescribeFastLaunchImages` action filters.
 */
public class DescribeFastLaunchImagesSuccessItem private constructor(builder: Builder) {
    /**
     * The image ID that identifies the fast-launch enabled Windows image.
     */
    public val imageId: kotlin.String? = builder.imageId
    /**
     * The launch template that the fast-launch enabled Windows AMI uses when it launches Windows instances from pre-provisioned snapshots.
     */
    public val launchTemplate: aws.sdk.kotlin.services.ec2.model.FastLaunchLaunchTemplateSpecificationResponse? = builder.launchTemplate
    /**
     * The maximum number of parallel instances that are launched for creating resources.
     */
    public val maxParallelLaunches: kotlin.Int? = builder.maxParallelLaunches
    /**
     * The owner ID for the fast-launch enabled Windows AMI.
     */
    public val ownerId: kotlin.String? = builder.ownerId
    /**
     * The resource type that is used for pre-provisioning the Windows AMI. Supported values include: `snapshot`.
     */
    public val resourceType: aws.sdk.kotlin.services.ec2.model.FastLaunchResourceType? = builder.resourceType
    /**
     * A group of parameters that are used for pre-provisioning the associated Windows AMI using snapshots.
     */
    public val snapshotConfiguration: aws.sdk.kotlin.services.ec2.model.FastLaunchSnapshotConfigurationResponse? = builder.snapshotConfiguration
    /**
     * The current state of faster launching for the specified Windows AMI.
     */
    public val state: aws.sdk.kotlin.services.ec2.model.FastLaunchStateCode? = builder.state
    /**
     * The reason that faster launching for the Windows AMI changed to the current state.
     */
    public val stateTransitionReason: kotlin.String? = builder.stateTransitionReason
    /**
     * The time that faster launching for the Windows AMI changed to the current state.
     */
    public val stateTransitionTime: aws.smithy.kotlin.runtime.time.Instant? = builder.stateTransitionTime

    public companion object {
        public operator fun invoke(block: Builder.() -> kotlin.Unit): aws.sdk.kotlin.services.ec2.model.DescribeFastLaunchImagesSuccessItem = Builder().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("DescribeFastLaunchImagesSuccessItem(")
        append("imageId=$imageId,")
        append("launchTemplate=$launchTemplate,")
        append("maxParallelLaunches=$maxParallelLaunches,")
        append("ownerId=$ownerId,")
        append("resourceType=$resourceType,")
        append("snapshotConfiguration=$snapshotConfiguration,")
        append("state=$state,")
        append("stateTransitionReason=$stateTransitionReason,")
        append("stateTransitionTime=$stateTransitionTime)")
    }

    override fun hashCode(): kotlin.Int {
        var result = imageId?.hashCode() ?: 0
        result = 31 * result + (launchTemplate?.hashCode() ?: 0)
        result = 31 * result + (maxParallelLaunches ?: 0)
        result = 31 * result + (ownerId?.hashCode() ?: 0)
        result = 31 * result + (resourceType?.hashCode() ?: 0)
        result = 31 * result + (snapshotConfiguration?.hashCode() ?: 0)
        result = 31 * result + (state?.hashCode() ?: 0)
        result = 31 * result + (stateTransitionReason?.hashCode() ?: 0)
        result = 31 * result + (stateTransitionTime?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as DescribeFastLaunchImagesSuccessItem

        if (imageId != other.imageId) return false
        if (launchTemplate != other.launchTemplate) return false
        if (maxParallelLaunches != other.maxParallelLaunches) return false
        if (ownerId != other.ownerId) return false
        if (resourceType != other.resourceType) return false
        if (snapshotConfiguration != other.snapshotConfiguration) return false
        if (state != other.state) return false
        if (stateTransitionReason != other.stateTransitionReason) return false
        if (stateTransitionTime != other.stateTransitionTime) return false

        return true
    }

    public inline fun copy(block: Builder.() -> kotlin.Unit = {}): aws.sdk.kotlin.services.ec2.model.DescribeFastLaunchImagesSuccessItem = Builder(this).apply(block).build()

    public class Builder {
        /**
         * The image ID that identifies the fast-launch enabled Windows image.
         */
        public var imageId: kotlin.String? = null
        /**
         * The launch template that the fast-launch enabled Windows AMI uses when it launches Windows instances from pre-provisioned snapshots.
         */
        public var launchTemplate: aws.sdk.kotlin.services.ec2.model.FastLaunchLaunchTemplateSpecificationResponse? = null
        /**
         * The maximum number of parallel instances that are launched for creating resources.
         */
        public var maxParallelLaunches: kotlin.Int? = null
        /**
         * The owner ID for the fast-launch enabled Windows AMI.
         */
        public var ownerId: kotlin.String? = null
        /**
         * The resource type that is used for pre-provisioning the Windows AMI. Supported values include: `snapshot`.
         */
        public var resourceType: aws.sdk.kotlin.services.ec2.model.FastLaunchResourceType? = null
        /**
         * A group of parameters that are used for pre-provisioning the associated Windows AMI using snapshots.
         */
        public var snapshotConfiguration: aws.sdk.kotlin.services.ec2.model.FastLaunchSnapshotConfigurationResponse? = null
        /**
         * The current state of faster launching for the specified Windows AMI.
         */
        public var state: aws.sdk.kotlin.services.ec2.model.FastLaunchStateCode? = null
        /**
         * The reason that faster launching for the Windows AMI changed to the current state.
         */
        public var stateTransitionReason: kotlin.String? = null
        /**
         * The time that faster launching for the Windows AMI changed to the current state.
         */
        public var stateTransitionTime: aws.smithy.kotlin.runtime.time.Instant? = null

        @PublishedApi
        internal constructor()
        @PublishedApi
        internal constructor(x: aws.sdk.kotlin.services.ec2.model.DescribeFastLaunchImagesSuccessItem) : this() {
            this.imageId = x.imageId
            this.launchTemplate = x.launchTemplate
            this.maxParallelLaunches = x.maxParallelLaunches
            this.ownerId = x.ownerId
            this.resourceType = x.resourceType
            this.snapshotConfiguration = x.snapshotConfiguration
            this.state = x.state
            this.stateTransitionReason = x.stateTransitionReason
            this.stateTransitionTime = x.stateTransitionTime
        }

        @PublishedApi
        internal fun build(): aws.sdk.kotlin.services.ec2.model.DescribeFastLaunchImagesSuccessItem = DescribeFastLaunchImagesSuccessItem(this)

        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.FastLaunchLaunchTemplateSpecificationResponse] inside the given [block]
         */
        public fun launchTemplate(block: aws.sdk.kotlin.services.ec2.model.FastLaunchLaunchTemplateSpecificationResponse.Builder.() -> kotlin.Unit) {
            this.launchTemplate = aws.sdk.kotlin.services.ec2.model.FastLaunchLaunchTemplateSpecificationResponse.invoke(block)
        }

        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.FastLaunchSnapshotConfigurationResponse] inside the given [block]
         */
        public fun snapshotConfiguration(block: aws.sdk.kotlin.services.ec2.model.FastLaunchSnapshotConfigurationResponse.Builder.() -> kotlin.Unit) {
            this.snapshotConfiguration = aws.sdk.kotlin.services.ec2.model.FastLaunchSnapshotConfigurationResponse.invoke(block)
        }
    }
}
