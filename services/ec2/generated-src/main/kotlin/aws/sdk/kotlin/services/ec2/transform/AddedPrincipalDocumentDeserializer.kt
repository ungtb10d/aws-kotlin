// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.transform

import aws.sdk.kotlin.services.ec2.model.AddedPrincipal
import aws.sdk.kotlin.services.ec2.model.PrincipalType
import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.serde.xml.XmlDeserializer
import aws.smithy.kotlin.runtime.serde.xml.XmlNamespace
import aws.smithy.kotlin.runtime.serde.xml.XmlSerialName

internal fun deserializeAddedPrincipalDocument(deserializer: Deserializer): AddedPrincipal {
    val builder = AddedPrincipal.Builder()
    val PRINCIPAL_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("principal"))
    val PRINCIPALTYPE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Enum, XmlSerialName("principalType"))
    val SERVICEID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("serviceId"))
    val SERVICEPERMISSIONID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("servicePermissionId"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(XmlSerialName("AddedPrincipal"))
        trait(XmlNamespace("http://ec2.amazonaws.com/doc/2016-11-15"))
        field(PRINCIPAL_DESCRIPTOR)
        field(PRINCIPALTYPE_DESCRIPTOR)
        field(SERVICEID_DESCRIPTOR)
        field(SERVICEPERMISSIONID_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                PRINCIPAL_DESCRIPTOR.index -> builder.principal = deserializeString()
                PRINCIPALTYPE_DESCRIPTOR.index -> builder.principalType = deserializeString().let { PrincipalType.fromValue(it) }
                SERVICEID_DESCRIPTOR.index -> builder.serviceId = deserializeString()
                SERVICEPERMISSIONID_DESCRIPTOR.index -> builder.servicePermissionId = deserializeString()
                null -> break@loop
                else -> skipValue()
            }
        }
    }
    return builder.build()
}
