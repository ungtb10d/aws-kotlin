// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



public class ModifyPrivateDnsNameOptionsRequest private constructor(builder: Builder) {
    /**
     * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is `DryRunOperation`. Otherwise, it is `UnauthorizedOperation`.
     */
    public val dryRun: kotlin.Boolean? = builder.dryRun
    /**
     * Indicates whether to respond to DNS queries for instance hostnames with DNS A records.
     */
    public val enableResourceNameDnsARecord: kotlin.Boolean? = builder.enableResourceNameDnsARecord
    /**
     * Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records.
     */
    public val enableResourceNameDnsAaaaRecord: kotlin.Boolean? = builder.enableResourceNameDnsAaaaRecord
    /**
     * The ID of the instance.
     */
    public val instanceId: kotlin.String? = builder.instanceId
    /**
     * The type of hostname for EC2 instances. For IPv4 only subnets, an instance DNS name must be based on the instance IPv4 address. For IPv6 only subnets, an instance DNS name must be based on the instance ID. For dual-stack subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID.
     */
    public val privateDnsHostnameType: aws.sdk.kotlin.services.ec2.model.HostnameType? = builder.privateDnsHostnameType

    public companion object {
        public operator fun invoke(block: Builder.() -> kotlin.Unit): aws.sdk.kotlin.services.ec2.model.ModifyPrivateDnsNameOptionsRequest = Builder().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("ModifyPrivateDnsNameOptionsRequest(")
        append("dryRun=$dryRun,")
        append("enableResourceNameDnsARecord=$enableResourceNameDnsARecord,")
        append("enableResourceNameDnsAaaaRecord=$enableResourceNameDnsAaaaRecord,")
        append("instanceId=$instanceId,")
        append("privateDnsHostnameType=$privateDnsHostnameType)")
    }

    override fun hashCode(): kotlin.Int {
        var result = dryRun?.hashCode() ?: 0
        result = 31 * result + (enableResourceNameDnsARecord?.hashCode() ?: 0)
        result = 31 * result + (enableResourceNameDnsAaaaRecord?.hashCode() ?: 0)
        result = 31 * result + (instanceId?.hashCode() ?: 0)
        result = 31 * result + (privateDnsHostnameType?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as ModifyPrivateDnsNameOptionsRequest

        if (dryRun != other.dryRun) return false
        if (enableResourceNameDnsARecord != other.enableResourceNameDnsARecord) return false
        if (enableResourceNameDnsAaaaRecord != other.enableResourceNameDnsAaaaRecord) return false
        if (instanceId != other.instanceId) return false
        if (privateDnsHostnameType != other.privateDnsHostnameType) return false

        return true
    }

    public inline fun copy(block: Builder.() -> kotlin.Unit = {}): aws.sdk.kotlin.services.ec2.model.ModifyPrivateDnsNameOptionsRequest = Builder(this).apply(block).build()

    public class Builder {
        /**
         * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is `DryRunOperation`. Otherwise, it is `UnauthorizedOperation`.
         */
        public var dryRun: kotlin.Boolean? = null
        /**
         * Indicates whether to respond to DNS queries for instance hostnames with DNS A records.
         */
        public var enableResourceNameDnsARecord: kotlin.Boolean? = null
        /**
         * Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records.
         */
        public var enableResourceNameDnsAaaaRecord: kotlin.Boolean? = null
        /**
         * The ID of the instance.
         */
        public var instanceId: kotlin.String? = null
        /**
         * The type of hostname for EC2 instances. For IPv4 only subnets, an instance DNS name must be based on the instance IPv4 address. For IPv6 only subnets, an instance DNS name must be based on the instance ID. For dual-stack subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID.
         */
        public var privateDnsHostnameType: aws.sdk.kotlin.services.ec2.model.HostnameType? = null

        @PublishedApi
        internal constructor()
        @PublishedApi
        internal constructor(x: aws.sdk.kotlin.services.ec2.model.ModifyPrivateDnsNameOptionsRequest) : this() {
            this.dryRun = x.dryRun
            this.enableResourceNameDnsARecord = x.enableResourceNameDnsARecord
            this.enableResourceNameDnsAaaaRecord = x.enableResourceNameDnsAaaaRecord
            this.instanceId = x.instanceId
            this.privateDnsHostnameType = x.privateDnsHostnameType
        }

        @PublishedApi
        internal fun build(): aws.sdk.kotlin.services.ec2.model.ModifyPrivateDnsNameOptionsRequest = ModifyPrivateDnsNameOptionsRequest(this)
    }
}
