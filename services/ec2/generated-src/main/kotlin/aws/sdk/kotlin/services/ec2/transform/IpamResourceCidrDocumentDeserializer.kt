// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.transform

import aws.sdk.kotlin.services.ec2.model.IpamComplianceStatus
import aws.sdk.kotlin.services.ec2.model.IpamManagementState
import aws.sdk.kotlin.services.ec2.model.IpamOverlapStatus
import aws.sdk.kotlin.services.ec2.model.IpamResourceCidr
import aws.sdk.kotlin.services.ec2.model.IpamResourceTag
import aws.sdk.kotlin.services.ec2.model.IpamResourceType
import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.serde.xml.XmlCollectionName
import aws.smithy.kotlin.runtime.serde.xml.XmlDeserializer
import aws.smithy.kotlin.runtime.serde.xml.XmlNamespace
import aws.smithy.kotlin.runtime.serde.xml.XmlSerialName

internal fun deserializeIpamResourceCidrDocument(deserializer: Deserializer): IpamResourceCidr {
    val builder = IpamResourceCidr.Builder()
    val COMPLIANCESTATUS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("complianceStatus"))
    val IPUSAGE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Double, XmlSerialName("ipUsage"))
    val IPAMID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("ipamId"))
    val IPAMPOOLID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("ipamPoolId"))
    val IPAMSCOPEID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("ipamScopeId"))
    val MANAGEMENTSTATE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("managementState"))
    val OVERLAPSTATUS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("overlapStatus"))
    val RESOURCECIDR_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("resourceCidr"))
    val RESOURCEID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("resourceId"))
    val RESOURCENAME_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("resourceName"))
    val RESOURCEOWNERID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("resourceOwnerId"))
    val RESOURCEREGION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("resourceRegion"))
    val RESOURCETAGS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("resourceTagSet"), XmlCollectionName("item"))
    val RESOURCETYPE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("resourceType"))
    val VPCID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("vpcId"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(XmlSerialName("IpamResourceCidr"))
        trait(XmlNamespace("http://ec2.amazonaws.com/doc/2016-11-15"))
        field(COMPLIANCESTATUS_DESCRIPTOR)
        field(IPUSAGE_DESCRIPTOR)
        field(IPAMID_DESCRIPTOR)
        field(IPAMPOOLID_DESCRIPTOR)
        field(IPAMSCOPEID_DESCRIPTOR)
        field(MANAGEMENTSTATE_DESCRIPTOR)
        field(OVERLAPSTATUS_DESCRIPTOR)
        field(RESOURCECIDR_DESCRIPTOR)
        field(RESOURCEID_DESCRIPTOR)
        field(RESOURCENAME_DESCRIPTOR)
        field(RESOURCEOWNERID_DESCRIPTOR)
        field(RESOURCEREGION_DESCRIPTOR)
        field(RESOURCETAGS_DESCRIPTOR)
        field(RESOURCETYPE_DESCRIPTOR)
        field(VPCID_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                COMPLIANCESTATUS_DESCRIPTOR.index -> builder.complianceStatus = deserializeString().let { IpamComplianceStatus.fromValue(it) }
                IPUSAGE_DESCRIPTOR.index -> builder.ipUsage = deserializeDouble()
                IPAMID_DESCRIPTOR.index -> builder.ipamId = deserializeString()
                IPAMPOOLID_DESCRIPTOR.index -> builder.ipamPoolId = deserializeString()
                IPAMSCOPEID_DESCRIPTOR.index -> builder.ipamScopeId = deserializeString()
                MANAGEMENTSTATE_DESCRIPTOR.index -> builder.managementState = deserializeString().let { IpamManagementState.fromValue(it) }
                OVERLAPSTATUS_DESCRIPTOR.index -> builder.overlapStatus = deserializeString().let { IpamOverlapStatus.fromValue(it) }
                RESOURCECIDR_DESCRIPTOR.index -> builder.resourceCidr = deserializeString()
                RESOURCEID_DESCRIPTOR.index -> builder.resourceId = deserializeString()
                RESOURCENAME_DESCRIPTOR.index -> builder.resourceName = deserializeString()
                RESOURCEOWNERID_DESCRIPTOR.index -> builder.resourceOwnerId = deserializeString()
                RESOURCEREGION_DESCRIPTOR.index -> builder.resourceRegion = deserializeString()
                RESOURCETAGS_DESCRIPTOR.index -> builder.resourceTags =
                    deserializer.deserializeList(RESOURCETAGS_DESCRIPTOR) {
                        val col0 = mutableListOf<IpamResourceTag>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeIpamResourceTagDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                RESOURCETYPE_DESCRIPTOR.index -> builder.resourceType = deserializeString().let { IpamResourceType.fromValue(it) }
                VPCID_DESCRIPTOR.index -> builder.vpcId = deserializeString()
                null -> break@loop
                else -> skipValue()
            }
        }
    }
    return builder.build()
}
