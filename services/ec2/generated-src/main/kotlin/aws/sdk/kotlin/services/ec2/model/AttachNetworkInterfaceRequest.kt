// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Contains the parameters for AttachNetworkInterface.
 */
public class AttachNetworkInterfaceRequest private constructor(builder: Builder) {
    /**
     * The index of the device for the network interface attachment.
     */
    public val deviceIndex: kotlin.Int? = builder.deviceIndex
    /**
     * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is `DryRunOperation`. Otherwise, it is `UnauthorizedOperation`.
     */
    public val dryRun: kotlin.Boolean? = builder.dryRun
    /**
     * The ID of the instance.
     */
    public val instanceId: kotlin.String? = builder.instanceId
    /**
     * The index of the network card. Some instance types support multiple network cards. The primary network interface must be assigned to network card index 0. The default is network card index 0.
     */
    public val networkCardIndex: kotlin.Int? = builder.networkCardIndex
    /**
     * The ID of the network interface.
     */
    public val networkInterfaceId: kotlin.String? = builder.networkInterfaceId

    public companion object {
        public operator fun invoke(block: Builder.() -> kotlin.Unit): aws.sdk.kotlin.services.ec2.model.AttachNetworkInterfaceRequest = Builder().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("AttachNetworkInterfaceRequest(")
        append("deviceIndex=$deviceIndex,")
        append("dryRun=$dryRun,")
        append("instanceId=$instanceId,")
        append("networkCardIndex=$networkCardIndex,")
        append("networkInterfaceId=$networkInterfaceId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = deviceIndex ?: 0
        result = 31 * result + (dryRun?.hashCode() ?: 0)
        result = 31 * result + (instanceId?.hashCode() ?: 0)
        result = 31 * result + (networkCardIndex ?: 0)
        result = 31 * result + (networkInterfaceId?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as AttachNetworkInterfaceRequest

        if (deviceIndex != other.deviceIndex) return false
        if (dryRun != other.dryRun) return false
        if (instanceId != other.instanceId) return false
        if (networkCardIndex != other.networkCardIndex) return false
        if (networkInterfaceId != other.networkInterfaceId) return false

        return true
    }

    public inline fun copy(block: Builder.() -> kotlin.Unit = {}): aws.sdk.kotlin.services.ec2.model.AttachNetworkInterfaceRequest = Builder(this).apply(block).build()

    public class Builder {
        /**
         * The index of the device for the network interface attachment.
         */
        public var deviceIndex: kotlin.Int? = null
        /**
         * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is `DryRunOperation`. Otherwise, it is `UnauthorizedOperation`.
         */
        public var dryRun: kotlin.Boolean? = null
        /**
         * The ID of the instance.
         */
        public var instanceId: kotlin.String? = null
        /**
         * The index of the network card. Some instance types support multiple network cards. The primary network interface must be assigned to network card index 0. The default is network card index 0.
         */
        public var networkCardIndex: kotlin.Int? = null
        /**
         * The ID of the network interface.
         */
        public var networkInterfaceId: kotlin.String? = null

        @PublishedApi
        internal constructor()
        @PublishedApi
        internal constructor(x: aws.sdk.kotlin.services.ec2.model.AttachNetworkInterfaceRequest) : this() {
            this.deviceIndex = x.deviceIndex
            this.dryRun = x.dryRun
            this.instanceId = x.instanceId
            this.networkCardIndex = x.networkCardIndex
            this.networkInterfaceId = x.networkInterfaceId
        }

        @PublishedApi
        internal fun build(): aws.sdk.kotlin.services.ec2.model.AttachNetworkInterfaceRequest = AttachNetworkInterfaceRequest(this)
    }
}
