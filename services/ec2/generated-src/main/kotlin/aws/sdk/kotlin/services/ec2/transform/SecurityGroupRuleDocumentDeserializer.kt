// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.transform

import aws.sdk.kotlin.services.ec2.model.SecurityGroupRule
import aws.sdk.kotlin.services.ec2.model.Tag
import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.serde.xml.XmlCollectionName
import aws.smithy.kotlin.runtime.serde.xml.XmlDeserializer
import aws.smithy.kotlin.runtime.serde.xml.XmlNamespace
import aws.smithy.kotlin.runtime.serde.xml.XmlSerialName

internal fun deserializeSecurityGroupRuleDocument(deserializer: Deserializer): SecurityGroupRule {
    val builder = SecurityGroupRule.Builder()
    val CIDRIPV4_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("cidrIpv4"))
    val CIDRIPV6_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("cidrIpv6"))
    val DESCRIPTION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("description"))
    val FROMPORT_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, XmlSerialName("fromPort"))
    val GROUPID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("groupId"))
    val GROUPOWNERID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("groupOwnerId"))
    val IPPROTOCOL_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("ipProtocol"))
    val ISEGRESS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Boolean, XmlSerialName("isEgress"))
    val PREFIXLISTID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("prefixListId"))
    val REFERENCEDGROUPINFO_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("referencedGroupInfo"))
    val SECURITYGROUPRULEID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("securityGroupRuleId"))
    val TAGS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("tagSet"), XmlCollectionName("item"))
    val TOPORT_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, XmlSerialName("toPort"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(XmlSerialName("SecurityGroupRule"))
        trait(XmlNamespace("http://ec2.amazonaws.com/doc/2016-11-15"))
        field(CIDRIPV4_DESCRIPTOR)
        field(CIDRIPV6_DESCRIPTOR)
        field(DESCRIPTION_DESCRIPTOR)
        field(FROMPORT_DESCRIPTOR)
        field(GROUPID_DESCRIPTOR)
        field(GROUPOWNERID_DESCRIPTOR)
        field(IPPROTOCOL_DESCRIPTOR)
        field(ISEGRESS_DESCRIPTOR)
        field(PREFIXLISTID_DESCRIPTOR)
        field(REFERENCEDGROUPINFO_DESCRIPTOR)
        field(SECURITYGROUPRULEID_DESCRIPTOR)
        field(TAGS_DESCRIPTOR)
        field(TOPORT_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                CIDRIPV4_DESCRIPTOR.index -> builder.cidrIpv4 = deserializeString()
                CIDRIPV6_DESCRIPTOR.index -> builder.cidrIpv6 = deserializeString()
                DESCRIPTION_DESCRIPTOR.index -> builder.description = deserializeString()
                FROMPORT_DESCRIPTOR.index -> builder.fromPort = deserializeInt()
                GROUPID_DESCRIPTOR.index -> builder.groupId = deserializeString()
                GROUPOWNERID_DESCRIPTOR.index -> builder.groupOwnerId = deserializeString()
                IPPROTOCOL_DESCRIPTOR.index -> builder.ipProtocol = deserializeString()
                ISEGRESS_DESCRIPTOR.index -> builder.isEgress = deserializeBoolean()
                PREFIXLISTID_DESCRIPTOR.index -> builder.prefixListId = deserializeString()
                REFERENCEDGROUPINFO_DESCRIPTOR.index -> builder.referencedGroupInfo = deserializeReferencedSecurityGroupDocument(deserializer)
                SECURITYGROUPRULEID_DESCRIPTOR.index -> builder.securityGroupRuleId = deserializeString()
                TAGS_DESCRIPTOR.index -> builder.tags =
                    deserializer.deserializeList(TAGS_DESCRIPTOR) {
                        val col0 = mutableListOf<Tag>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeTagDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                TOPORT_DESCRIPTOR.index -> builder.toPort = deserializeInt()
                null -> break@loop
                else -> skipValue()
            }
        }
    }
    return builder.build()
}
