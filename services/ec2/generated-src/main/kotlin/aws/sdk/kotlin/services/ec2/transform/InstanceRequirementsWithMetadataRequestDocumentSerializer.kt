// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.transform

import aws.sdk.kotlin.services.ec2.model.InstanceRequirementsWithMetadataRequest
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.Serializer
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.formurl.FormUrlFlattened
import aws.smithy.kotlin.runtime.serde.formurl.FormUrlSerialName
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct

internal fun serializeInstanceRequirementsWithMetadataRequestDocument(serializer: Serializer, input: InstanceRequirementsWithMetadataRequest) {
    val ARCHITECTURETYPES_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, FormUrlSerialName("ArchitectureType"), FormUrlFlattened)
    val INSTANCEREQUIREMENTS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, FormUrlSerialName("InstanceRequirements"))
    val VIRTUALIZATIONTYPES_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, FormUrlSerialName("VirtualizationType"), FormUrlFlattened)
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(FormUrlSerialName("InstanceRequirementsWithMetadataRequest"))
        field(ARCHITECTURETYPES_DESCRIPTOR)
        field(INSTANCEREQUIREMENTS_DESCRIPTOR)
        field(VIRTUALIZATIONTYPES_DESCRIPTOR)
    }

    serializer.serializeStruct(OBJ_DESCRIPTOR) {
        if (input.architectureTypes != null) {
            listField(ARCHITECTURETYPES_DESCRIPTOR) {
                for (el0 in input.architectureTypes) {
                    serializeString(el0.value)
                }
            }
        }
        if (input.virtualizationTypes != null) {
            listField(VIRTUALIZATIONTYPES_DESCRIPTOR) {
                for (el0 in input.virtualizationTypes) {
                    serializeString(el0.value)
                }
            }
        }
        input.instanceRequirements?.let { field(INSTANCEREQUIREMENTS_DESCRIPTOR, it, ::serializeInstanceRequirementsRequestDocument) }
    }
}
