// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * The event window.
 */
public class InstanceEventWindow private constructor(builder: Builder) {
    /**
     * One or more targets associated with the event window.
     */
    public val associationTarget: aws.sdk.kotlin.services.ec2.model.InstanceEventWindowAssociationTarget? = builder.associationTarget
    /**
     * The cron expression defined for the event window.
     */
    public val cronExpression: kotlin.String? = builder.cronExpression
    /**
     * The ID of the event window.
     */
    public val instanceEventWindowId: kotlin.String? = builder.instanceEventWindowId
    /**
     * The name of the event window.
     */
    public val name: kotlin.String? = builder.name
    /**
     * The current state of the event window.
     */
    public val state: aws.sdk.kotlin.services.ec2.model.InstanceEventWindowState? = builder.state
    /**
     * The instance tags associated with the event window.
     */
    public val tags: List<Tag>? = builder.tags
    /**
     * One or more time ranges defined for the event window.
     */
    public val timeRanges: List<InstanceEventWindowTimeRange>? = builder.timeRanges

    public companion object {
        public operator fun invoke(block: Builder.() -> kotlin.Unit): aws.sdk.kotlin.services.ec2.model.InstanceEventWindow = Builder().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("InstanceEventWindow(")
        append("associationTarget=$associationTarget,")
        append("cronExpression=$cronExpression,")
        append("instanceEventWindowId=$instanceEventWindowId,")
        append("name=$name,")
        append("state=$state,")
        append("tags=$tags,")
        append("timeRanges=$timeRanges)")
    }

    override fun hashCode(): kotlin.Int {
        var result = associationTarget?.hashCode() ?: 0
        result = 31 * result + (cronExpression?.hashCode() ?: 0)
        result = 31 * result + (instanceEventWindowId?.hashCode() ?: 0)
        result = 31 * result + (name?.hashCode() ?: 0)
        result = 31 * result + (state?.hashCode() ?: 0)
        result = 31 * result + (tags?.hashCode() ?: 0)
        result = 31 * result + (timeRanges?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as InstanceEventWindow

        if (associationTarget != other.associationTarget) return false
        if (cronExpression != other.cronExpression) return false
        if (instanceEventWindowId != other.instanceEventWindowId) return false
        if (name != other.name) return false
        if (state != other.state) return false
        if (tags != other.tags) return false
        if (timeRanges != other.timeRanges) return false

        return true
    }

    public inline fun copy(block: Builder.() -> kotlin.Unit = {}): aws.sdk.kotlin.services.ec2.model.InstanceEventWindow = Builder(this).apply(block).build()

    public class Builder {
        /**
         * One or more targets associated with the event window.
         */
        public var associationTarget: aws.sdk.kotlin.services.ec2.model.InstanceEventWindowAssociationTarget? = null
        /**
         * The cron expression defined for the event window.
         */
        public var cronExpression: kotlin.String? = null
        /**
         * The ID of the event window.
         */
        public var instanceEventWindowId: kotlin.String? = null
        /**
         * The name of the event window.
         */
        public var name: kotlin.String? = null
        /**
         * The current state of the event window.
         */
        public var state: aws.sdk.kotlin.services.ec2.model.InstanceEventWindowState? = null
        /**
         * The instance tags associated with the event window.
         */
        public var tags: List<Tag>? = null
        /**
         * One or more time ranges defined for the event window.
         */
        public var timeRanges: List<InstanceEventWindowTimeRange>? = null

        @PublishedApi
        internal constructor()
        @PublishedApi
        internal constructor(x: aws.sdk.kotlin.services.ec2.model.InstanceEventWindow) : this() {
            this.associationTarget = x.associationTarget
            this.cronExpression = x.cronExpression
            this.instanceEventWindowId = x.instanceEventWindowId
            this.name = x.name
            this.state = x.state
            this.tags = x.tags
            this.timeRanges = x.timeRanges
        }

        @PublishedApi
        internal fun build(): aws.sdk.kotlin.services.ec2.model.InstanceEventWindow = InstanceEventWindow(this)

        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.InstanceEventWindowAssociationTarget] inside the given [block]
         */
        public fun associationTarget(block: aws.sdk.kotlin.services.ec2.model.InstanceEventWindowAssociationTarget.Builder.() -> kotlin.Unit) {
            this.associationTarget = aws.sdk.kotlin.services.ec2.model.InstanceEventWindowAssociationTarget.invoke(block)
        }
    }
}
