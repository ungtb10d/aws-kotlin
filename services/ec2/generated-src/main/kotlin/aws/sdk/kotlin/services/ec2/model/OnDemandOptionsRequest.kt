// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes the configuration of On-Demand Instances in an EC2 Fleet.
 */
public class OnDemandOptionsRequest private constructor(builder: Builder) {
    /**
     * The strategy that determines the order of the launch template overrides to use in fulfilling On-Demand capacity.
     *
     * `lowest-price` - EC2 Fleet uses price to determine the order, launching the lowest price first.
     *
     * `prioritized` - EC2 Fleet uses the priority that you assigned to each launch template override, launching the highest priority first.
     *
     * Default: `lowest-price`
     */
    public val allocationStrategy: aws.sdk.kotlin.services.ec2.model.FleetOnDemandAllocationStrategy? = builder.allocationStrategy
    /**
     * The strategy for using unused Capacity Reservations for fulfilling On-Demand capacity.
     *
     * Supported only for fleets of type `instant`.
     */
    public val capacityReservationOptions: aws.sdk.kotlin.services.ec2.model.CapacityReservationOptionsRequest? = builder.capacityReservationOptions
    /**
     * The maximum amount per hour for On-Demand Instances that you're willing to pay.
     */
    public val maxTotalPrice: kotlin.String? = builder.maxTotalPrice
    /**
     * The minimum target capacity for On-Demand Instances in the fleet. If the minimum target capacity is not reached, the fleet launches no instances.
     *
     * Supported only for fleets of type `instant`.
     *
     * At least one of the following must be specified: `SingleAvailabilityZone` | `SingleInstanceType`
     */
    public val minTargetCapacity: kotlin.Int? = builder.minTargetCapacity
    /**
     * Indicates that the fleet launches all On-Demand Instances into a single Availability Zone.
     *
     * Supported only for fleets of type `instant`.
     */
    public val singleAvailabilityZone: kotlin.Boolean? = builder.singleAvailabilityZone
    /**
     * Indicates that the fleet uses a single instance type to launch all On-Demand Instances in the fleet.
     *
     * Supported only for fleets of type `instant`.
     */
    public val singleInstanceType: kotlin.Boolean? = builder.singleInstanceType

    public companion object {
        public operator fun invoke(block: Builder.() -> kotlin.Unit): aws.sdk.kotlin.services.ec2.model.OnDemandOptionsRequest = Builder().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("OnDemandOptionsRequest(")
        append("allocationStrategy=$allocationStrategy,")
        append("capacityReservationOptions=$capacityReservationOptions,")
        append("maxTotalPrice=$maxTotalPrice,")
        append("minTargetCapacity=$minTargetCapacity,")
        append("singleAvailabilityZone=$singleAvailabilityZone,")
        append("singleInstanceType=$singleInstanceType)")
    }

    override fun hashCode(): kotlin.Int {
        var result = allocationStrategy?.hashCode() ?: 0
        result = 31 * result + (capacityReservationOptions?.hashCode() ?: 0)
        result = 31 * result + (maxTotalPrice?.hashCode() ?: 0)
        result = 31 * result + (minTargetCapacity ?: 0)
        result = 31 * result + (singleAvailabilityZone?.hashCode() ?: 0)
        result = 31 * result + (singleInstanceType?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as OnDemandOptionsRequest

        if (allocationStrategy != other.allocationStrategy) return false
        if (capacityReservationOptions != other.capacityReservationOptions) return false
        if (maxTotalPrice != other.maxTotalPrice) return false
        if (minTargetCapacity != other.minTargetCapacity) return false
        if (singleAvailabilityZone != other.singleAvailabilityZone) return false
        if (singleInstanceType != other.singleInstanceType) return false

        return true
    }

    public inline fun copy(block: Builder.() -> kotlin.Unit = {}): aws.sdk.kotlin.services.ec2.model.OnDemandOptionsRequest = Builder(this).apply(block).build()

    public class Builder {
        /**
         * The strategy that determines the order of the launch template overrides to use in fulfilling On-Demand capacity.
         *
         * `lowest-price` - EC2 Fleet uses price to determine the order, launching the lowest price first.
         *
         * `prioritized` - EC2 Fleet uses the priority that you assigned to each launch template override, launching the highest priority first.
         *
         * Default: `lowest-price`
         */
        public var allocationStrategy: aws.sdk.kotlin.services.ec2.model.FleetOnDemandAllocationStrategy? = null
        /**
         * The strategy for using unused Capacity Reservations for fulfilling On-Demand capacity.
         *
         * Supported only for fleets of type `instant`.
         */
        public var capacityReservationOptions: aws.sdk.kotlin.services.ec2.model.CapacityReservationOptionsRequest? = null
        /**
         * The maximum amount per hour for On-Demand Instances that you're willing to pay.
         */
        public var maxTotalPrice: kotlin.String? = null
        /**
         * The minimum target capacity for On-Demand Instances in the fleet. If the minimum target capacity is not reached, the fleet launches no instances.
         *
         * Supported only for fleets of type `instant`.
         *
         * At least one of the following must be specified: `SingleAvailabilityZone` | `SingleInstanceType`
         */
        public var minTargetCapacity: kotlin.Int? = null
        /**
         * Indicates that the fleet launches all On-Demand Instances into a single Availability Zone.
         *
         * Supported only for fleets of type `instant`.
         */
        public var singleAvailabilityZone: kotlin.Boolean? = null
        /**
         * Indicates that the fleet uses a single instance type to launch all On-Demand Instances in the fleet.
         *
         * Supported only for fleets of type `instant`.
         */
        public var singleInstanceType: kotlin.Boolean? = null

        @PublishedApi
        internal constructor()
        @PublishedApi
        internal constructor(x: aws.sdk.kotlin.services.ec2.model.OnDemandOptionsRequest) : this() {
            this.allocationStrategy = x.allocationStrategy
            this.capacityReservationOptions = x.capacityReservationOptions
            this.maxTotalPrice = x.maxTotalPrice
            this.minTargetCapacity = x.minTargetCapacity
            this.singleAvailabilityZone = x.singleAvailabilityZone
            this.singleInstanceType = x.singleInstanceType
        }

        @PublishedApi
        internal fun build(): aws.sdk.kotlin.services.ec2.model.OnDemandOptionsRequest = OnDemandOptionsRequest(this)

        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.CapacityReservationOptionsRequest] inside the given [block]
         */
        public fun capacityReservationOptions(block: aws.sdk.kotlin.services.ec2.model.CapacityReservationOptionsRequest.Builder.() -> kotlin.Unit) {
            this.capacityReservationOptions = aws.sdk.kotlin.services.ec2.model.CapacityReservationOptionsRequest.invoke(block)
        }
    }
}
