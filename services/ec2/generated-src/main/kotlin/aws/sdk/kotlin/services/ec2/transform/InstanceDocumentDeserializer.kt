// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.transform

import aws.sdk.kotlin.services.ec2.model.ArchitectureValues
import aws.sdk.kotlin.services.ec2.model.BootModeValues
import aws.sdk.kotlin.services.ec2.model.DeviceType
import aws.sdk.kotlin.services.ec2.model.ElasticGpuAssociation
import aws.sdk.kotlin.services.ec2.model.ElasticInferenceAcceleratorAssociation
import aws.sdk.kotlin.services.ec2.model.GroupIdentifier
import aws.sdk.kotlin.services.ec2.model.HypervisorType
import aws.sdk.kotlin.services.ec2.model.Instance
import aws.sdk.kotlin.services.ec2.model.InstanceBlockDeviceMapping
import aws.sdk.kotlin.services.ec2.model.InstanceLifecycleType
import aws.sdk.kotlin.services.ec2.model.InstanceNetworkInterface
import aws.sdk.kotlin.services.ec2.model.InstanceType
import aws.sdk.kotlin.services.ec2.model.LicenseConfiguration
import aws.sdk.kotlin.services.ec2.model.PlatformValues
import aws.sdk.kotlin.services.ec2.model.ProductCode
import aws.sdk.kotlin.services.ec2.model.Tag
import aws.sdk.kotlin.services.ec2.model.VirtualizationType
import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.serde.xml.XmlCollectionName
import aws.smithy.kotlin.runtime.serde.xml.XmlDeserializer
import aws.smithy.kotlin.runtime.serde.xml.XmlNamespace
import aws.smithy.kotlin.runtime.serde.xml.XmlSerialName
import aws.smithy.kotlin.runtime.time.Instant

internal fun deserializeInstanceDocument(deserializer: Deserializer): Instance {
    val builder = Instance.Builder()
    val AMILAUNCHINDEX_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, XmlSerialName("amiLaunchIndex"))
    val ARCHITECTURE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("architecture"))
    val BLOCKDEVICEMAPPINGS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("blockDeviceMapping"), XmlCollectionName("item"))
    val BOOTMODE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("bootMode"))
    val CAPACITYRESERVATIONID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("capacityReservationId"))
    val CAPACITYRESERVATIONSPECIFICATION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("capacityReservationSpecification"))
    val CLIENTTOKEN_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("clientToken"))
    val CPUOPTIONS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("cpuOptions"))
    val EBSOPTIMIZED_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Boolean, XmlSerialName("ebsOptimized"))
    val ELASTICGPUASSOCIATIONS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("elasticGpuAssociationSet"), XmlCollectionName("item"))
    val ELASTICINFERENCEACCELERATORASSOCIATIONS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("elasticInferenceAcceleratorAssociationSet"), XmlCollectionName("item"))
    val ENASUPPORT_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Boolean, XmlSerialName("enaSupport"))
    val ENCLAVEOPTIONS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("enclaveOptions"))
    val HIBERNATIONOPTIONS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("hibernationOptions"))
    val HYPERVISOR_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("hypervisor"))
    val IAMINSTANCEPROFILE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("iamInstanceProfile"))
    val IMAGEID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("imageId"))
    val INSTANCEID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("instanceId"))
    val INSTANCELIFECYCLE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("instanceLifecycle"))
    val INSTANCETYPE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("instanceType"))
    val IPV6ADDRESS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("ipv6Address"))
    val KERNELID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("kernelId"))
    val KEYNAME_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("keyName"))
    val LAUNCHTIME_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Timestamp, XmlSerialName("launchTime"))
    val LICENSES_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("licenseSet"), XmlCollectionName("item"))
    val MAINTENANCEOPTIONS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("maintenanceOptions"))
    val METADATAOPTIONS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("metadataOptions"))
    val MONITORING_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("monitoring"))
    val NETWORKINTERFACES_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("networkInterfaceSet"), XmlCollectionName("item"))
    val OUTPOSTARN_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("outpostArn"))
    val PLACEMENT_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("placement"))
    val PLATFORM_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("platform"))
    val PLATFORMDETAILS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("platformDetails"))
    val PRIVATEDNSNAME_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("privateDnsName"))
    val PRIVATEDNSNAMEOPTIONS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("privateDnsNameOptions"))
    val PRIVATEIPADDRESS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("privateIpAddress"))
    val PRODUCTCODES_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("productCodes"), XmlCollectionName("item"))
    val PUBLICDNSNAME_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("dnsName"))
    val PUBLICIPADDRESS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("ipAddress"))
    val RAMDISKID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("ramdiskId"))
    val ROOTDEVICENAME_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("rootDeviceName"))
    val ROOTDEVICETYPE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("rootDeviceType"))
    val SECURITYGROUPS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("groupSet"), XmlCollectionName("item"))
    val SOURCEDESTCHECK_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Boolean, XmlSerialName("sourceDestCheck"))
    val SPOTINSTANCEREQUESTID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("spotInstanceRequestId"))
    val SRIOVNETSUPPORT_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("sriovNetSupport"))
    val STATE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("instanceState"))
    val STATEREASON_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("stateReason"))
    val STATETRANSITIONREASON_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("reason"))
    val SUBNETID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("subnetId"))
    val TAGS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("tagSet"), XmlCollectionName("item"))
    val TPMSUPPORT_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("tpmSupport"))
    val USAGEOPERATION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("usageOperation"))
    val USAGEOPERATIONUPDATETIME_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Timestamp, XmlSerialName("usageOperationUpdateTime"))
    val VIRTUALIZATIONTYPE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("virtualizationType"))
    val VPCID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("vpcId"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(XmlSerialName("Instance"))
        trait(XmlNamespace("http://ec2.amazonaws.com/doc/2016-11-15"))
        field(AMILAUNCHINDEX_DESCRIPTOR)
        field(ARCHITECTURE_DESCRIPTOR)
        field(BLOCKDEVICEMAPPINGS_DESCRIPTOR)
        field(BOOTMODE_DESCRIPTOR)
        field(CAPACITYRESERVATIONID_DESCRIPTOR)
        field(CAPACITYRESERVATIONSPECIFICATION_DESCRIPTOR)
        field(CLIENTTOKEN_DESCRIPTOR)
        field(CPUOPTIONS_DESCRIPTOR)
        field(EBSOPTIMIZED_DESCRIPTOR)
        field(ELASTICGPUASSOCIATIONS_DESCRIPTOR)
        field(ELASTICINFERENCEACCELERATORASSOCIATIONS_DESCRIPTOR)
        field(ENASUPPORT_DESCRIPTOR)
        field(ENCLAVEOPTIONS_DESCRIPTOR)
        field(HIBERNATIONOPTIONS_DESCRIPTOR)
        field(HYPERVISOR_DESCRIPTOR)
        field(IAMINSTANCEPROFILE_DESCRIPTOR)
        field(IMAGEID_DESCRIPTOR)
        field(INSTANCEID_DESCRIPTOR)
        field(INSTANCELIFECYCLE_DESCRIPTOR)
        field(INSTANCETYPE_DESCRIPTOR)
        field(IPV6ADDRESS_DESCRIPTOR)
        field(KERNELID_DESCRIPTOR)
        field(KEYNAME_DESCRIPTOR)
        field(LAUNCHTIME_DESCRIPTOR)
        field(LICENSES_DESCRIPTOR)
        field(MAINTENANCEOPTIONS_DESCRIPTOR)
        field(METADATAOPTIONS_DESCRIPTOR)
        field(MONITORING_DESCRIPTOR)
        field(NETWORKINTERFACES_DESCRIPTOR)
        field(OUTPOSTARN_DESCRIPTOR)
        field(PLACEMENT_DESCRIPTOR)
        field(PLATFORM_DESCRIPTOR)
        field(PLATFORMDETAILS_DESCRIPTOR)
        field(PRIVATEDNSNAME_DESCRIPTOR)
        field(PRIVATEDNSNAMEOPTIONS_DESCRIPTOR)
        field(PRIVATEIPADDRESS_DESCRIPTOR)
        field(PRODUCTCODES_DESCRIPTOR)
        field(PUBLICDNSNAME_DESCRIPTOR)
        field(PUBLICIPADDRESS_DESCRIPTOR)
        field(RAMDISKID_DESCRIPTOR)
        field(ROOTDEVICENAME_DESCRIPTOR)
        field(ROOTDEVICETYPE_DESCRIPTOR)
        field(SECURITYGROUPS_DESCRIPTOR)
        field(SOURCEDESTCHECK_DESCRIPTOR)
        field(SPOTINSTANCEREQUESTID_DESCRIPTOR)
        field(SRIOVNETSUPPORT_DESCRIPTOR)
        field(STATE_DESCRIPTOR)
        field(STATEREASON_DESCRIPTOR)
        field(STATETRANSITIONREASON_DESCRIPTOR)
        field(SUBNETID_DESCRIPTOR)
        field(TAGS_DESCRIPTOR)
        field(TPMSUPPORT_DESCRIPTOR)
        field(USAGEOPERATION_DESCRIPTOR)
        field(USAGEOPERATIONUPDATETIME_DESCRIPTOR)
        field(VIRTUALIZATIONTYPE_DESCRIPTOR)
        field(VPCID_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                AMILAUNCHINDEX_DESCRIPTOR.index -> builder.amiLaunchIndex = deserializeInt()
                ARCHITECTURE_DESCRIPTOR.index -> builder.architecture = deserializeString().let { ArchitectureValues.fromValue(it) }
                BLOCKDEVICEMAPPINGS_DESCRIPTOR.index -> builder.blockDeviceMappings =
                    deserializer.deserializeList(BLOCKDEVICEMAPPINGS_DESCRIPTOR) {
                        val col0 = mutableListOf<InstanceBlockDeviceMapping>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeInstanceBlockDeviceMappingDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                BOOTMODE_DESCRIPTOR.index -> builder.bootMode = deserializeString().let { BootModeValues.fromValue(it) }
                CAPACITYRESERVATIONID_DESCRIPTOR.index -> builder.capacityReservationId = deserializeString()
                CAPACITYRESERVATIONSPECIFICATION_DESCRIPTOR.index -> builder.capacityReservationSpecification = deserializeCapacityReservationSpecificationResponseDocument(deserializer)
                CLIENTTOKEN_DESCRIPTOR.index -> builder.clientToken = deserializeString()
                CPUOPTIONS_DESCRIPTOR.index -> builder.cpuOptions = deserializeCpuOptionsDocument(deserializer)
                EBSOPTIMIZED_DESCRIPTOR.index -> builder.ebsOptimized = deserializeBoolean()
                ELASTICGPUASSOCIATIONS_DESCRIPTOR.index -> builder.elasticGpuAssociations =
                    deserializer.deserializeList(ELASTICGPUASSOCIATIONS_DESCRIPTOR) {
                        val col0 = mutableListOf<ElasticGpuAssociation>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeElasticGpuAssociationDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                ELASTICINFERENCEACCELERATORASSOCIATIONS_DESCRIPTOR.index -> builder.elasticInferenceAcceleratorAssociations =
                    deserializer.deserializeList(ELASTICINFERENCEACCELERATORASSOCIATIONS_DESCRIPTOR) {
                        val col0 = mutableListOf<ElasticInferenceAcceleratorAssociation>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeElasticInferenceAcceleratorAssociationDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                ENASUPPORT_DESCRIPTOR.index -> builder.enaSupport = deserializeBoolean()
                ENCLAVEOPTIONS_DESCRIPTOR.index -> builder.enclaveOptions = deserializeEnclaveOptionsDocument(deserializer)
                HIBERNATIONOPTIONS_DESCRIPTOR.index -> builder.hibernationOptions = deserializeHibernationOptionsDocument(deserializer)
                HYPERVISOR_DESCRIPTOR.index -> builder.hypervisor = deserializeString().let { HypervisorType.fromValue(it) }
                IAMINSTANCEPROFILE_DESCRIPTOR.index -> builder.iamInstanceProfile = deserializeIamInstanceProfileDocument(deserializer)
                IMAGEID_DESCRIPTOR.index -> builder.imageId = deserializeString()
                INSTANCEID_DESCRIPTOR.index -> builder.instanceId = deserializeString()
                INSTANCELIFECYCLE_DESCRIPTOR.index -> builder.instanceLifecycle = deserializeString().let { InstanceLifecycleType.fromValue(it) }
                INSTANCETYPE_DESCRIPTOR.index -> builder.instanceType = deserializeString().let { InstanceType.fromValue(it) }
                IPV6ADDRESS_DESCRIPTOR.index -> builder.ipv6Address = deserializeString()
                KERNELID_DESCRIPTOR.index -> builder.kernelId = deserializeString()
                KEYNAME_DESCRIPTOR.index -> builder.keyName = deserializeString()
                LAUNCHTIME_DESCRIPTOR.index -> builder.launchTime = deserializeString().let { Instant.fromIso8601(it) }
                LICENSES_DESCRIPTOR.index -> builder.licenses =
                    deserializer.deserializeList(LICENSES_DESCRIPTOR) {
                        val col0 = mutableListOf<LicenseConfiguration>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeLicenseConfigurationDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                MAINTENANCEOPTIONS_DESCRIPTOR.index -> builder.maintenanceOptions = deserializeInstanceMaintenanceOptionsDocument(deserializer)
                METADATAOPTIONS_DESCRIPTOR.index -> builder.metadataOptions = deserializeInstanceMetadataOptionsResponseDocument(deserializer)
                MONITORING_DESCRIPTOR.index -> builder.monitoring = deserializeMonitoringDocument(deserializer)
                NETWORKINTERFACES_DESCRIPTOR.index -> builder.networkInterfaces =
                    deserializer.deserializeList(NETWORKINTERFACES_DESCRIPTOR) {
                        val col0 = mutableListOf<InstanceNetworkInterface>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeInstanceNetworkInterfaceDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                OUTPOSTARN_DESCRIPTOR.index -> builder.outpostArn = deserializeString()
                PLACEMENT_DESCRIPTOR.index -> builder.placement = deserializePlacementDocument(deserializer)
                PLATFORM_DESCRIPTOR.index -> builder.platform = deserializeString().let { PlatformValues.fromValue(it) }
                PLATFORMDETAILS_DESCRIPTOR.index -> builder.platformDetails = deserializeString()
                PRIVATEDNSNAME_DESCRIPTOR.index -> builder.privateDnsName = deserializeString()
                PRIVATEDNSNAMEOPTIONS_DESCRIPTOR.index -> builder.privateDnsNameOptions = deserializePrivateDnsNameOptionsResponseDocument(deserializer)
                PRIVATEIPADDRESS_DESCRIPTOR.index -> builder.privateIpAddress = deserializeString()
                PRODUCTCODES_DESCRIPTOR.index -> builder.productCodes =
                    deserializer.deserializeList(PRODUCTCODES_DESCRIPTOR) {
                        val col0 = mutableListOf<ProductCode>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeProductCodeDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                PUBLICDNSNAME_DESCRIPTOR.index -> builder.publicDnsName = deserializeString()
                PUBLICIPADDRESS_DESCRIPTOR.index -> builder.publicIpAddress = deserializeString()
                RAMDISKID_DESCRIPTOR.index -> builder.ramdiskId = deserializeString()
                ROOTDEVICENAME_DESCRIPTOR.index -> builder.rootDeviceName = deserializeString()
                ROOTDEVICETYPE_DESCRIPTOR.index -> builder.rootDeviceType = deserializeString().let { DeviceType.fromValue(it) }
                SECURITYGROUPS_DESCRIPTOR.index -> builder.securityGroups =
                    deserializer.deserializeList(SECURITYGROUPS_DESCRIPTOR) {
                        val col0 = mutableListOf<GroupIdentifier>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeGroupIdentifierDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                SOURCEDESTCHECK_DESCRIPTOR.index -> builder.sourceDestCheck = deserializeBoolean()
                SPOTINSTANCEREQUESTID_DESCRIPTOR.index -> builder.spotInstanceRequestId = deserializeString()
                SRIOVNETSUPPORT_DESCRIPTOR.index -> builder.sriovNetSupport = deserializeString()
                STATE_DESCRIPTOR.index -> builder.state = deserializeInstanceStateDocument(deserializer)
                STATEREASON_DESCRIPTOR.index -> builder.stateReason = deserializeStateReasonDocument(deserializer)
                STATETRANSITIONREASON_DESCRIPTOR.index -> builder.stateTransitionReason = deserializeString()
                SUBNETID_DESCRIPTOR.index -> builder.subnetId = deserializeString()
                TAGS_DESCRIPTOR.index -> builder.tags =
                    deserializer.deserializeList(TAGS_DESCRIPTOR) {
                        val col0 = mutableListOf<Tag>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeTagDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                TPMSUPPORT_DESCRIPTOR.index -> builder.tpmSupport = deserializeString()
                USAGEOPERATION_DESCRIPTOR.index -> builder.usageOperation = deserializeString()
                USAGEOPERATIONUPDATETIME_DESCRIPTOR.index -> builder.usageOperationUpdateTime = deserializeString().let { Instant.fromIso8601(it) }
                VIRTUALIZATIONTYPE_DESCRIPTOR.index -> builder.virtualizationType = deserializeString().let { VirtualizationType.fromValue(it) }
                VPCID_DESCRIPTOR.index -> builder.vpcId = deserializeString()
                null -> break@loop
                else -> skipValue()
            }
        }
    }
    return builder.build()
}
