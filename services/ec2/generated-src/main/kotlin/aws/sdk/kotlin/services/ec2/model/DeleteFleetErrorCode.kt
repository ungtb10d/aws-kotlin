// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model

import kotlin.collections.List

public sealed class DeleteFleetErrorCode {

    public abstract val value: kotlin.String

    public object FleetIdDoesNotExist : aws.sdk.kotlin.services.ec2.model.DeleteFleetErrorCode() {
        override val value: kotlin.String = "fleetIdDoesNotExist"
        override fun toString(): kotlin.String = value
    }

    public object FleetIdMalformed : aws.sdk.kotlin.services.ec2.model.DeleteFleetErrorCode() {
        override val value: kotlin.String = "fleetIdMalformed"
        override fun toString(): kotlin.String = value
    }

    public object FleetNotInDeletableState : aws.sdk.kotlin.services.ec2.model.DeleteFleetErrorCode() {
        override val value: kotlin.String = "fleetNotInDeletableState"
        override fun toString(): kotlin.String = value
    }

    public object UnexpectedError : aws.sdk.kotlin.services.ec2.model.DeleteFleetErrorCode() {
        override val value: kotlin.String = "unexpectedError"
        override fun toString(): kotlin.String = value
    }

    public data class SdkUnknown(override val value: kotlin.String) : aws.sdk.kotlin.services.ec2.model.DeleteFleetErrorCode() {
        override fun toString(): kotlin.String = value
    }

    public companion object {
        /**
         * Convert a raw value to one of the sealed variants or [SdkUnknown]
         */
        public fun fromValue(str: kotlin.String): aws.sdk.kotlin.services.ec2.model.DeleteFleetErrorCode = when(str) {
            "fleetIdDoesNotExist" -> FleetIdDoesNotExist
            "fleetIdMalformed" -> FleetIdMalformed
            "fleetNotInDeletableState" -> FleetNotInDeletableState
            "unexpectedError" -> UnexpectedError
            else -> SdkUnknown(str)
        }

        /**
         * Get a list of all possible variants
         */
        public fun values(): kotlin.collections.List<aws.sdk.kotlin.services.ec2.model.DeleteFleetErrorCode> = listOf(
            FleetIdDoesNotExist,
            FleetIdMalformed,
            FleetNotInDeletableState,
            UnexpectedError
        )
    }
}
