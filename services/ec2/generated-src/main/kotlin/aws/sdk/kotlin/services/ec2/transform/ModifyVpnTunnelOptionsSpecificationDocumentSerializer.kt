// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.transform

import aws.sdk.kotlin.services.ec2.model.ModifyVpnTunnelOptionsSpecification
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.Serializer
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.formurl.FormUrlFlattened
import aws.smithy.kotlin.runtime.serde.formurl.FormUrlSerialName
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct

internal fun serializeModifyVpnTunnelOptionsSpecificationDocument(serializer: Serializer, input: ModifyVpnTunnelOptionsSpecification) {
    val DPDTIMEOUTACTION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, FormUrlSerialName("DPDTimeoutAction"))
    val DPDTIMEOUTSECONDS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, FormUrlSerialName("DPDTimeoutSeconds"))
    val IKEVERSIONS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, FormUrlSerialName("IKEVersion"), FormUrlFlattened)
    val PHASE1DHGROUPNUMBERS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, FormUrlSerialName("Phase1DHGroupNumber"), FormUrlFlattened)
    val PHASE1ENCRYPTIONALGORITHMS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, FormUrlSerialName("Phase1EncryptionAlgorithm"), FormUrlFlattened)
    val PHASE1INTEGRITYALGORITHMS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, FormUrlSerialName("Phase1IntegrityAlgorithm"), FormUrlFlattened)
    val PHASE1LIFETIMESECONDS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, FormUrlSerialName("Phase1LifetimeSeconds"))
    val PHASE2DHGROUPNUMBERS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, FormUrlSerialName("Phase2DHGroupNumber"), FormUrlFlattened)
    val PHASE2ENCRYPTIONALGORITHMS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, FormUrlSerialName("Phase2EncryptionAlgorithm"), FormUrlFlattened)
    val PHASE2INTEGRITYALGORITHMS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, FormUrlSerialName("Phase2IntegrityAlgorithm"), FormUrlFlattened)
    val PHASE2LIFETIMESECONDS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, FormUrlSerialName("Phase2LifetimeSeconds"))
    val PRESHAREDKEY_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, FormUrlSerialName("PreSharedKey"))
    val REKEYFUZZPERCENTAGE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, FormUrlSerialName("RekeyFuzzPercentage"))
    val REKEYMARGINTIMESECONDS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, FormUrlSerialName("RekeyMarginTimeSeconds"))
    val REPLAYWINDOWSIZE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, FormUrlSerialName("ReplayWindowSize"))
    val STARTUPACTION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, FormUrlSerialName("StartupAction"))
    val TUNNELINSIDECIDR_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, FormUrlSerialName("TunnelInsideCidr"))
    val TUNNELINSIDEIPV6CIDR_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, FormUrlSerialName("TunnelInsideIpv6Cidr"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(FormUrlSerialName("ModifyVpnTunnelOptionsSpecification"))
        field(DPDTIMEOUTACTION_DESCRIPTOR)
        field(DPDTIMEOUTSECONDS_DESCRIPTOR)
        field(IKEVERSIONS_DESCRIPTOR)
        field(PHASE1DHGROUPNUMBERS_DESCRIPTOR)
        field(PHASE1ENCRYPTIONALGORITHMS_DESCRIPTOR)
        field(PHASE1INTEGRITYALGORITHMS_DESCRIPTOR)
        field(PHASE1LIFETIMESECONDS_DESCRIPTOR)
        field(PHASE2DHGROUPNUMBERS_DESCRIPTOR)
        field(PHASE2ENCRYPTIONALGORITHMS_DESCRIPTOR)
        field(PHASE2INTEGRITYALGORITHMS_DESCRIPTOR)
        field(PHASE2LIFETIMESECONDS_DESCRIPTOR)
        field(PRESHAREDKEY_DESCRIPTOR)
        field(REKEYFUZZPERCENTAGE_DESCRIPTOR)
        field(REKEYMARGINTIMESECONDS_DESCRIPTOR)
        field(REPLAYWINDOWSIZE_DESCRIPTOR)
        field(STARTUPACTION_DESCRIPTOR)
        field(TUNNELINSIDECIDR_DESCRIPTOR)
        field(TUNNELINSIDEIPV6CIDR_DESCRIPTOR)
    }

    serializer.serializeStruct(OBJ_DESCRIPTOR) {
        input.tunnelInsideCidr?.let { field(TUNNELINSIDECIDR_DESCRIPTOR, it) }
        input.tunnelInsideIpv6Cidr?.let { field(TUNNELINSIDEIPV6CIDR_DESCRIPTOR, it) }
        input.preSharedKey?.let { field(PRESHAREDKEY_DESCRIPTOR, it) }
        input.phase1LifetimeSeconds?.let { field(PHASE1LIFETIMESECONDS_DESCRIPTOR, it) }
        input.phase2LifetimeSeconds?.let { field(PHASE2LIFETIMESECONDS_DESCRIPTOR, it) }
        input.rekeyMarginTimeSeconds?.let { field(REKEYMARGINTIMESECONDS_DESCRIPTOR, it) }
        input.rekeyFuzzPercentage?.let { field(REKEYFUZZPERCENTAGE_DESCRIPTOR, it) }
        input.replayWindowSize?.let { field(REPLAYWINDOWSIZE_DESCRIPTOR, it) }
        input.dpdTimeoutSeconds?.let { field(DPDTIMEOUTSECONDS_DESCRIPTOR, it) }
        input.dpdTimeoutAction?.let { field(DPDTIMEOUTACTION_DESCRIPTOR, it) }
        if (input.phase1EncryptionAlgorithms != null) {
            listField(PHASE1ENCRYPTIONALGORITHMS_DESCRIPTOR) {
                for (el0 in input.phase1EncryptionAlgorithms) {
                    serializeSdkSerializable(asSdkSerializable(el0, ::serializePhase1EncryptionAlgorithmsRequestListValueDocument))
                }
            }
        }
        if (input.phase2EncryptionAlgorithms != null) {
            listField(PHASE2ENCRYPTIONALGORITHMS_DESCRIPTOR) {
                for (el0 in input.phase2EncryptionAlgorithms) {
                    serializeSdkSerializable(asSdkSerializable(el0, ::serializePhase2EncryptionAlgorithmsRequestListValueDocument))
                }
            }
        }
        if (input.phase1IntegrityAlgorithms != null) {
            listField(PHASE1INTEGRITYALGORITHMS_DESCRIPTOR) {
                for (el0 in input.phase1IntegrityAlgorithms) {
                    serializeSdkSerializable(asSdkSerializable(el0, ::serializePhase1IntegrityAlgorithmsRequestListValueDocument))
                }
            }
        }
        if (input.phase2IntegrityAlgorithms != null) {
            listField(PHASE2INTEGRITYALGORITHMS_DESCRIPTOR) {
                for (el0 in input.phase2IntegrityAlgorithms) {
                    serializeSdkSerializable(asSdkSerializable(el0, ::serializePhase2IntegrityAlgorithmsRequestListValueDocument))
                }
            }
        }
        if (input.phase1DhGroupNumbers != null) {
            listField(PHASE1DHGROUPNUMBERS_DESCRIPTOR) {
                for (el0 in input.phase1DhGroupNumbers) {
                    serializeSdkSerializable(asSdkSerializable(el0, ::serializePhase1DhGroupNumbersRequestListValueDocument))
                }
            }
        }
        if (input.phase2DhGroupNumbers != null) {
            listField(PHASE2DHGROUPNUMBERS_DESCRIPTOR) {
                for (el0 in input.phase2DhGroupNumbers) {
                    serializeSdkSerializable(asSdkSerializable(el0, ::serializePhase2DhGroupNumbersRequestListValueDocument))
                }
            }
        }
        if (input.ikeVersions != null) {
            listField(IKEVERSIONS_DESCRIPTOR) {
                for (el0 in input.ikeVersions) {
                    serializeSdkSerializable(asSdkSerializable(el0, ::serializeIkeVersionsRequestListValueDocument))
                }
            }
        }
        input.startupAction?.let { field(STARTUPACTION_DESCRIPTOR, it) }
    }
}
