// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.transform

import aws.sdk.kotlin.services.ec2.model.AddressFamily
import aws.sdk.kotlin.services.ec2.model.IpamPool
import aws.sdk.kotlin.services.ec2.model.IpamPoolAwsService
import aws.sdk.kotlin.services.ec2.model.IpamPoolState
import aws.sdk.kotlin.services.ec2.model.IpamResourceTag
import aws.sdk.kotlin.services.ec2.model.IpamScopeType
import aws.sdk.kotlin.services.ec2.model.Tag
import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.serde.xml.XmlCollectionName
import aws.smithy.kotlin.runtime.serde.xml.XmlDeserializer
import aws.smithy.kotlin.runtime.serde.xml.XmlNamespace
import aws.smithy.kotlin.runtime.serde.xml.XmlSerialName

internal fun deserializeIpamPoolDocument(deserializer: Deserializer): IpamPool {
    val builder = IpamPool.Builder()
    val ADDRESSFAMILY_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Enum, XmlSerialName("addressFamily"))
    val ALLOCATIONDEFAULTNETMASKLENGTH_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, XmlSerialName("allocationDefaultNetmaskLength"))
    val ALLOCATIONMAXNETMASKLENGTH_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, XmlSerialName("allocationMaxNetmaskLength"))
    val ALLOCATIONMINNETMASKLENGTH_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, XmlSerialName("allocationMinNetmaskLength"))
    val ALLOCATIONRESOURCETAGS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("allocationResourceTagSet"), XmlCollectionName("item"))
    val AUTOIMPORT_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Boolean, XmlSerialName("autoImport"))
    val AWSSERVICE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Enum, XmlSerialName("awsService"))
    val DESCRIPTION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("description"))
    val IPAMARN_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("ipamArn"))
    val IPAMPOOLARN_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("ipamPoolArn"))
    val IPAMPOOLID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("ipamPoolId"))
    val IPAMREGION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("ipamRegion"))
    val IPAMSCOPEARN_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("ipamScopeArn"))
    val IPAMSCOPETYPE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Enum, XmlSerialName("ipamScopeType"))
    val LOCALE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("locale"))
    val OWNERID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("ownerId"))
    val POOLDEPTH_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, XmlSerialName("poolDepth"))
    val PUBLICLYADVERTISABLE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Boolean, XmlSerialName("publiclyAdvertisable"))
    val SOURCEIPAMPOOLID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("sourceIpamPoolId"))
    val STATE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Enum, XmlSerialName("state"))
    val STATEMESSAGE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("stateMessage"))
    val TAGS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("tagSet"), XmlCollectionName("item"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(XmlSerialName("IpamPool"))
        trait(XmlNamespace("http://ec2.amazonaws.com/doc/2016-11-15"))
        field(ADDRESSFAMILY_DESCRIPTOR)
        field(ALLOCATIONDEFAULTNETMASKLENGTH_DESCRIPTOR)
        field(ALLOCATIONMAXNETMASKLENGTH_DESCRIPTOR)
        field(ALLOCATIONMINNETMASKLENGTH_DESCRIPTOR)
        field(ALLOCATIONRESOURCETAGS_DESCRIPTOR)
        field(AUTOIMPORT_DESCRIPTOR)
        field(AWSSERVICE_DESCRIPTOR)
        field(DESCRIPTION_DESCRIPTOR)
        field(IPAMARN_DESCRIPTOR)
        field(IPAMPOOLARN_DESCRIPTOR)
        field(IPAMPOOLID_DESCRIPTOR)
        field(IPAMREGION_DESCRIPTOR)
        field(IPAMSCOPEARN_DESCRIPTOR)
        field(IPAMSCOPETYPE_DESCRIPTOR)
        field(LOCALE_DESCRIPTOR)
        field(OWNERID_DESCRIPTOR)
        field(POOLDEPTH_DESCRIPTOR)
        field(PUBLICLYADVERTISABLE_DESCRIPTOR)
        field(SOURCEIPAMPOOLID_DESCRIPTOR)
        field(STATE_DESCRIPTOR)
        field(STATEMESSAGE_DESCRIPTOR)
        field(TAGS_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                ADDRESSFAMILY_DESCRIPTOR.index -> builder.addressFamily = deserializeString().let { AddressFamily.fromValue(it) }
                ALLOCATIONDEFAULTNETMASKLENGTH_DESCRIPTOR.index -> builder.allocationDefaultNetmaskLength = deserializeInt()
                ALLOCATIONMAXNETMASKLENGTH_DESCRIPTOR.index -> builder.allocationMaxNetmaskLength = deserializeInt()
                ALLOCATIONMINNETMASKLENGTH_DESCRIPTOR.index -> builder.allocationMinNetmaskLength = deserializeInt()
                ALLOCATIONRESOURCETAGS_DESCRIPTOR.index -> builder.allocationResourceTags =
                    deserializer.deserializeList(ALLOCATIONRESOURCETAGS_DESCRIPTOR) {
                        val col0 = mutableListOf<IpamResourceTag>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeIpamResourceTagDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                AUTOIMPORT_DESCRIPTOR.index -> builder.autoImport = deserializeBoolean()
                AWSSERVICE_DESCRIPTOR.index -> builder.awsService = deserializeString().let { IpamPoolAwsService.fromValue(it) }
                DESCRIPTION_DESCRIPTOR.index -> builder.description = deserializeString()
                IPAMARN_DESCRIPTOR.index -> builder.ipamArn = deserializeString()
                IPAMPOOLARN_DESCRIPTOR.index -> builder.ipamPoolArn = deserializeString()
                IPAMPOOLID_DESCRIPTOR.index -> builder.ipamPoolId = deserializeString()
                IPAMREGION_DESCRIPTOR.index -> builder.ipamRegion = deserializeString()
                IPAMSCOPEARN_DESCRIPTOR.index -> builder.ipamScopeArn = deserializeString()
                IPAMSCOPETYPE_DESCRIPTOR.index -> builder.ipamScopeType = deserializeString().let { IpamScopeType.fromValue(it) }
                LOCALE_DESCRIPTOR.index -> builder.locale = deserializeString()
                OWNERID_DESCRIPTOR.index -> builder.ownerId = deserializeString()
                POOLDEPTH_DESCRIPTOR.index -> builder.poolDepth = deserializeInt()
                PUBLICLYADVERTISABLE_DESCRIPTOR.index -> builder.publiclyAdvertisable = deserializeBoolean()
                SOURCEIPAMPOOLID_DESCRIPTOR.index -> builder.sourceIpamPoolId = deserializeString()
                STATE_DESCRIPTOR.index -> builder.state = deserializeString().let { IpamPoolState.fromValue(it) }
                STATEMESSAGE_DESCRIPTOR.index -> builder.stateMessage = deserializeString()
                TAGS_DESCRIPTOR.index -> builder.tags =
                    deserializer.deserializeList(TAGS_DESCRIPTOR) {
                        val col0 = mutableListOf<Tag>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeTagDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                null -> break@loop
                else -> skipValue()
            }
        }
    }
    return builder.build()
}
