// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes the Traffic Mirror rule.
 */
public class TrafficMirrorFilterRule private constructor(builder: Builder) {
    /**
     * The description of the Traffic Mirror rule.
     */
    public val description: kotlin.String? = builder.description
    /**
     * The destination CIDR block assigned to the Traffic Mirror rule.
     */
    public val destinationCidrBlock: kotlin.String? = builder.destinationCidrBlock
    /**
     * The destination port range assigned to the Traffic Mirror rule.
     */
    public val destinationPortRange: aws.sdk.kotlin.services.ec2.model.TrafficMirrorPortRange? = builder.destinationPortRange
    /**
     * The protocol assigned to the Traffic Mirror rule.
     */
    public val protocol: kotlin.Int? = builder.protocol
    /**
     * The action assigned to the Traffic Mirror rule.
     */
    public val ruleAction: aws.sdk.kotlin.services.ec2.model.TrafficMirrorRuleAction? = builder.ruleAction
    /**
     * The rule number of the Traffic Mirror rule.
     */
    public val ruleNumber: kotlin.Int? = builder.ruleNumber
    /**
     * The source CIDR block assigned to the Traffic Mirror rule.
     */
    public val sourceCidrBlock: kotlin.String? = builder.sourceCidrBlock
    /**
     * The source port range assigned to the Traffic Mirror rule.
     */
    public val sourcePortRange: aws.sdk.kotlin.services.ec2.model.TrafficMirrorPortRange? = builder.sourcePortRange
    /**
     * The traffic direction assigned to the Traffic Mirror rule.
     */
    public val trafficDirection: aws.sdk.kotlin.services.ec2.model.TrafficDirection? = builder.trafficDirection
    /**
     * The ID of the Traffic Mirror filter that the rule is associated with.
     */
    public val trafficMirrorFilterId: kotlin.String? = builder.trafficMirrorFilterId
    /**
     * The ID of the Traffic Mirror rule.
     */
    public val trafficMirrorFilterRuleId: kotlin.String? = builder.trafficMirrorFilterRuleId

    public companion object {
        public operator fun invoke(block: Builder.() -> kotlin.Unit): aws.sdk.kotlin.services.ec2.model.TrafficMirrorFilterRule = Builder().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("TrafficMirrorFilterRule(")
        append("description=$description,")
        append("destinationCidrBlock=$destinationCidrBlock,")
        append("destinationPortRange=$destinationPortRange,")
        append("protocol=$protocol,")
        append("ruleAction=$ruleAction,")
        append("ruleNumber=$ruleNumber,")
        append("sourceCidrBlock=$sourceCidrBlock,")
        append("sourcePortRange=$sourcePortRange,")
        append("trafficDirection=$trafficDirection,")
        append("trafficMirrorFilterId=$trafficMirrorFilterId,")
        append("trafficMirrorFilterRuleId=$trafficMirrorFilterRuleId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = description?.hashCode() ?: 0
        result = 31 * result + (destinationCidrBlock?.hashCode() ?: 0)
        result = 31 * result + (destinationPortRange?.hashCode() ?: 0)
        result = 31 * result + (protocol ?: 0)
        result = 31 * result + (ruleAction?.hashCode() ?: 0)
        result = 31 * result + (ruleNumber ?: 0)
        result = 31 * result + (sourceCidrBlock?.hashCode() ?: 0)
        result = 31 * result + (sourcePortRange?.hashCode() ?: 0)
        result = 31 * result + (trafficDirection?.hashCode() ?: 0)
        result = 31 * result + (trafficMirrorFilterId?.hashCode() ?: 0)
        result = 31 * result + (trafficMirrorFilterRuleId?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as TrafficMirrorFilterRule

        if (description != other.description) return false
        if (destinationCidrBlock != other.destinationCidrBlock) return false
        if (destinationPortRange != other.destinationPortRange) return false
        if (protocol != other.protocol) return false
        if (ruleAction != other.ruleAction) return false
        if (ruleNumber != other.ruleNumber) return false
        if (sourceCidrBlock != other.sourceCidrBlock) return false
        if (sourcePortRange != other.sourcePortRange) return false
        if (trafficDirection != other.trafficDirection) return false
        if (trafficMirrorFilterId != other.trafficMirrorFilterId) return false
        if (trafficMirrorFilterRuleId != other.trafficMirrorFilterRuleId) return false

        return true
    }

    public inline fun copy(block: Builder.() -> kotlin.Unit = {}): aws.sdk.kotlin.services.ec2.model.TrafficMirrorFilterRule = Builder(this).apply(block).build()

    public class Builder {
        /**
         * The description of the Traffic Mirror rule.
         */
        public var description: kotlin.String? = null
        /**
         * The destination CIDR block assigned to the Traffic Mirror rule.
         */
        public var destinationCidrBlock: kotlin.String? = null
        /**
         * The destination port range assigned to the Traffic Mirror rule.
         */
        public var destinationPortRange: aws.sdk.kotlin.services.ec2.model.TrafficMirrorPortRange? = null
        /**
         * The protocol assigned to the Traffic Mirror rule.
         */
        public var protocol: kotlin.Int? = null
        /**
         * The action assigned to the Traffic Mirror rule.
         */
        public var ruleAction: aws.sdk.kotlin.services.ec2.model.TrafficMirrorRuleAction? = null
        /**
         * The rule number of the Traffic Mirror rule.
         */
        public var ruleNumber: kotlin.Int? = null
        /**
         * The source CIDR block assigned to the Traffic Mirror rule.
         */
        public var sourceCidrBlock: kotlin.String? = null
        /**
         * The source port range assigned to the Traffic Mirror rule.
         */
        public var sourcePortRange: aws.sdk.kotlin.services.ec2.model.TrafficMirrorPortRange? = null
        /**
         * The traffic direction assigned to the Traffic Mirror rule.
         */
        public var trafficDirection: aws.sdk.kotlin.services.ec2.model.TrafficDirection? = null
        /**
         * The ID of the Traffic Mirror filter that the rule is associated with.
         */
        public var trafficMirrorFilterId: kotlin.String? = null
        /**
         * The ID of the Traffic Mirror rule.
         */
        public var trafficMirrorFilterRuleId: kotlin.String? = null

        @PublishedApi
        internal constructor()
        @PublishedApi
        internal constructor(x: aws.sdk.kotlin.services.ec2.model.TrafficMirrorFilterRule) : this() {
            this.description = x.description
            this.destinationCidrBlock = x.destinationCidrBlock
            this.destinationPortRange = x.destinationPortRange
            this.protocol = x.protocol
            this.ruleAction = x.ruleAction
            this.ruleNumber = x.ruleNumber
            this.sourceCidrBlock = x.sourceCidrBlock
            this.sourcePortRange = x.sourcePortRange
            this.trafficDirection = x.trafficDirection
            this.trafficMirrorFilterId = x.trafficMirrorFilterId
            this.trafficMirrorFilterRuleId = x.trafficMirrorFilterRuleId
        }

        @PublishedApi
        internal fun build(): aws.sdk.kotlin.services.ec2.model.TrafficMirrorFilterRule = TrafficMirrorFilterRule(this)

        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.TrafficMirrorPortRange] inside the given [block]
         */
        public fun destinationPortRange(block: aws.sdk.kotlin.services.ec2.model.TrafficMirrorPortRange.Builder.() -> kotlin.Unit) {
            this.destinationPortRange = aws.sdk.kotlin.services.ec2.model.TrafficMirrorPortRange.invoke(block)
        }

        /**
         * construct an [aws.sdk.kotlin.services.ec2.model.TrafficMirrorPortRange] inside the given [block]
         */
        public fun sourcePortRange(block: aws.sdk.kotlin.services.ec2.model.TrafficMirrorPortRange.Builder.() -> kotlin.Unit) {
            this.sourcePortRange = aws.sdk.kotlin.services.ec2.model.TrafficMirrorPortRange.invoke(block)
        }
    }
}
