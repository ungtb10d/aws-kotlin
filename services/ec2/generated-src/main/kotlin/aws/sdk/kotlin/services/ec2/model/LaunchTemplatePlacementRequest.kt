// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Describes the placement of an instance.
 */
public class LaunchTemplatePlacementRequest private constructor(builder: Builder) {
    /**
     * The affinity setting for an instance on a Dedicated Host.
     */
    public val affinity: kotlin.String? = builder.affinity
    /**
     * The Availability Zone for the instance.
     */
    public val availabilityZone: kotlin.String? = builder.availabilityZone
    /**
     * The name of the placement group for the instance.
     */
    public val groupName: kotlin.String? = builder.groupName
    /**
     * The ID of the Dedicated Host for the instance.
     */
    public val hostId: kotlin.String? = builder.hostId
    /**
     * The ARN of the host resource group in which to launch the instances. If you specify a host resource group ARN, omit the **Tenancy** parameter or set it to `host`.
     */
    public val hostResourceGroupArn: kotlin.String? = builder.hostResourceGroupArn
    /**
     * The number of the partition the instance should launch in. Valid only if the placement group strategy is set to `partition`.
     */
    public val partitionNumber: kotlin.Int? = builder.partitionNumber
    /**
     * Reserved for future use.
     */
    public val spreadDomain: kotlin.String? = builder.spreadDomain
    /**
     * The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of dedicated runs on single-tenant hardware.
     */
    public val tenancy: aws.sdk.kotlin.services.ec2.model.Tenancy? = builder.tenancy

    public companion object {
        public operator fun invoke(block: Builder.() -> kotlin.Unit): aws.sdk.kotlin.services.ec2.model.LaunchTemplatePlacementRequest = Builder().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("LaunchTemplatePlacementRequest(")
        append("affinity=$affinity,")
        append("availabilityZone=$availabilityZone,")
        append("groupName=$groupName,")
        append("hostId=$hostId,")
        append("hostResourceGroupArn=$hostResourceGroupArn,")
        append("partitionNumber=$partitionNumber,")
        append("spreadDomain=$spreadDomain,")
        append("tenancy=$tenancy)")
    }

    override fun hashCode(): kotlin.Int {
        var result = affinity?.hashCode() ?: 0
        result = 31 * result + (availabilityZone?.hashCode() ?: 0)
        result = 31 * result + (groupName?.hashCode() ?: 0)
        result = 31 * result + (hostId?.hashCode() ?: 0)
        result = 31 * result + (hostResourceGroupArn?.hashCode() ?: 0)
        result = 31 * result + (partitionNumber ?: 0)
        result = 31 * result + (spreadDomain?.hashCode() ?: 0)
        result = 31 * result + (tenancy?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as LaunchTemplatePlacementRequest

        if (affinity != other.affinity) return false
        if (availabilityZone != other.availabilityZone) return false
        if (groupName != other.groupName) return false
        if (hostId != other.hostId) return false
        if (hostResourceGroupArn != other.hostResourceGroupArn) return false
        if (partitionNumber != other.partitionNumber) return false
        if (spreadDomain != other.spreadDomain) return false
        if (tenancy != other.tenancy) return false

        return true
    }

    public inline fun copy(block: Builder.() -> kotlin.Unit = {}): aws.sdk.kotlin.services.ec2.model.LaunchTemplatePlacementRequest = Builder(this).apply(block).build()

    public class Builder {
        /**
         * The affinity setting for an instance on a Dedicated Host.
         */
        public var affinity: kotlin.String? = null
        /**
         * The Availability Zone for the instance.
         */
        public var availabilityZone: kotlin.String? = null
        /**
         * The name of the placement group for the instance.
         */
        public var groupName: kotlin.String? = null
        /**
         * The ID of the Dedicated Host for the instance.
         */
        public var hostId: kotlin.String? = null
        /**
         * The ARN of the host resource group in which to launch the instances. If you specify a host resource group ARN, omit the **Tenancy** parameter or set it to `host`.
         */
        public var hostResourceGroupArn: kotlin.String? = null
        /**
         * The number of the partition the instance should launch in. Valid only if the placement group strategy is set to `partition`.
         */
        public var partitionNumber: kotlin.Int? = null
        /**
         * Reserved for future use.
         */
        public var spreadDomain: kotlin.String? = null
        /**
         * The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of dedicated runs on single-tenant hardware.
         */
        public var tenancy: aws.sdk.kotlin.services.ec2.model.Tenancy? = null

        @PublishedApi
        internal constructor()
        @PublishedApi
        internal constructor(x: aws.sdk.kotlin.services.ec2.model.LaunchTemplatePlacementRequest) : this() {
            this.affinity = x.affinity
            this.availabilityZone = x.availabilityZone
            this.groupName = x.groupName
            this.hostId = x.hostId
            this.hostResourceGroupArn = x.hostResourceGroupArn
            this.partitionNumber = x.partitionNumber
            this.spreadDomain = x.spreadDomain
            this.tenancy = x.tenancy
        }

        @PublishedApi
        internal fun build(): aws.sdk.kotlin.services.ec2.model.LaunchTemplatePlacementRequest = LaunchTemplatePlacementRequest(this)
    }
}
