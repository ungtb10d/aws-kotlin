// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.transform

import aws.sdk.kotlin.services.ec2.model.StaleIpPermission
import aws.sdk.kotlin.services.ec2.model.UserIdGroupPair
import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.serde.xml.XmlCollectionName
import aws.smithy.kotlin.runtime.serde.xml.XmlDeserializer
import aws.smithy.kotlin.runtime.serde.xml.XmlNamespace
import aws.smithy.kotlin.runtime.serde.xml.XmlSerialName

internal fun deserializeStaleIpPermissionDocument(deserializer: Deserializer): StaleIpPermission {
    val builder = StaleIpPermission.Builder()
    val FROMPORT_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, XmlSerialName("fromPort"))
    val IPPROTOCOL_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("ipProtocol"))
    val IPRANGES_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("ipRanges"), XmlCollectionName("item"))
    val PREFIXLISTIDS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("prefixListIds"), XmlCollectionName("item"))
    val TOPORT_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, XmlSerialName("toPort"))
    val USERIDGROUPPAIRS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("groups"), XmlCollectionName("item"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(XmlSerialName("StaleIpPermission"))
        trait(XmlNamespace("http://ec2.amazonaws.com/doc/2016-11-15"))
        field(FROMPORT_DESCRIPTOR)
        field(IPPROTOCOL_DESCRIPTOR)
        field(IPRANGES_DESCRIPTOR)
        field(PREFIXLISTIDS_DESCRIPTOR)
        field(TOPORT_DESCRIPTOR)
        field(USERIDGROUPPAIRS_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                FROMPORT_DESCRIPTOR.index -> builder.fromPort = deserializeInt()
                IPPROTOCOL_DESCRIPTOR.index -> builder.ipProtocol = deserializeString()
                IPRANGES_DESCRIPTOR.index -> builder.ipRanges =
                    deserializer.deserializeList(IPRANGES_DESCRIPTOR) {
                        val col0 = mutableListOf<String>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeString() } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                PREFIXLISTIDS_DESCRIPTOR.index -> builder.prefixListIds =
                    deserializer.deserializeList(PREFIXLISTIDS_DESCRIPTOR) {
                        val col0 = mutableListOf<String>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeString() } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                TOPORT_DESCRIPTOR.index -> builder.toPort = deserializeInt()
                USERIDGROUPPAIRS_DESCRIPTOR.index -> builder.userIdGroupPairs =
                    deserializer.deserializeList(USERIDGROUPPAIRS_DESCRIPTOR) {
                        val col0 = mutableListOf<UserIdGroupPair>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeUserIdGroupPairDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                null -> break@loop
                else -> skipValue()
            }
        }
    }
    return builder.build()
}
