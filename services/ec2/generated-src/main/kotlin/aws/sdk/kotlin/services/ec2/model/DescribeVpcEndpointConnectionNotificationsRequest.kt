// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



public class DescribeVpcEndpointConnectionNotificationsRequest private constructor(builder: Builder) {
    /**
     * The ID of the notification.
     */
    public val connectionNotificationId: kotlin.String? = builder.connectionNotificationId
    /**
     * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is `DryRunOperation`. Otherwise, it is `UnauthorizedOperation`.
     */
    public val dryRun: kotlin.Boolean? = builder.dryRun
    /**
     * One or more filters.
     * + `connection-notification-arn` - The ARN of the SNS topic for the notification.
     * + `connection-notification-id` - The ID of the notification.
     * + `connection-notification-state` - The state of the notification (`Enabled` | `Disabled`).
     * + `connection-notification-type` - The type of notification (`Topic`).
     * + `service-id` - The ID of the endpoint service.
     * + `vpc-endpoint-id` - The ID of the VPC endpoint.
     */
    public val filters: List<Filter>? = builder.filters
    /**
     * The maximum number of results to return in a single call. To retrieve the remaining results, make another request with the returned `NextToken` value.
     */
    public val maxResults: kotlin.Int? = builder.maxResults
    /**
     * The token to request the next page of results.
     */
    public val nextToken: kotlin.String? = builder.nextToken

    public companion object {
        public operator fun invoke(block: Builder.() -> kotlin.Unit): aws.sdk.kotlin.services.ec2.model.DescribeVpcEndpointConnectionNotificationsRequest = Builder().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("DescribeVpcEndpointConnectionNotificationsRequest(")
        append("connectionNotificationId=$connectionNotificationId,")
        append("dryRun=$dryRun,")
        append("filters=$filters,")
        append("maxResults=$maxResults,")
        append("nextToken=$nextToken)")
    }

    override fun hashCode(): kotlin.Int {
        var result = connectionNotificationId?.hashCode() ?: 0
        result = 31 * result + (dryRun?.hashCode() ?: 0)
        result = 31 * result + (filters?.hashCode() ?: 0)
        result = 31 * result + (maxResults ?: 0)
        result = 31 * result + (nextToken?.hashCode() ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as DescribeVpcEndpointConnectionNotificationsRequest

        if (connectionNotificationId != other.connectionNotificationId) return false
        if (dryRun != other.dryRun) return false
        if (filters != other.filters) return false
        if (maxResults != other.maxResults) return false
        if (nextToken != other.nextToken) return false

        return true
    }

    public inline fun copy(block: Builder.() -> kotlin.Unit = {}): aws.sdk.kotlin.services.ec2.model.DescribeVpcEndpointConnectionNotificationsRequest = Builder(this).apply(block).build()

    public class Builder {
        /**
         * The ID of the notification.
         */
        public var connectionNotificationId: kotlin.String? = null
        /**
         * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is `DryRunOperation`. Otherwise, it is `UnauthorizedOperation`.
         */
        public var dryRun: kotlin.Boolean? = null
        /**
         * One or more filters.
         * + `connection-notification-arn` - The ARN of the SNS topic for the notification.
         * + `connection-notification-id` - The ID of the notification.
         * + `connection-notification-state` - The state of the notification (`Enabled` | `Disabled`).
         * + `connection-notification-type` - The type of notification (`Topic`).
         * + `service-id` - The ID of the endpoint service.
         * + `vpc-endpoint-id` - The ID of the VPC endpoint.
         */
        public var filters: List<Filter>? = null
        /**
         * The maximum number of results to return in a single call. To retrieve the remaining results, make another request with the returned `NextToken` value.
         */
        public var maxResults: kotlin.Int? = null
        /**
         * The token to request the next page of results.
         */
        public var nextToken: kotlin.String? = null

        @PublishedApi
        internal constructor()
        @PublishedApi
        internal constructor(x: aws.sdk.kotlin.services.ec2.model.DescribeVpcEndpointConnectionNotificationsRequest) : this() {
            this.connectionNotificationId = x.connectionNotificationId
            this.dryRun = x.dryRun
            this.filters = x.filters
            this.maxResults = x.maxResults
            this.nextToken = x.nextToken
        }

        @PublishedApi
        internal fun build(): aws.sdk.kotlin.services.ec2.model.DescribeVpcEndpointConnectionNotificationsRequest = DescribeVpcEndpointConnectionNotificationsRequest(this)
    }
}
