// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.transform

import aws.sdk.kotlin.services.ec2.model.GetSpotPlacementScoresRequest
import aws.sdk.kotlin.services.ec2.model.InstanceRequirementsWithMetadataRequest
import aws.sdk.kotlin.services.ec2.model.TargetCapacityUnitType
import aws.smithy.kotlin.runtime.client.ExecutionContext
import aws.smithy.kotlin.runtime.http.HttpBody
import aws.smithy.kotlin.runtime.http.HttpMethod
import aws.smithy.kotlin.runtime.http.content.ByteArrayContent
import aws.smithy.kotlin.runtime.http.operation.HttpSerialize
import aws.smithy.kotlin.runtime.http.request.HttpRequestBuilder
import aws.smithy.kotlin.runtime.http.request.url
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.formurl.FormUrlFlattened
import aws.smithy.kotlin.runtime.serde.formurl.FormUrlSerialName
import aws.smithy.kotlin.runtime.serde.formurl.FormUrlSerializer
import aws.smithy.kotlin.runtime.serde.formurl.QueryLiteral
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct


internal class GetSpotPlacementScoresOperationSerializer: HttpSerialize<GetSpotPlacementScoresRequest> {
    override suspend fun serialize(context: ExecutionContext, input: GetSpotPlacementScoresRequest): HttpRequestBuilder {
        val builder = HttpRequestBuilder()
        builder.method = HttpMethod.POST

        builder.url {
            path = "/"
        }

        val payload = serializeGetSpotPlacementScoresOperationBody(context, input)
        builder.body = ByteArrayContent(payload)
        if (builder.body !is HttpBody.Empty) {
            builder.headers.setMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        return builder
    }
}

private fun serializeGetSpotPlacementScoresOperationBody(context: ExecutionContext, input: GetSpotPlacementScoresRequest): ByteArray {
    val serializer = FormUrlSerializer()
    val DRYRUN_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Boolean, FormUrlSerialName("DryRun"))
    val INSTANCEREQUIREMENTSWITHMETADATA_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, FormUrlSerialName("InstanceRequirementsWithMetadata"))
    val INSTANCETYPES_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, FormUrlSerialName("InstanceType"), FormUrlFlattened)
    val MAXRESULTS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, FormUrlSerialName("MaxResults"))
    val NEXTTOKEN_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, FormUrlSerialName("NextToken"))
    val REGIONNAMES_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, FormUrlSerialName("RegionName"), FormUrlFlattened)
    val SINGLEAVAILABILITYZONE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Boolean, FormUrlSerialName("SingleAvailabilityZone"))
    val TARGETCAPACITY_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, FormUrlSerialName("TargetCapacity"))
    val TARGETCAPACITYUNITTYPE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, FormUrlSerialName("TargetCapacityUnitType"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(FormUrlSerialName("GetSpotPlacementScoresRequest"))
        trait(QueryLiteral("Action", "GetSpotPlacementScores"))
        trait(QueryLiteral("Version", "2016-11-15"))
        field(DRYRUN_DESCRIPTOR)
        field(INSTANCEREQUIREMENTSWITHMETADATA_DESCRIPTOR)
        field(INSTANCETYPES_DESCRIPTOR)
        field(MAXRESULTS_DESCRIPTOR)
        field(NEXTTOKEN_DESCRIPTOR)
        field(REGIONNAMES_DESCRIPTOR)
        field(SINGLEAVAILABILITYZONE_DESCRIPTOR)
        field(TARGETCAPACITY_DESCRIPTOR)
        field(TARGETCAPACITYUNITTYPE_DESCRIPTOR)
    }

    serializer.serializeStruct(OBJ_DESCRIPTOR) {
        input.dryRun?.let { field(DRYRUN_DESCRIPTOR, it) }
        input.instanceRequirementsWithMetadata?.let { field(INSTANCEREQUIREMENTSWITHMETADATA_DESCRIPTOR, it, ::serializeInstanceRequirementsWithMetadataRequestDocument) }
        if (input.instanceTypes != null) {
            listField(INSTANCETYPES_DESCRIPTOR) {
                for (el0 in input.instanceTypes) {
                    serializeString(el0)
                }
            }
        }
        input.maxResults?.let { field(MAXRESULTS_DESCRIPTOR, it) }
        input.nextToken?.let { field(NEXTTOKEN_DESCRIPTOR, it) }
        if (input.regionNames != null) {
            listField(REGIONNAMES_DESCRIPTOR) {
                for (el0 in input.regionNames) {
                    serializeString(el0)
                }
            }
        }
        input.singleAvailabilityZone?.let { field(SINGLEAVAILABILITYZONE_DESCRIPTOR, it) }
        input.targetCapacity?.let { field(TARGETCAPACITY_DESCRIPTOR, it) }
        input.targetCapacityUnitType?.let { field(TARGETCAPACITYUNITTYPE_DESCRIPTOR, it.value) }
    }
    return serializer.toByteArray()
}
