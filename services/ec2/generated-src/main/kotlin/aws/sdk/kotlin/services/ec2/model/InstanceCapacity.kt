// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



/**
 * Information about the number of instances that can be launched onto the Dedicated Host.
 */
public class InstanceCapacity private constructor(builder: Builder) {
    /**
     * The number of instances that can be launched onto the Dedicated Host based on the host's available capacity.
     */
    public val availableCapacity: kotlin.Int? = builder.availableCapacity
    /**
     * The instance type supported by the Dedicated Host.
     */
    public val instanceType: kotlin.String? = builder.instanceType
    /**
     * The total number of instances that can be launched onto the Dedicated Host if there are no instances running on it.
     */
    public val totalCapacity: kotlin.Int? = builder.totalCapacity

    public companion object {
        public operator fun invoke(block: Builder.() -> kotlin.Unit): aws.sdk.kotlin.services.ec2.model.InstanceCapacity = Builder().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("InstanceCapacity(")
        append("availableCapacity=$availableCapacity,")
        append("instanceType=$instanceType,")
        append("totalCapacity=$totalCapacity)")
    }

    override fun hashCode(): kotlin.Int {
        var result = availableCapacity ?: 0
        result = 31 * result + (instanceType?.hashCode() ?: 0)
        result = 31 * result + (totalCapacity ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as InstanceCapacity

        if (availableCapacity != other.availableCapacity) return false
        if (instanceType != other.instanceType) return false
        if (totalCapacity != other.totalCapacity) return false

        return true
    }

    public inline fun copy(block: Builder.() -> kotlin.Unit = {}): aws.sdk.kotlin.services.ec2.model.InstanceCapacity = Builder(this).apply(block).build()

    public class Builder {
        /**
         * The number of instances that can be launched onto the Dedicated Host based on the host's available capacity.
         */
        public var availableCapacity: kotlin.Int? = null
        /**
         * The instance type supported by the Dedicated Host.
         */
        public var instanceType: kotlin.String? = null
        /**
         * The total number of instances that can be launched onto the Dedicated Host if there are no instances running on it.
         */
        public var totalCapacity: kotlin.Int? = null

        @PublishedApi
        internal constructor()
        @PublishedApi
        internal constructor(x: aws.sdk.kotlin.services.ec2.model.InstanceCapacity) : this() {
            this.availableCapacity = x.availableCapacity
            this.instanceType = x.instanceType
            this.totalCapacity = x.totalCapacity
        }

        @PublishedApi
        internal fun build(): aws.sdk.kotlin.services.ec2.model.InstanceCapacity = InstanceCapacity(this)
    }
}
