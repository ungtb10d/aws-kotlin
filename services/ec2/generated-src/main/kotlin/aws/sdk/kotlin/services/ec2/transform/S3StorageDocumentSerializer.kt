// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.transform

import aws.sdk.kotlin.services.ec2.model.S3Storage
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.Serializer
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.formurl.FormUrlSerialName
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.util.encodeBase64String

internal fun serializeS3StorageDocument(serializer: Serializer, input: S3Storage) {
    val AWSACCESSKEYID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, FormUrlSerialName("AWSAccessKeyId"))
    val BUCKET_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, FormUrlSerialName("Bucket"))
    val PREFIX_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, FormUrlSerialName("Prefix"))
    val UPLOADPOLICY_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Blob, FormUrlSerialName("UploadPolicy"))
    val UPLOADPOLICYSIGNATURE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, FormUrlSerialName("UploadPolicySignature"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(FormUrlSerialName("S3Storage"))
        field(AWSACCESSKEYID_DESCRIPTOR)
        field(BUCKET_DESCRIPTOR)
        field(PREFIX_DESCRIPTOR)
        field(UPLOADPOLICY_DESCRIPTOR)
        field(UPLOADPOLICYSIGNATURE_DESCRIPTOR)
    }

    serializer.serializeStruct(OBJ_DESCRIPTOR) {
        input.awsAccessKeyId?.let { field(AWSACCESSKEYID_DESCRIPTOR, it) }
        input.bucket?.let { field(BUCKET_DESCRIPTOR, it) }
        input.prefix?.let { field(PREFIX_DESCRIPTOR, it) }
        input.uploadPolicy?.let { field(UPLOADPOLICY_DESCRIPTOR, it.encodeBase64String()) }
        input.uploadPolicySignature?.let { field(UPLOADPOLICYSIGNATURE_DESCRIPTOR, it) }
    }
}
