// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.ec2.model



public class ModifyTrafficMirrorSessionRequest private constructor(builder: Builder) {
    /**
     * The description to assign to the Traffic Mirror session.
     */
    public val description: kotlin.String? = builder.description
    /**
     * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is `DryRunOperation`. Otherwise, it is `UnauthorizedOperation`.
     */
    public val dryRun: kotlin.Boolean? = builder.dryRun
    /**
     * The number of bytes in each packet to mirror. These are bytes after the VXLAN header. To mirror a subset, set this to the length (in bytes) to mirror. For example, if you set this value to 100, then the first 100 bytes that meet the filter criteria are copied to the target. Do not specify this parameter when you want to mirror the entire packet.
     */
    public val packetLength: kotlin.Int? = builder.packetLength
    /**
     * The properties that you want to remove from the Traffic Mirror session.
     *
     * When you remove a property from a Traffic Mirror session, the property is set to the default.
     */
    public val removeFields: List<TrafficMirrorSessionField>? = builder.removeFields
    /**
     * The session number determines the order in which sessions are evaluated when an interface is used by multiple sessions. The first session with a matching filter is the one that mirrors the packets.
     *
     * Valid values are 1-32766.
     */
    public val sessionNumber: kotlin.Int? = builder.sessionNumber
    /**
     * The ID of the Traffic Mirror filter.
     */
    public val trafficMirrorFilterId: kotlin.String? = builder.trafficMirrorFilterId
    /**
     * The ID of the Traffic Mirror session.
     */
    public val trafficMirrorSessionId: kotlin.String? = builder.trafficMirrorSessionId
    /**
     * The Traffic Mirror target. The target must be in the same VPC as the source, or have a VPC peering connection with the source.
     */
    public val trafficMirrorTargetId: kotlin.String? = builder.trafficMirrorTargetId
    /**
     * The virtual network ID of the Traffic Mirror session.
     */
    public val virtualNetworkId: kotlin.Int? = builder.virtualNetworkId

    public companion object {
        public operator fun invoke(block: Builder.() -> kotlin.Unit): aws.sdk.kotlin.services.ec2.model.ModifyTrafficMirrorSessionRequest = Builder().apply(block).build()
    }

    override fun toString(): kotlin.String = buildString {
        append("ModifyTrafficMirrorSessionRequest(")
        append("description=$description,")
        append("dryRun=$dryRun,")
        append("packetLength=$packetLength,")
        append("removeFields=$removeFields,")
        append("sessionNumber=$sessionNumber,")
        append("trafficMirrorFilterId=$trafficMirrorFilterId,")
        append("trafficMirrorSessionId=$trafficMirrorSessionId,")
        append("trafficMirrorTargetId=$trafficMirrorTargetId,")
        append("virtualNetworkId=$virtualNetworkId)")
    }

    override fun hashCode(): kotlin.Int {
        var result = description?.hashCode() ?: 0
        result = 31 * result + (dryRun?.hashCode() ?: 0)
        result = 31 * result + (packetLength ?: 0)
        result = 31 * result + (removeFields?.hashCode() ?: 0)
        result = 31 * result + (sessionNumber ?: 0)
        result = 31 * result + (trafficMirrorFilterId?.hashCode() ?: 0)
        result = 31 * result + (trafficMirrorSessionId?.hashCode() ?: 0)
        result = 31 * result + (trafficMirrorTargetId?.hashCode() ?: 0)
        result = 31 * result + (virtualNetworkId ?: 0)
        return result
    }

    override fun equals(other: kotlin.Any?): kotlin.Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as ModifyTrafficMirrorSessionRequest

        if (description != other.description) return false
        if (dryRun != other.dryRun) return false
        if (packetLength != other.packetLength) return false
        if (removeFields != other.removeFields) return false
        if (sessionNumber != other.sessionNumber) return false
        if (trafficMirrorFilterId != other.trafficMirrorFilterId) return false
        if (trafficMirrorSessionId != other.trafficMirrorSessionId) return false
        if (trafficMirrorTargetId != other.trafficMirrorTargetId) return false
        if (virtualNetworkId != other.virtualNetworkId) return false

        return true
    }

    public inline fun copy(block: Builder.() -> kotlin.Unit = {}): aws.sdk.kotlin.services.ec2.model.ModifyTrafficMirrorSessionRequest = Builder(this).apply(block).build()

    public class Builder {
        /**
         * The description to assign to the Traffic Mirror session.
         */
        public var description: kotlin.String? = null
        /**
         * Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is `DryRunOperation`. Otherwise, it is `UnauthorizedOperation`.
         */
        public var dryRun: kotlin.Boolean? = null
        /**
         * The number of bytes in each packet to mirror. These are bytes after the VXLAN header. To mirror a subset, set this to the length (in bytes) to mirror. For example, if you set this value to 100, then the first 100 bytes that meet the filter criteria are copied to the target. Do not specify this parameter when you want to mirror the entire packet.
         */
        public var packetLength: kotlin.Int? = null
        /**
         * The properties that you want to remove from the Traffic Mirror session.
         *
         * When you remove a property from a Traffic Mirror session, the property is set to the default.
         */
        public var removeFields: List<TrafficMirrorSessionField>? = null
        /**
         * The session number determines the order in which sessions are evaluated when an interface is used by multiple sessions. The first session with a matching filter is the one that mirrors the packets.
         *
         * Valid values are 1-32766.
         */
        public var sessionNumber: kotlin.Int? = null
        /**
         * The ID of the Traffic Mirror filter.
         */
        public var trafficMirrorFilterId: kotlin.String? = null
        /**
         * The ID of the Traffic Mirror session.
         */
        public var trafficMirrorSessionId: kotlin.String? = null
        /**
         * The Traffic Mirror target. The target must be in the same VPC as the source, or have a VPC peering connection with the source.
         */
        public var trafficMirrorTargetId: kotlin.String? = null
        /**
         * The virtual network ID of the Traffic Mirror session.
         */
        public var virtualNetworkId: kotlin.Int? = null

        @PublishedApi
        internal constructor()
        @PublishedApi
        internal constructor(x: aws.sdk.kotlin.services.ec2.model.ModifyTrafficMirrorSessionRequest) : this() {
            this.description = x.description
            this.dryRun = x.dryRun
            this.packetLength = x.packetLength
            this.removeFields = x.removeFields
            this.sessionNumber = x.sessionNumber
            this.trafficMirrorFilterId = x.trafficMirrorFilterId
            this.trafficMirrorSessionId = x.trafficMirrorSessionId
            this.trafficMirrorTargetId = x.trafficMirrorTargetId
            this.virtualNetworkId = x.virtualNetworkId
        }

        @PublishedApi
        internal fun build(): aws.sdk.kotlin.services.ec2.model.ModifyTrafficMirrorSessionRequest = ModifyTrafficMirrorSessionRequest(this)
    }
}
