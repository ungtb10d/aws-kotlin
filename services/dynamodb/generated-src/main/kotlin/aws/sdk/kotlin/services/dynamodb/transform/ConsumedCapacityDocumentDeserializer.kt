// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.transform

import aws.sdk.kotlin.services.dynamodb.model.Capacity
import aws.sdk.kotlin.services.dynamodb.model.ConsumedCapacity
import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.json.JsonDeserializer
import aws.smithy.kotlin.runtime.serde.json.JsonSerialName
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct

internal fun deserializeConsumedCapacityDocument(deserializer: Deserializer): ConsumedCapacity {
    val builder = ConsumedCapacity.Builder()
    val CAPACITYUNITS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Double, JsonSerialName("CapacityUnits"))
    val GLOBALSECONDARYINDEXES_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Map, JsonSerialName("GlobalSecondaryIndexes"))
    val LOCALSECONDARYINDEXES_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Map, JsonSerialName("LocalSecondaryIndexes"))
    val READCAPACITYUNITS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Double, JsonSerialName("ReadCapacityUnits"))
    val TABLE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, JsonSerialName("Table"))
    val TABLENAME_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, JsonSerialName("TableName"))
    val WRITECAPACITYUNITS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Double, JsonSerialName("WriteCapacityUnits"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        field(CAPACITYUNITS_DESCRIPTOR)
        field(GLOBALSECONDARYINDEXES_DESCRIPTOR)
        field(LOCALSECONDARYINDEXES_DESCRIPTOR)
        field(READCAPACITYUNITS_DESCRIPTOR)
        field(TABLE_DESCRIPTOR)
        field(TABLENAME_DESCRIPTOR)
        field(WRITECAPACITYUNITS_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                CAPACITYUNITS_DESCRIPTOR.index -> builder.capacityUnits = deserializeDouble()
                GLOBALSECONDARYINDEXES_DESCRIPTOR.index -> builder.globalSecondaryIndexes =
                    deserializer.deserializeMap(GLOBALSECONDARYINDEXES_DESCRIPTOR) {
                        val map0 = mutableMapOf<String, Capacity>()
                        while (hasNextEntry()) {
                            val k0 = key()
                            val v0 = if (nextHasValue()) { deserializeCapacityDocument(deserializer) } else { deserializeNull(); continue }
                            map0[k0] = v0
                        }
                        map0
                    }
                LOCALSECONDARYINDEXES_DESCRIPTOR.index -> builder.localSecondaryIndexes =
                    deserializer.deserializeMap(LOCALSECONDARYINDEXES_DESCRIPTOR) {
                        val map0 = mutableMapOf<String, Capacity>()
                        while (hasNextEntry()) {
                            val k0 = key()
                            val v0 = if (nextHasValue()) { deserializeCapacityDocument(deserializer) } else { deserializeNull(); continue }
                            map0[k0] = v0
                        }
                        map0
                    }
                READCAPACITYUNITS_DESCRIPTOR.index -> builder.readCapacityUnits = deserializeDouble()
                TABLE_DESCRIPTOR.index -> builder.table = deserializeCapacityDocument(deserializer)
                TABLENAME_DESCRIPTOR.index -> builder.tableName = deserializeString()
                WRITECAPACITYUNITS_DESCRIPTOR.index -> builder.writeCapacityUnits = deserializeDouble()
                null -> break@loop
                else -> skipValue()
            }
        }
    }
    return builder.build()
}
