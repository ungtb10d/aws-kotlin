// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.transform

import aws.sdk.kotlin.services.dynamodb.model.ReplicaAutoScalingDescription
import aws.sdk.kotlin.services.dynamodb.model.TableAutoScalingDescription
import aws.sdk.kotlin.services.dynamodb.model.TableStatus
import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.json.JsonDeserializer
import aws.smithy.kotlin.runtime.serde.json.JsonSerialName
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct

internal fun deserializeTableAutoScalingDescriptionDocument(deserializer: Deserializer): TableAutoScalingDescription {
    val builder = TableAutoScalingDescription.Builder()
    val REPLICAS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, JsonSerialName("Replicas"))
    val TABLENAME_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, JsonSerialName("TableName"))
    val TABLESTATUS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, JsonSerialName("TableStatus"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        field(REPLICAS_DESCRIPTOR)
        field(TABLENAME_DESCRIPTOR)
        field(TABLESTATUS_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                REPLICAS_DESCRIPTOR.index -> builder.replicas =
                    deserializer.deserializeList(REPLICAS_DESCRIPTOR) {
                        val col0 = mutableListOf<ReplicaAutoScalingDescription>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeReplicaAutoScalingDescriptionDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                TABLENAME_DESCRIPTOR.index -> builder.tableName = deserializeString()
                TABLESTATUS_DESCRIPTOR.index -> builder.tableStatus = deserializeString().let { TableStatus.fromValue(it) }
                null -> break@loop
                else -> skipValue()
            }
        }
    }
    return builder.build()
}
