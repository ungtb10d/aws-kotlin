// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.transform

import aws.sdk.kotlin.services.dynamodb.model.AttributeDefinition
import aws.sdk.kotlin.services.dynamodb.model.GlobalSecondaryIndexDescription
import aws.sdk.kotlin.services.dynamodb.model.KeySchemaElement
import aws.sdk.kotlin.services.dynamodb.model.LocalSecondaryIndexDescription
import aws.sdk.kotlin.services.dynamodb.model.ReplicaDescription
import aws.sdk.kotlin.services.dynamodb.model.TableDescription
import aws.sdk.kotlin.services.dynamodb.model.TableStatus
import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.json.JsonDeserializer
import aws.smithy.kotlin.runtime.serde.json.JsonSerialName
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.time.Instant

internal fun deserializeTableDescriptionDocument(deserializer: Deserializer): TableDescription {
    val builder = TableDescription.Builder()
    val ARCHIVALSUMMARY_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, JsonSerialName("ArchivalSummary"))
    val ATTRIBUTEDEFINITIONS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, JsonSerialName("AttributeDefinitions"))
    val BILLINGMODESUMMARY_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, JsonSerialName("BillingModeSummary"))
    val CREATIONDATETIME_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Timestamp, JsonSerialName("CreationDateTime"))
    val GLOBALSECONDARYINDEXES_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, JsonSerialName("GlobalSecondaryIndexes"))
    val GLOBALTABLEVERSION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, JsonSerialName("GlobalTableVersion"))
    val ITEMCOUNT_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Long, JsonSerialName("ItemCount"))
    val KEYSCHEMA_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, JsonSerialName("KeySchema"))
    val LATESTSTREAMARN_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, JsonSerialName("LatestStreamArn"))
    val LATESTSTREAMLABEL_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, JsonSerialName("LatestStreamLabel"))
    val LOCALSECONDARYINDEXES_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, JsonSerialName("LocalSecondaryIndexes"))
    val PROVISIONEDTHROUGHPUT_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, JsonSerialName("ProvisionedThroughput"))
    val REPLICAS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, JsonSerialName("Replicas"))
    val RESTORESUMMARY_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, JsonSerialName("RestoreSummary"))
    val SSEDESCRIPTION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, JsonSerialName("SSEDescription"))
    val STREAMSPECIFICATION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, JsonSerialName("StreamSpecification"))
    val TABLEARN_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, JsonSerialName("TableArn"))
    val TABLECLASSSUMMARY_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, JsonSerialName("TableClassSummary"))
    val TABLEID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, JsonSerialName("TableId"))
    val TABLENAME_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, JsonSerialName("TableName"))
    val TABLESIZEBYTES_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Long, JsonSerialName("TableSizeBytes"))
    val TABLESTATUS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, JsonSerialName("TableStatus"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        field(ARCHIVALSUMMARY_DESCRIPTOR)
        field(ATTRIBUTEDEFINITIONS_DESCRIPTOR)
        field(BILLINGMODESUMMARY_DESCRIPTOR)
        field(CREATIONDATETIME_DESCRIPTOR)
        field(GLOBALSECONDARYINDEXES_DESCRIPTOR)
        field(GLOBALTABLEVERSION_DESCRIPTOR)
        field(ITEMCOUNT_DESCRIPTOR)
        field(KEYSCHEMA_DESCRIPTOR)
        field(LATESTSTREAMARN_DESCRIPTOR)
        field(LATESTSTREAMLABEL_DESCRIPTOR)
        field(LOCALSECONDARYINDEXES_DESCRIPTOR)
        field(PROVISIONEDTHROUGHPUT_DESCRIPTOR)
        field(REPLICAS_DESCRIPTOR)
        field(RESTORESUMMARY_DESCRIPTOR)
        field(SSEDESCRIPTION_DESCRIPTOR)
        field(STREAMSPECIFICATION_DESCRIPTOR)
        field(TABLEARN_DESCRIPTOR)
        field(TABLECLASSSUMMARY_DESCRIPTOR)
        field(TABLEID_DESCRIPTOR)
        field(TABLENAME_DESCRIPTOR)
        field(TABLESIZEBYTES_DESCRIPTOR)
        field(TABLESTATUS_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                ARCHIVALSUMMARY_DESCRIPTOR.index -> builder.archivalSummary = deserializeArchivalSummaryDocument(deserializer)
                ATTRIBUTEDEFINITIONS_DESCRIPTOR.index -> builder.attributeDefinitions =
                    deserializer.deserializeList(ATTRIBUTEDEFINITIONS_DESCRIPTOR) {
                        val col0 = mutableListOf<AttributeDefinition>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeAttributeDefinitionDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                BILLINGMODESUMMARY_DESCRIPTOR.index -> builder.billingModeSummary = deserializeBillingModeSummaryDocument(deserializer)
                CREATIONDATETIME_DESCRIPTOR.index -> builder.creationDateTime = deserializeString().let { Instant.fromEpochSeconds(it) }
                GLOBALSECONDARYINDEXES_DESCRIPTOR.index -> builder.globalSecondaryIndexes =
                    deserializer.deserializeList(GLOBALSECONDARYINDEXES_DESCRIPTOR) {
                        val col0 = mutableListOf<GlobalSecondaryIndexDescription>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeGlobalSecondaryIndexDescriptionDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                GLOBALTABLEVERSION_DESCRIPTOR.index -> builder.globalTableVersion = deserializeString()
                ITEMCOUNT_DESCRIPTOR.index -> builder.itemCount = deserializeLong()
                KEYSCHEMA_DESCRIPTOR.index -> builder.keySchema =
                    deserializer.deserializeList(KEYSCHEMA_DESCRIPTOR) {
                        val col0 = mutableListOf<KeySchemaElement>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeKeySchemaElementDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                LATESTSTREAMARN_DESCRIPTOR.index -> builder.latestStreamArn = deserializeString()
                LATESTSTREAMLABEL_DESCRIPTOR.index -> builder.latestStreamLabel = deserializeString()
                LOCALSECONDARYINDEXES_DESCRIPTOR.index -> builder.localSecondaryIndexes =
                    deserializer.deserializeList(LOCALSECONDARYINDEXES_DESCRIPTOR) {
                        val col0 = mutableListOf<LocalSecondaryIndexDescription>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeLocalSecondaryIndexDescriptionDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                PROVISIONEDTHROUGHPUT_DESCRIPTOR.index -> builder.provisionedThroughput = deserializeProvisionedThroughputDescriptionDocument(deserializer)
                REPLICAS_DESCRIPTOR.index -> builder.replicas =
                    deserializer.deserializeList(REPLICAS_DESCRIPTOR) {
                        val col0 = mutableListOf<ReplicaDescription>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeReplicaDescriptionDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                RESTORESUMMARY_DESCRIPTOR.index -> builder.restoreSummary = deserializeRestoreSummaryDocument(deserializer)
                SSEDESCRIPTION_DESCRIPTOR.index -> builder.sseDescription = deserializeSseDescriptionDocument(deserializer)
                STREAMSPECIFICATION_DESCRIPTOR.index -> builder.streamSpecification = deserializeStreamSpecificationDocument(deserializer)
                TABLEARN_DESCRIPTOR.index -> builder.tableArn = deserializeString()
                TABLECLASSSUMMARY_DESCRIPTOR.index -> builder.tableClassSummary = deserializeTableClassSummaryDocument(deserializer)
                TABLEID_DESCRIPTOR.index -> builder.tableId = deserializeString()
                TABLENAME_DESCRIPTOR.index -> builder.tableName = deserializeString()
                TABLESIZEBYTES_DESCRIPTOR.index -> builder.tableSizeBytes = deserializeLong()
                TABLESTATUS_DESCRIPTOR.index -> builder.tableStatus = deserializeString().let { TableStatus.fromValue(it) }
                null -> break@loop
                else -> skipValue()
            }
        }
    }
    return builder.build()
}
