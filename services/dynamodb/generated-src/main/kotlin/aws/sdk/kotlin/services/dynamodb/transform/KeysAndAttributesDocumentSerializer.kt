// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.transform

import aws.sdk.kotlin.services.dynamodb.model.KeysAndAttributes
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.Serializer
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.json.JsonDeserializer
import aws.smithy.kotlin.runtime.serde.json.JsonSerialName
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct

internal fun serializeKeysAndAttributesDocument(serializer: Serializer, input: KeysAndAttributes) {
    val ATTRIBUTESTOGET_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, JsonSerialName("AttributesToGet"))
    val CONSISTENTREAD_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Boolean, JsonSerialName("ConsistentRead"))
    val EXPRESSIONATTRIBUTENAMES_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Map, JsonSerialName("ExpressionAttributeNames"))
    val KEYS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, JsonSerialName("Keys"))
    val KEYS_C0_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Map)
    val PROJECTIONEXPRESSION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, JsonSerialName("ProjectionExpression"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        field(ATTRIBUTESTOGET_DESCRIPTOR)
        field(CONSISTENTREAD_DESCRIPTOR)
        field(EXPRESSIONATTRIBUTENAMES_DESCRIPTOR)
        field(KEYS_DESCRIPTOR)
        field(PROJECTIONEXPRESSION_DESCRIPTOR)
    }

    serializer.serializeStruct(OBJ_DESCRIPTOR) {
        if (input.keys != null) {
            listField(KEYS_DESCRIPTOR) {
                for (el0 in input.keys) {
                    serializer.serializeMap(KEYS_C0_DESCRIPTOR) {
                        el0.forEach { (key1, value1) -> entry(key1, asSdkSerializable(value1, ::serializeAttributeValueDocument)) }
                    }
                }
            }
        }
        if (input.attributesToGet != null) {
            listField(ATTRIBUTESTOGET_DESCRIPTOR) {
                for (el0 in input.attributesToGet) {
                    serializeString(el0)
                }
            }
        }
        input.consistentRead?.let { field(CONSISTENTREAD_DESCRIPTOR, it) }
        input.projectionExpression?.let { field(PROJECTIONEXPRESSION_DESCRIPTOR, it) }
        if (input.expressionAttributeNames != null) {
            mapField(EXPRESSIONATTRIBUTENAMES_DESCRIPTOR) {
                input.expressionAttributeNames.forEach { (key, value) -> entry(key, value) }
            }
        }
    }
}
