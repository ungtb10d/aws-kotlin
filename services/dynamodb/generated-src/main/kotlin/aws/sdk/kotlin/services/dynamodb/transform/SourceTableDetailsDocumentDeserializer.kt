// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.transform

import aws.sdk.kotlin.services.dynamodb.model.BillingMode
import aws.sdk.kotlin.services.dynamodb.model.KeySchemaElement
import aws.sdk.kotlin.services.dynamodb.model.SourceTableDetails
import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.json.JsonDeserializer
import aws.smithy.kotlin.runtime.serde.json.JsonSerialName
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.time.Instant

internal fun deserializeSourceTableDetailsDocument(deserializer: Deserializer): SourceTableDetails {
    val builder = SourceTableDetails.Builder()
    val BILLINGMODE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, JsonSerialName("BillingMode"))
    val ITEMCOUNT_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Long, JsonSerialName("ItemCount"))
    val KEYSCHEMA_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, JsonSerialName("KeySchema"))
    val PROVISIONEDTHROUGHPUT_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, JsonSerialName("ProvisionedThroughput"))
    val TABLEARN_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, JsonSerialName("TableArn"))
    val TABLECREATIONDATETIME_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Timestamp, JsonSerialName("TableCreationDateTime"))
    val TABLEID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, JsonSerialName("TableId"))
    val TABLENAME_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, JsonSerialName("TableName"))
    val TABLESIZEBYTES_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Long, JsonSerialName("TableSizeBytes"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        field(BILLINGMODE_DESCRIPTOR)
        field(ITEMCOUNT_DESCRIPTOR)
        field(KEYSCHEMA_DESCRIPTOR)
        field(PROVISIONEDTHROUGHPUT_DESCRIPTOR)
        field(TABLEARN_DESCRIPTOR)
        field(TABLECREATIONDATETIME_DESCRIPTOR)
        field(TABLEID_DESCRIPTOR)
        field(TABLENAME_DESCRIPTOR)
        field(TABLESIZEBYTES_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                BILLINGMODE_DESCRIPTOR.index -> builder.billingMode = deserializeString().let { BillingMode.fromValue(it) }
                ITEMCOUNT_DESCRIPTOR.index -> builder.itemCount = deserializeLong()
                KEYSCHEMA_DESCRIPTOR.index -> builder.keySchema =
                    deserializer.deserializeList(KEYSCHEMA_DESCRIPTOR) {
                        val col0 = mutableListOf<KeySchemaElement>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeKeySchemaElementDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                PROVISIONEDTHROUGHPUT_DESCRIPTOR.index -> builder.provisionedThroughput = deserializeProvisionedThroughputDocument(deserializer)
                TABLEARN_DESCRIPTOR.index -> builder.tableArn = deserializeString()
                TABLECREATIONDATETIME_DESCRIPTOR.index -> builder.tableCreationDateTime = deserializeString().let { Instant.fromEpochSeconds(it) }
                TABLEID_DESCRIPTOR.index -> builder.tableId = deserializeString()
                TABLENAME_DESCRIPTOR.index -> builder.tableName = deserializeString()
                TABLESIZEBYTES_DESCRIPTOR.index -> builder.tableSizeBytes = deserializeLong()
                null -> break@loop
                else -> skipValue()
            }
        }
    }
    return builder.build()
}
