// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.transform

import aws.sdk.kotlin.services.dynamodb.model.AttributeValue
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.SerializationException
import aws.smithy.kotlin.runtime.serde.Serializer
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.json.JsonDeserializer
import aws.smithy.kotlin.runtime.serde.json.JsonSerialName
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.util.encodeBase64String

internal fun serializeAttributeValueDocument(serializer: Serializer, input: AttributeValue) {
    val B_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Blob, JsonSerialName("B"))
    val BOOL_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Boolean, JsonSerialName("BOOL"))
    val BS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, JsonSerialName("BS"))
    val L_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, JsonSerialName("L"))
    val M_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Map, JsonSerialName("M"))
    val N_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, JsonSerialName("N"))
    val NS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, JsonSerialName("NS"))
    val NULL_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Boolean, JsonSerialName("NULL"))
    val S_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, JsonSerialName("S"))
    val SS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, JsonSerialName("SS"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        field(B_DESCRIPTOR)
        field(BOOL_DESCRIPTOR)
        field(BS_DESCRIPTOR)
        field(L_DESCRIPTOR)
        field(M_DESCRIPTOR)
        field(N_DESCRIPTOR)
        field(NS_DESCRIPTOR)
        field(NULL_DESCRIPTOR)
        field(S_DESCRIPTOR)
        field(SS_DESCRIPTOR)
    }

    serializer.serializeStruct(OBJ_DESCRIPTOR) {
        when (input) {
            is AttributeValue.S -> field(S_DESCRIPTOR, input.value)
            is AttributeValue.N -> field(N_DESCRIPTOR, input.value)
            is AttributeValue.B -> field(B_DESCRIPTOR, input.value.encodeBase64String())
            is AttributeValue.Ss -> {
                listField(SS_DESCRIPTOR) {
                    for (el0 in input.value) {
                        serializeString(el0)
                    }
                }
            }
            is AttributeValue.Ns -> {
                listField(NS_DESCRIPTOR) {
                    for (el0 in input.value) {
                        serializeString(el0)
                    }
                }
            }
            is AttributeValue.Bs -> {
                listField(BS_DESCRIPTOR) {
                    for (el0 in input.value) {
                        serializeString(el0.encodeBase64String())
                    }
                }
            }
            is AttributeValue.M -> {
                mapField(M_DESCRIPTOR) {
                    input.value.forEach { (key, value) -> entry(key, asSdkSerializable(value, ::serializeAttributeValueDocument)) }
                }
            }
            is AttributeValue.L -> {
                listField(L_DESCRIPTOR) {
                    for (el0 in input.value) {
                        serializeSdkSerializable(asSdkSerializable(el0, ::serializeAttributeValueDocument))
                    }
                }
            }
            is AttributeValue.Null -> field(NULL_DESCRIPTOR, input.value)
            is AttributeValue.Bool -> field(BOOL_DESCRIPTOR, input.value)
            is AttributeValue.SdkUnknown -> throw SerializationException("Cannot serialize SdkUnknown")
        }
    }
}
