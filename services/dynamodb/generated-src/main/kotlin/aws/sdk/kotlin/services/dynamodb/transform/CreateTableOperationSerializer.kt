// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.transform

import aws.sdk.kotlin.services.dynamodb.model.AttributeDefinition
import aws.sdk.kotlin.services.dynamodb.model.BillingMode
import aws.sdk.kotlin.services.dynamodb.model.CreateTableRequest
import aws.sdk.kotlin.services.dynamodb.model.GlobalSecondaryIndex
import aws.sdk.kotlin.services.dynamodb.model.KeySchemaElement
import aws.sdk.kotlin.services.dynamodb.model.LocalSecondaryIndex
import aws.sdk.kotlin.services.dynamodb.model.ProvisionedThroughput
import aws.sdk.kotlin.services.dynamodb.model.SseSpecification
import aws.sdk.kotlin.services.dynamodb.model.StreamSpecification
import aws.sdk.kotlin.services.dynamodb.model.TableClass
import aws.sdk.kotlin.services.dynamodb.model.Tag
import aws.smithy.kotlin.runtime.client.ExecutionContext
import aws.smithy.kotlin.runtime.http.HttpBody
import aws.smithy.kotlin.runtime.http.HttpMethod
import aws.smithy.kotlin.runtime.http.content.ByteArrayContent
import aws.smithy.kotlin.runtime.http.operation.HttpSerialize
import aws.smithy.kotlin.runtime.http.request.HttpRequestBuilder
import aws.smithy.kotlin.runtime.http.request.url
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.json.JsonDeserializer
import aws.smithy.kotlin.runtime.serde.json.JsonSerialName
import aws.smithy.kotlin.runtime.serde.json.JsonSerializer
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct


internal class CreateTableOperationSerializer: HttpSerialize<CreateTableRequest> {
    override suspend fun serialize(context: ExecutionContext, input: CreateTableRequest): HttpRequestBuilder {
        val builder = HttpRequestBuilder()
        builder.method = HttpMethod.POST

        builder.url {
            path = "/"
        }

        val payload = serializeCreateTableOperationBody(context, input)
        builder.body = ByteArrayContent(payload)
        if (builder.body !is HttpBody.Empty) {
            builder.headers.setMissing("Content-Type", "application/x-amz-json-1.0")
        }
        return builder
    }
}

private fun serializeCreateTableOperationBody(context: ExecutionContext, input: CreateTableRequest): ByteArray {
    val serializer = JsonSerializer()
    val ATTRIBUTEDEFINITIONS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, JsonSerialName("AttributeDefinitions"))
    val BILLINGMODE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, JsonSerialName("BillingMode"))
    val GLOBALSECONDARYINDEXES_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, JsonSerialName("GlobalSecondaryIndexes"))
    val KEYSCHEMA_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, JsonSerialName("KeySchema"))
    val LOCALSECONDARYINDEXES_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, JsonSerialName("LocalSecondaryIndexes"))
    val PROVISIONEDTHROUGHPUT_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, JsonSerialName("ProvisionedThroughput"))
    val SSESPECIFICATION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, JsonSerialName("SSESpecification"))
    val STREAMSPECIFICATION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, JsonSerialName("StreamSpecification"))
    val TABLECLASS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, JsonSerialName("TableClass"))
    val TABLENAME_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, JsonSerialName("TableName"))
    val TAGS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, JsonSerialName("Tags"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        field(ATTRIBUTEDEFINITIONS_DESCRIPTOR)
        field(BILLINGMODE_DESCRIPTOR)
        field(GLOBALSECONDARYINDEXES_DESCRIPTOR)
        field(KEYSCHEMA_DESCRIPTOR)
        field(LOCALSECONDARYINDEXES_DESCRIPTOR)
        field(PROVISIONEDTHROUGHPUT_DESCRIPTOR)
        field(SSESPECIFICATION_DESCRIPTOR)
        field(STREAMSPECIFICATION_DESCRIPTOR)
        field(TABLECLASS_DESCRIPTOR)
        field(TABLENAME_DESCRIPTOR)
        field(TAGS_DESCRIPTOR)
    }

    serializer.serializeStruct(OBJ_DESCRIPTOR) {
        if (input.attributeDefinitions != null) {
            listField(ATTRIBUTEDEFINITIONS_DESCRIPTOR) {
                for (el0 in input.attributeDefinitions) {
                    serializeSdkSerializable(asSdkSerializable(el0, ::serializeAttributeDefinitionDocument))
                }
            }
        }
        input.billingMode?.let { field(BILLINGMODE_DESCRIPTOR, it.value) }
        if (input.globalSecondaryIndexes != null) {
            listField(GLOBALSECONDARYINDEXES_DESCRIPTOR) {
                for (el0 in input.globalSecondaryIndexes) {
                    serializeSdkSerializable(asSdkSerializable(el0, ::serializeGlobalSecondaryIndexDocument))
                }
            }
        }
        if (input.keySchema != null) {
            listField(KEYSCHEMA_DESCRIPTOR) {
                for (el0 in input.keySchema) {
                    serializeSdkSerializable(asSdkSerializable(el0, ::serializeKeySchemaElementDocument))
                }
            }
        }
        if (input.localSecondaryIndexes != null) {
            listField(LOCALSECONDARYINDEXES_DESCRIPTOR) {
                for (el0 in input.localSecondaryIndexes) {
                    serializeSdkSerializable(asSdkSerializable(el0, ::serializeLocalSecondaryIndexDocument))
                }
            }
        }
        input.provisionedThroughput?.let { field(PROVISIONEDTHROUGHPUT_DESCRIPTOR, it, ::serializeProvisionedThroughputDocument) }
        input.sseSpecification?.let { field(SSESPECIFICATION_DESCRIPTOR, it, ::serializeSseSpecificationDocument) }
        input.streamSpecification?.let { field(STREAMSPECIFICATION_DESCRIPTOR, it, ::serializeStreamSpecificationDocument) }
        input.tableClass?.let { field(TABLECLASS_DESCRIPTOR, it.value) }
        input.tableName?.let { field(TABLENAME_DESCRIPTOR, it) }
        if (input.tags != null) {
            listField(TAGS_DESCRIPTOR) {
                for (el0 in input.tags) {
                    serializeSdkSerializable(asSdkSerializable(el0, ::serializeTagDocument))
                }
            }
        }
    }
    return serializer.toByteArray()
}
