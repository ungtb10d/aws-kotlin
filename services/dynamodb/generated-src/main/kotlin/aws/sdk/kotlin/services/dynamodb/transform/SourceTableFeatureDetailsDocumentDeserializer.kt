// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.transform

import aws.sdk.kotlin.services.dynamodb.model.GlobalSecondaryIndexInfo
import aws.sdk.kotlin.services.dynamodb.model.LocalSecondaryIndexInfo
import aws.sdk.kotlin.services.dynamodb.model.SourceTableFeatureDetails
import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.json.JsonDeserializer
import aws.smithy.kotlin.runtime.serde.json.JsonSerialName
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct

internal fun deserializeSourceTableFeatureDetailsDocument(deserializer: Deserializer): SourceTableFeatureDetails {
    val builder = SourceTableFeatureDetails.Builder()
    val GLOBALSECONDARYINDEXES_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, JsonSerialName("GlobalSecondaryIndexes"))
    val LOCALSECONDARYINDEXES_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, JsonSerialName("LocalSecondaryIndexes"))
    val SSEDESCRIPTION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, JsonSerialName("SSEDescription"))
    val STREAMDESCRIPTION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, JsonSerialName("StreamDescription"))
    val TIMETOLIVEDESCRIPTION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, JsonSerialName("TimeToLiveDescription"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        field(GLOBALSECONDARYINDEXES_DESCRIPTOR)
        field(LOCALSECONDARYINDEXES_DESCRIPTOR)
        field(SSEDESCRIPTION_DESCRIPTOR)
        field(STREAMDESCRIPTION_DESCRIPTOR)
        field(TIMETOLIVEDESCRIPTION_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                GLOBALSECONDARYINDEXES_DESCRIPTOR.index -> builder.globalSecondaryIndexes =
                    deserializer.deserializeList(GLOBALSECONDARYINDEXES_DESCRIPTOR) {
                        val col0 = mutableListOf<GlobalSecondaryIndexInfo>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeGlobalSecondaryIndexInfoDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                LOCALSECONDARYINDEXES_DESCRIPTOR.index -> builder.localSecondaryIndexes =
                    deserializer.deserializeList(LOCALSECONDARYINDEXES_DESCRIPTOR) {
                        val col0 = mutableListOf<LocalSecondaryIndexInfo>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeLocalSecondaryIndexInfoDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                SSEDESCRIPTION_DESCRIPTOR.index -> builder.sseDescription = deserializeSseDescriptionDocument(deserializer)
                STREAMDESCRIPTION_DESCRIPTOR.index -> builder.streamDescription = deserializeStreamSpecificationDocument(deserializer)
                TIMETOLIVEDESCRIPTION_DESCRIPTOR.index -> builder.timeToLiveDescription = deserializeTimeToLiveDescriptionDocument(deserializer)
                null -> break@loop
                else -> skipValue()
            }
        }
    }
    return builder.build()
}
