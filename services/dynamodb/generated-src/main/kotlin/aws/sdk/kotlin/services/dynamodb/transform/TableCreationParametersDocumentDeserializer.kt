// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.transform

import aws.sdk.kotlin.services.dynamodb.model.AttributeDefinition
import aws.sdk.kotlin.services.dynamodb.model.BillingMode
import aws.sdk.kotlin.services.dynamodb.model.GlobalSecondaryIndex
import aws.sdk.kotlin.services.dynamodb.model.KeySchemaElement
import aws.sdk.kotlin.services.dynamodb.model.TableCreationParameters
import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.json.JsonDeserializer
import aws.smithy.kotlin.runtime.serde.json.JsonSerialName
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct

internal fun deserializeTableCreationParametersDocument(deserializer: Deserializer): TableCreationParameters {
    val builder = TableCreationParameters.Builder()
    val ATTRIBUTEDEFINITIONS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, JsonSerialName("AttributeDefinitions"))
    val BILLINGMODE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, JsonSerialName("BillingMode"))
    val GLOBALSECONDARYINDEXES_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, JsonSerialName("GlobalSecondaryIndexes"))
    val KEYSCHEMA_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, JsonSerialName("KeySchema"))
    val PROVISIONEDTHROUGHPUT_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, JsonSerialName("ProvisionedThroughput"))
    val SSESPECIFICATION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, JsonSerialName("SSESpecification"))
    val TABLENAME_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, JsonSerialName("TableName"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        field(ATTRIBUTEDEFINITIONS_DESCRIPTOR)
        field(BILLINGMODE_DESCRIPTOR)
        field(GLOBALSECONDARYINDEXES_DESCRIPTOR)
        field(KEYSCHEMA_DESCRIPTOR)
        field(PROVISIONEDTHROUGHPUT_DESCRIPTOR)
        field(SSESPECIFICATION_DESCRIPTOR)
        field(TABLENAME_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                ATTRIBUTEDEFINITIONS_DESCRIPTOR.index -> builder.attributeDefinitions =
                    deserializer.deserializeList(ATTRIBUTEDEFINITIONS_DESCRIPTOR) {
                        val col0 = mutableListOf<AttributeDefinition>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeAttributeDefinitionDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                BILLINGMODE_DESCRIPTOR.index -> builder.billingMode = deserializeString().let { BillingMode.fromValue(it) }
                GLOBALSECONDARYINDEXES_DESCRIPTOR.index -> builder.globalSecondaryIndexes =
                    deserializer.deserializeList(GLOBALSECONDARYINDEXES_DESCRIPTOR) {
                        val col0 = mutableListOf<GlobalSecondaryIndex>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeGlobalSecondaryIndexDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                KEYSCHEMA_DESCRIPTOR.index -> builder.keySchema =
                    deserializer.deserializeList(KEYSCHEMA_DESCRIPTOR) {
                        val col0 = mutableListOf<KeySchemaElement>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeKeySchemaElementDocument(deserializer) } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                PROVISIONEDTHROUGHPUT_DESCRIPTOR.index -> builder.provisionedThroughput = deserializeProvisionedThroughputDocument(deserializer)
                SSESPECIFICATION_DESCRIPTOR.index -> builder.sseSpecification = deserializeSseSpecificationDocument(deserializer)
                TABLENAME_DESCRIPTOR.index -> builder.tableName = deserializeString()
                null -> break@loop
                else -> skipValue()
            }
        }
    }
    return builder.build()
}
