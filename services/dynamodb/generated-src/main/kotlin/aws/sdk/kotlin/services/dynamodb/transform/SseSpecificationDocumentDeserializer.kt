// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.dynamodb.transform

import aws.sdk.kotlin.services.dynamodb.model.SseSpecification
import aws.sdk.kotlin.services.dynamodb.model.SseType
import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.json.JsonDeserializer
import aws.smithy.kotlin.runtime.serde.json.JsonSerialName
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct

internal fun deserializeSseSpecificationDocument(deserializer: Deserializer): SseSpecification {
    val builder = SseSpecification.Builder()
    val ENABLED_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Boolean, JsonSerialName("Enabled"))
    val KMSMASTERKEYID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, JsonSerialName("KMSMasterKeyId"))
    val SSETYPE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, JsonSerialName("SSEType"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        field(ENABLED_DESCRIPTOR)
        field(KMSMASTERKEYID_DESCRIPTOR)
        field(SSETYPE_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                ENABLED_DESCRIPTOR.index -> builder.enabled = deserializeBoolean()
                KMSMASTERKEYID_DESCRIPTOR.index -> builder.kmsMasterKeyId = deserializeString()
                SSETYPE_DESCRIPTOR.index -> builder.sseType = deserializeString().let { SseType.fromValue(it) }
                null -> break@loop
                else -> skipValue()
            }
        }
    }
    return builder.build()
}
