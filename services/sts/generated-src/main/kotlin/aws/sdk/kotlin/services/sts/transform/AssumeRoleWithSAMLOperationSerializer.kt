// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.sts.transform

import aws.sdk.kotlin.services.sts.model.AssumeRoleWithSamlRequest
import aws.sdk.kotlin.services.sts.model.PolicyDescriptorType
import aws.smithy.kotlin.runtime.client.ExecutionContext
import aws.smithy.kotlin.runtime.http.HttpBody
import aws.smithy.kotlin.runtime.http.HttpMethod
import aws.smithy.kotlin.runtime.http.content.ByteArrayContent
import aws.smithy.kotlin.runtime.http.operation.HttpSerialize
import aws.smithy.kotlin.runtime.http.request.HttpRequestBuilder
import aws.smithy.kotlin.runtime.http.request.url
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.formurl.FormUrlSerialName
import aws.smithy.kotlin.runtime.serde.formurl.FormUrlSerializer
import aws.smithy.kotlin.runtime.serde.formurl.QueryLiteral
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct


internal class AssumeRoleWithSAMLOperationSerializer: HttpSerialize<AssumeRoleWithSamlRequest> {
    override suspend fun serialize(context: ExecutionContext, input: AssumeRoleWithSamlRequest): HttpRequestBuilder {
        val builder = HttpRequestBuilder()
        builder.method = HttpMethod.POST

        builder.url {
            path = "/"
        }

        val payload = serializeAssumeRoleWithSAMLOperationBody(context, input)
        builder.body = ByteArrayContent(payload)
        if (builder.body !is HttpBody.Empty) {
            builder.headers.setMissing("Content-Type", "application/x-www-form-urlencoded")
        }
        return builder
    }
}

private fun serializeAssumeRoleWithSAMLOperationBody(context: ExecutionContext, input: AssumeRoleWithSamlRequest): ByteArray {
    val serializer = FormUrlSerializer()
    val DURATIONSECONDS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, FormUrlSerialName("DurationSeconds"))
    val POLICY_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, FormUrlSerialName("Policy"))
    val POLICYARNS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, FormUrlSerialName("PolicyArns"))
    val PRINCIPALARN_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, FormUrlSerialName("PrincipalArn"))
    val ROLEARN_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, FormUrlSerialName("RoleArn"))
    val SAMLASSERTION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, FormUrlSerialName("SAMLAssertion"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(FormUrlSerialName("AssumeRoleWithSAMLRequest"))
        trait(QueryLiteral("Action", "AssumeRoleWithSAML"))
        trait(QueryLiteral("Version", "2011-06-15"))
        field(DURATIONSECONDS_DESCRIPTOR)
        field(POLICY_DESCRIPTOR)
        field(POLICYARNS_DESCRIPTOR)
        field(PRINCIPALARN_DESCRIPTOR)
        field(ROLEARN_DESCRIPTOR)
        field(SAMLASSERTION_DESCRIPTOR)
    }

    serializer.serializeStruct(OBJ_DESCRIPTOR) {
        input.durationSeconds?.let { field(DURATIONSECONDS_DESCRIPTOR, it) }
        input.policy?.let { field(POLICY_DESCRIPTOR, it) }
        if (input.policyArns != null) {
            listField(POLICYARNS_DESCRIPTOR) {
                for (el0 in input.policyArns) {
                    serializeSdkSerializable(asSdkSerializable(el0, ::serializePolicyDescriptorTypeDocument))
                }
            }
        }
        input.principalArn?.let { field(PRINCIPALARN_DESCRIPTOR, it) }
        input.roleArn?.let { field(ROLEARN_DESCRIPTOR, it) }
        input.samlAssertion?.let { field(SAMLASSERTION_DESCRIPTOR, it) }
    }
    return serializer.toByteArray()
}
