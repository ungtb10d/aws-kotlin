// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.transform

import aws.sdk.kotlin.services.s3.model.Delete
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.serde.xml.Flattened
import aws.smithy.kotlin.runtime.serde.xml.XmlDeserializer
import aws.smithy.kotlin.runtime.serde.xml.XmlNamespace
import aws.smithy.kotlin.runtime.serde.xml.XmlSerialName
import aws.smithy.kotlin.runtime.serde.xml.XmlSerializer

/**
 * Payload serializer for Delete with a different XML name trait (Delete)
 */
internal fun serializeDeletePayloadWithXmlNameDelete(input: Delete): ByteArray {
    val serializer = XmlSerializer()
    val OBJECTS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("Object"), Flattened)
    val QUIET_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Boolean, XmlSerialName("Quiet"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(XmlSerialName("Delete"))
        trait(XmlNamespace("http://s3.amazonaws.com/doc/2006-03-01/"))
        field(OBJECTS_DESCRIPTOR)
        field(QUIET_DESCRIPTOR)
    }

    serializer.serializeStruct(OBJ_DESCRIPTOR) {
        if (input.objects != null) {
            listField(OBJECTS_DESCRIPTOR) {
                for (el0 in input.objects) {
                    serializeSdkSerializable(asSdkSerializable(el0, ::serializeObjectIdentifierDocument))
                }
            }
        }
        if (input.quiet != false) field(QUIET_DESCRIPTOR, input.quiet)
    }
    return serializer.toByteArray()
}
