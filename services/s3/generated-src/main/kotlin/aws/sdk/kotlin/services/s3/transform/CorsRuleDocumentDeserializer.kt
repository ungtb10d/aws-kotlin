// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.transform

import aws.sdk.kotlin.services.s3.model.CorsRule
import aws.smithy.kotlin.runtime.serde.Deserializer
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.serde.xml.Flattened
import aws.smithy.kotlin.runtime.serde.xml.XmlDeserializer
import aws.smithy.kotlin.runtime.serde.xml.XmlNamespace
import aws.smithy.kotlin.runtime.serde.xml.XmlSerialName

internal fun deserializeCorsRuleDocument(deserializer: Deserializer): CorsRule {
    val builder = CorsRule.Builder()
    val ALLOWEDHEADERS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("AllowedHeader"), Flattened)
    val ALLOWEDMETHODS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("AllowedMethod"), Flattened)
    val ALLOWEDORIGINS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("AllowedOrigin"), Flattened)
    val EXPOSEHEADERS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("ExposeHeader"), Flattened)
    val ID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("ID"))
    val MAXAGESECONDS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Integer, XmlSerialName("MaxAgeSeconds"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(XmlSerialName("CorsRule"))
        trait(XmlNamespace("http://s3.amazonaws.com/doc/2006-03-01/"))
        field(ALLOWEDHEADERS_DESCRIPTOR)
        field(ALLOWEDMETHODS_DESCRIPTOR)
        field(ALLOWEDORIGINS_DESCRIPTOR)
        field(EXPOSEHEADERS_DESCRIPTOR)
        field(ID_DESCRIPTOR)
        field(MAXAGESECONDS_DESCRIPTOR)
    }

    deserializer.deserializeStruct(OBJ_DESCRIPTOR) {
        loop@while (true) {
            when (findNextFieldIndex()) {
                ALLOWEDHEADERS_DESCRIPTOR.index -> builder.allowedHeaders =
                    deserializer.deserializeList(ALLOWEDHEADERS_DESCRIPTOR) {
                        val col0 = mutableListOf<String>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeString() } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                ALLOWEDMETHODS_DESCRIPTOR.index -> builder.allowedMethods =
                    deserializer.deserializeList(ALLOWEDMETHODS_DESCRIPTOR) {
                        val col0 = mutableListOf<String>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeString() } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                ALLOWEDORIGINS_DESCRIPTOR.index -> builder.allowedOrigins =
                    deserializer.deserializeList(ALLOWEDORIGINS_DESCRIPTOR) {
                        val col0 = mutableListOf<String>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeString() } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                EXPOSEHEADERS_DESCRIPTOR.index -> builder.exposeHeaders =
                    deserializer.deserializeList(EXPOSEHEADERS_DESCRIPTOR) {
                        val col0 = mutableListOf<String>()
                        while (hasNextElement()) {
                            val el0 = if (nextHasValue()) { deserializeString() } else { deserializeNull(); continue }
                            col0.add(el0)
                        }
                        col0
                    }
                ID_DESCRIPTOR.index -> builder.id = deserializeString()
                MAXAGESECONDS_DESCRIPTOR.index -> builder.maxAgeSeconds = deserializeInt()
                null -> break@loop
                else -> skipValue()
            }
        }
    }
    return builder.build()
}
