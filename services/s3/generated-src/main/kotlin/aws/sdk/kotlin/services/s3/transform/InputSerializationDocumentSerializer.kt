// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.transform

import aws.sdk.kotlin.services.s3.model.InputSerialization
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.Serializer
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.serde.xml.XmlDeserializer
import aws.smithy.kotlin.runtime.serde.xml.XmlNamespace
import aws.smithy.kotlin.runtime.serde.xml.XmlSerialName

internal fun serializeInputSerializationDocument(serializer: Serializer, input: InputSerialization) {
    val CSV_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("CSV"))
    val COMPRESSIONTYPE_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("CompressionType"))
    val JSON_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("JSON"))
    val PARQUET_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("Parquet"))
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(XmlSerialName("InputSerialization"))
        trait(XmlNamespace("http://s3.amazonaws.com/doc/2006-03-01/"))
        field(CSV_DESCRIPTOR)
        field(COMPRESSIONTYPE_DESCRIPTOR)
        field(JSON_DESCRIPTOR)
        field(PARQUET_DESCRIPTOR)
    }

    serializer.serializeStruct(OBJ_DESCRIPTOR) {
        input.csv?.let { field(CSV_DESCRIPTOR, it, ::serializeCsvInputDocument) }
        input.compressionType?.let { field(COMPRESSIONTYPE_DESCRIPTOR, it.value) }
        input.json?.let { field(JSON_DESCRIPTOR, it, ::serializeJsonInputDocument) }
        input.parquet?.let { field(PARQUET_DESCRIPTOR, it, ::serializeParquetInputDocument) }
    }
}
