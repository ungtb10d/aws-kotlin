// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.transform

import aws.sdk.kotlin.services.s3.model.LifecycleRule
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.Serializer
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.serde.xml.Flattened
import aws.smithy.kotlin.runtime.serde.xml.XmlDeserializer
import aws.smithy.kotlin.runtime.serde.xml.XmlNamespace
import aws.smithy.kotlin.runtime.serde.xml.XmlSerialName

internal fun serializeLifecycleRuleDocument(serializer: Serializer, input: LifecycleRule) {
    val ABORTINCOMPLETEMULTIPARTUPLOAD_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("AbortIncompleteMultipartUpload"))
    val EXPIRATION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("Expiration"))
    val FILTER_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("Filter"))
    val ID_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("ID"))
    val NONCURRENTVERSIONEXPIRATION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("NoncurrentVersionExpiration"))
    val NONCURRENTVERSIONTRANSITIONS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("NoncurrentVersionTransition"), Flattened)
    val PREFIX_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("Prefix"))
    val STATUS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.String, XmlSerialName("Status"))
    val TRANSITIONS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("Transition"), Flattened)
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(XmlSerialName("LifecycleRule"))
        trait(XmlNamespace("http://s3.amazonaws.com/doc/2006-03-01/"))
        field(ABORTINCOMPLETEMULTIPARTUPLOAD_DESCRIPTOR)
        field(EXPIRATION_DESCRIPTOR)
        field(FILTER_DESCRIPTOR)
        field(ID_DESCRIPTOR)
        field(NONCURRENTVERSIONEXPIRATION_DESCRIPTOR)
        field(NONCURRENTVERSIONTRANSITIONS_DESCRIPTOR)
        field(PREFIX_DESCRIPTOR)
        field(STATUS_DESCRIPTOR)
        field(TRANSITIONS_DESCRIPTOR)
    }

    serializer.serializeStruct(OBJ_DESCRIPTOR) {
        input.abortIncompleteMultipartUpload?.let { field(ABORTINCOMPLETEMULTIPARTUPLOAD_DESCRIPTOR, it, ::serializeAbortIncompleteMultipartUploadDocument) }
        input.expiration?.let { field(EXPIRATION_DESCRIPTOR, it, ::serializeLifecycleExpirationDocument) }
        input.filter?.let { field(FILTER_DESCRIPTOR, it, ::serializeLifecycleRuleFilterDocument) }
        input.id?.let { field(ID_DESCRIPTOR, it) }
        input.noncurrentVersionExpiration?.let { field(NONCURRENTVERSIONEXPIRATION_DESCRIPTOR, it, ::serializeNoncurrentVersionExpirationDocument) }
        if (input.noncurrentVersionTransitions != null) {
            listField(NONCURRENTVERSIONTRANSITIONS_DESCRIPTOR) {
                for (el0 in input.noncurrentVersionTransitions) {
                    serializeSdkSerializable(asSdkSerializable(el0, ::serializeNoncurrentVersionTransitionDocument))
                }
            }
        }
        input.prefix?.let { field(PREFIX_DESCRIPTOR, it) }
        input.status?.let { field(STATUS_DESCRIPTOR, it.value) }
        if (input.transitions != null) {
            listField(TRANSITIONS_DESCRIPTOR) {
                for (el0 in input.transitions) {
                    serializeSdkSerializable(asSdkSerializable(el0, ::serializeTransitionDocument))
                }
            }
        }
    }
}
