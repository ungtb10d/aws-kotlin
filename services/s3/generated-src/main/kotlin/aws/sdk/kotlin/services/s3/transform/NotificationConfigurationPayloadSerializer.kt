// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.s3.transform

import aws.sdk.kotlin.services.s3.model.NotificationConfiguration
import aws.smithy.kotlin.runtime.serde.SdkFieldDescriptor
import aws.smithy.kotlin.runtime.serde.SdkObjectDescriptor
import aws.smithy.kotlin.runtime.serde.SerialKind
import aws.smithy.kotlin.runtime.serde.asSdkSerializable
import aws.smithy.kotlin.runtime.serde.deserializeList
import aws.smithy.kotlin.runtime.serde.deserializeMap
import aws.smithy.kotlin.runtime.serde.deserializeStruct
import aws.smithy.kotlin.runtime.serde.field
import aws.smithy.kotlin.runtime.serde.serializeList
import aws.smithy.kotlin.runtime.serde.serializeMap
import aws.smithy.kotlin.runtime.serde.serializeStruct
import aws.smithy.kotlin.runtime.serde.xml.Flattened
import aws.smithy.kotlin.runtime.serde.xml.XmlDeserializer
import aws.smithy.kotlin.runtime.serde.xml.XmlNamespace
import aws.smithy.kotlin.runtime.serde.xml.XmlSerialName
import aws.smithy.kotlin.runtime.serde.xml.XmlSerializer

/**
 * Payload serializer for NotificationConfiguration with a different XML name trait (NotificationConfiguration)
 */
internal fun serializeNotificationConfigurationPayloadWithXmlNameNotificationConfiguration(input: NotificationConfiguration): ByteArray {
    val serializer = XmlSerializer()
    val EVENTBRIDGECONFIGURATION_DESCRIPTOR = SdkFieldDescriptor(SerialKind.Struct, XmlSerialName("EventBridgeConfiguration"))
    val LAMBDAFUNCTIONCONFIGURATIONS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("CloudFunctionConfiguration"), Flattened)
    val QUEUECONFIGURATIONS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("QueueConfiguration"), Flattened)
    val TOPICCONFIGURATIONS_DESCRIPTOR = SdkFieldDescriptor(SerialKind.List, XmlSerialName("TopicConfiguration"), Flattened)
    val OBJ_DESCRIPTOR = SdkObjectDescriptor.build {
        trait(XmlSerialName("NotificationConfiguration"))
        trait(XmlNamespace("http://s3.amazonaws.com/doc/2006-03-01/"))
        field(EVENTBRIDGECONFIGURATION_DESCRIPTOR)
        field(LAMBDAFUNCTIONCONFIGURATIONS_DESCRIPTOR)
        field(QUEUECONFIGURATIONS_DESCRIPTOR)
        field(TOPICCONFIGURATIONS_DESCRIPTOR)
    }

    serializer.serializeStruct(OBJ_DESCRIPTOR) {
        input.eventBridgeConfiguration?.let { field(EVENTBRIDGECONFIGURATION_DESCRIPTOR, it, ::serializeEventBridgeConfigurationDocument) }
        if (input.lambdaFunctionConfigurations != null) {
            listField(LAMBDAFUNCTIONCONFIGURATIONS_DESCRIPTOR) {
                for (el0 in input.lambdaFunctionConfigurations) {
                    serializeSdkSerializable(asSdkSerializable(el0, ::serializeLambdaFunctionConfigurationDocument))
                }
            }
        }
        if (input.queueConfigurations != null) {
            listField(QUEUECONFIGURATIONS_DESCRIPTOR) {
                for (el0 in input.queueConfigurations) {
                    serializeSdkSerializable(asSdkSerializable(el0, ::serializeQueueConfigurationDocument))
                }
            }
        }
        if (input.topicConfigurations != null) {
            listField(TOPICCONFIGURATIONS_DESCRIPTOR) {
                for (el0 in input.topicConfigurations) {
                    serializeSdkSerializable(asSdkSerializable(el0, ::serializeTopicConfigurationDocument))
                }
            }
        }
    }
    return serializer.toByteArray()
}
